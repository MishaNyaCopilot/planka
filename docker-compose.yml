services:
  traefik:
    image: "traefik:v2.11"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  planka:
    image: ghcr.io/plankanban/planka:2.0.0-rc.4
    restart: on-failure
    volumes:
      - favicons:/app/public/favicons
      - user-avatars:/app/public/user-avatars
      - background-images:/app/public/background-images
      - attachments:/app/private/attachments
    environment:
      - BASE_URL=https://${PLANKA_DOMAIN}
      - DATABASE_URL=postgresql://postgres@postgres/planka
      - SECRET_KEY=${PLANKA_SECRET_KEY}
      - S3_ENDPOINT=minio:9000
      - S3_REGION=${MINIO_REGION}
      - S3_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - S3_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - S3_BUCKET=planka
      - S3_FORCE_PATH_STYLE=true
    healthcheck:
      test: ["CMD", "node", "./healthcheck.js"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 15s
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.planka.rule=Host(`${PLANKA_DOMAIN}`)"
      - "traefik.http.routers.planka.entrypoints=websecure"
      - "traefik.http.routers.planka.tls.certresolver=myresolver"
      - "traefik.http.services.planka.loadbalancer.server.port=1337"

  postgres:
    image: postgres:16-alpine
    restart: on-failure
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=planka
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d planka"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_API_CORS_ALLOW_ORIGIN=https://${PLANKA_DOMAIN},https://minio.${PLANKA_DOMAIN}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.${PLANKA_DOMAIN}`)"
      - "traefik.http.routers.minio.entrypoints=websecure"
      - "traefik.http.routers.minio.tls.certresolver=myresolver"
      - "traefik.http.services.minio.loadbalancer.server.port=9001"

  create-buckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MC_HOST_myminio=http://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:9000
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc mb myminio/planka -p;
      /usr/bin/mc policy set download myminio/planka;
      "

  telegram-bot:
    build:
      context: ./telegram-bot
    restart: unless-stopped
    depends_on:
      planka:
        condition: service_healthy
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_ADMIN_IDS=${TELEGRAM_ADMIN_IDS}
      - PLANKA_API_URL=http://planka:1337/api
      - PLANKA_ADMIN_EMAIL=${PLANKA_ADMIN_EMAIL}
      - PLANKA_ADMIN_PASSWORD=${PLANKA_ADMIN_PASSWORD}

volumes:
  favicons:
  user-avatars:
  background-images:
  attachments:
  db-data:
  minio-data:
  letsencrypt:
