services:
  traefik:
    image: "traefik:v2.11"
    container_name: "traefik"
    networks:
      - planka-net
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  planka:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: planka-dev
    pull_policy: never
    command: ["bash", "-c", "npm install && npm rebuild && npm run db:init && npm start"]
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./server:/app
      - /app/node_modules
    ports:
      - 1337:1337
    environment:
      - BASE_URL=https://${PLANKA_DOMAIN}
      - DATABASE_URL=postgresql://postgres@postgres/planka
      - SECRET_KEY=${PLANKA_SECRET_KEY}
      # - S3_ENDPOINT=minio:9000
      # - S3_REGION=${MINIO_REGION}
      # - S3_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      # - S3_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      # - S3_BUCKET=planka
      # - S3_FORCE_PATH_STYLE=true
      - DEFAULT_ADMIN_EMAIL=${PLANKA_ADMIN_EMAIL}
      - DEFAULT_ADMIN_PASSWORD=${PLANKA_ADMIN_PASSWORD}
      - DEFAULT_ADMIN_NAME=${DEFAULT_ADMIN_NAME}
      - DEFAULT_ADMIN_USERNAME=${DEFAULT_ADMIN_USERNAME}
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:1337/api/bootstrap || exit 1"]
    #   interval: 10s
    #   timeout: 10s  # Больше на response (Sails может лагать)
    #   retries: 10   # Больше попыток
    #   start_period: 60s  # Полные 60s на npm install/db:init/nodemon lift
    networks:
      - planka-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.planka-backend.loadbalancer.server.port=1337"
      - "traefik.http.services.planka-backend.loadbalancer.server.scheme=http"
      - "traefik.http.routers.planka-backend.rule=Host(`planka.projects8.ru`) && (PathPrefix(`/api`) || PathPrefix(`/socket.io`))"
      - "traefik.http.routers.planka-backend.entrypoints=websecure"
      - "traefik.http.routers.planka-backend.tls.certresolver=myresolver"
      - "traefik.http.routers.planka-backend.priority=100"  # Выше приоритета frontend

  planka-client:
    build:
      context: .
      dockerfile: Dockerfile.client.dev
    image: planka-client-dev
    pull_policy: never
    restart: on-failure
    command: ["npx", "vite", "--host"]
    volumes:
      - /app/node_modules
    ports:
      - 3000:3000
    environment:
      - VITE_SERVER_BASE_URL=https://${PLANKA_DOMAIN}
      - PLANKA_DOMAIN=${PLANKA_DOMAIN}
    networks:
      - planka-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.planka-frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.planka-frontend.rule=Host(`planka.projects8.ru`)"  # Без Path — ловит остальное
      - "traefik.http.routers.planka-frontend.entrypoints=websecure"
      - "traefik.http.routers.planka-frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.planka-frontend.priority=10"  # Ниже backend

  postgres:
    image: postgres:16-alpine
    restart: on-failure
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=planka
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-planka} && psql -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-planka} -c 'SELECT 1'",
        ]
      interval: 3s
      timeout: 5s
      retries: 15
      start_period: 10s
    networks:
      - planka-net

  # minio:
  #   image: minio/minio:latest
  #   command: server /data --console-address ":9001"
  #   environment:
  #     - MINIO_ROOT_USER=minio_user
  #     - MINIO_ROOT_PASSWORD=minio_password
  #     - MINIO_API_CORS_ALLOW_ORIGIN=https://${PLANKA_DOMAIN},https://minio.${PLANKA_DOMAIN}
  #   volumes:
  #     - minio-data:/data
  #   networks:
  #     - planka-net
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.minio.rule=Host(`minio.${PLANKA_DOMAIN}`)"
  #     - "traefik.http.routers.minio.entrypoints=websecure"
  #     - "traefik.http.routers.minio.tls.certresolver=myresolver"
  #     - "traefik.http.services.minio.loadbalancer.server.port=9001"

  # create-buckets:
  #   image: minio/mc
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #   environment:
  #     - MC_HOST_myminio=http://minio_user:minio_password@minio:9000
  #   entrypoint: >
  #     /bin/sh -c "
  #     /usr/bin/mc mb myminio/planka -p;
  #     /usr/bin/mc policy set download myminio/planka;
  #     "
  #   networks:
  #     - planka-net

  telegram-bot:
    build:
      context: ./telegram-bot
    restart: unless-stopped
    command: ["python", "wait_for_planka.py"]
    depends_on:
        planka:
          condition: service_started
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_ADMIN_IDS=${TELEGRAM_ADMIN_IDS}
      - PLANKA_API_URL=http://planka:1337/api
      - PLANKA_ADMIN_EMAIL=${PLANKA_ADMIN_EMAIL}
      - PLANKA_ADMIN_PASSWORD=${PLANKA_ADMIN_PASSWORD}
    networks:
      - planka-net


volumes:
   db-data:
   # minio-data:
   letsencrypt:

networks:
  planka-net:
    driver: bridge
