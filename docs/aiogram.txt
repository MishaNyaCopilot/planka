aiogram==3.22.0
================
CODE SNIPPETS
================
TITLE: Quiz Example Initialization
DESCRIPTION: This Python code snippet provides a complete example of setting up and running a quiz game using aiogram scenes. It includes the scene definition and bot initialization.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_7

LANGUAGE: python
CODE:
```
# Example: quiz_scene.py

import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.fsm.scene import Scene, SceneRegistry, ScenesManager, After

# Configure logging
logging.basicConfig(level=logging.INFO)

# Bot token (replace with your actual token)
TOKEN = "YOUR_BOT_TOKEN"

# Scene definitions
class QuizScene(Scene, name="quiz"):
    @on.message.enter()
    async def on_enter(self, message: types.Message):
        await message.answer("Welcome to the Quiz Game! Let's start.")
        await message.answer_quiz(
            question="What is the capital of France?",
            options=["Berlin", "Madrid", "Paris", "Rome"],
            correct_option_id=2,
        )

    @on.callback_query.enter()
    async def on_enter_callback(self, callback_query: types.CallbackQuery):
        # Handle callback queries related to entering the scene, if any
        pass

    @on.message.answer()
    async def on_answer(self, message: types.Message):
        await message.answer("Thanks for your answer!")

    @on.exit()
    async def on_exit(self, message: types.Message):
        await message.answer("You have exited the quiz. Goodbye!")

    @on.callback_query.back()
    async def back(self, callback_query: types.CallbackQuery):
        await callback_query.answer("Going back to the previous question.")
        # Logic to go back to the previous question would be here

# Bot setup
bot = Bot(token=TOKEN)
dp = Dispatcher()

# Register scenes
scene_registry = SceneRegistry()
scene_registry.add(QuizScene)

# Register the scene handler to enter the quiz
@dp.message(Command("quiz"))
async def start_quiz_handler(message: types.Message, scenes: ScenesManager):
    await scenes.enter(QuizScene)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

```

--------------------------------

TITLE: Multi-file Bot Example in aiogram
DESCRIPTION: Informs about the inclusion of a multi-file bot example in the aiogram repository. This example showcases best practices for structuring larger aiogram projects.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_182

LANGUAGE: python
CODE:
```
# Project structure example:
# bot.py
# handlers/
#   __init__.py
#   start.py
#   message_handler.py
# config.py
```

--------------------------------

TITLE: Webhook Setup with SSL (aiogram)
DESCRIPTION: This example shows how to set up a webhook for an aiogram bot using SSL with a self-signed certificate, intended for scenarios without a reverse proxy.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/webhook.rst#_snippet_1

LANGUAGE: python
CODE:
```
import asyncio
import logging
import os

from aiohttp import web

from aiogram import Bot, Dispatcher, types
from aiogram.webhook.aiohttp_server import SimpleRequestHandler


API_TOKEN = os.getenv('API_TOKEN')

WEBHOOK_PORT = 8080
WEBHOOK_URL = f"https://your_domain.com:{WEBHOOK_PORT}/webhooks/main/"

# For example, if you have a self-signed certificate, you can use it like this:
PRIVATE_KEY = open('./webhook_cert.key', 'rb').read()
CERTIFICATE = open('./webhook_cert.pem', 'rb').read()
ssl_context = web.ssl_context.DefaultSSLContext(ssl.Purpose.CLIENT_AUTH)
ssl_context.load_cert_chain(CERTIFICATE, PRIVATE_KEY)


async def on_startup(bot: Bot):
    # Set webhook
    await bot.set_webhook(url=WEBHOOK_URL, certificate=CERTIFICATE)
    logging.info("Bot started and webhook configured!")


async def on_shutdown(bot: Bot):
    await bot.delete_webhook()


def main():
    dp = Dispatcher()
    handler = SimpleRequestHandler(dp, API_TOKEN)

    app = web.Application()

    # Configure webhook handler
    app.router.add_post('/webhooks/main/', handler)

    app['dp'] = dp
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    web.run_app(app, port=WEBHOOK_PORT, ssl_context=ssl_context)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    main()

```

--------------------------------

TITLE: Echo Bot Webhook Example (aiogram)
DESCRIPTION: This example demonstrates how to set up an echo bot using aiogram with a webhook, suitable for deployment behind a reverse proxy like Nginx.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/webhook.rst#_snippet_0

LANGUAGE: python
CODE:
```
import asyncio
import logging
import os

from aiohttp import web

from aiogram import Bot, Dispatcher, types
from aiogram.webhook.aiohttp_server import SimpleRequestHandler,
                                            TokenBasedRequestHandler


API_TOKEN = os.getenv('API_TOKEN')

WEBHOOK_HOST = 'your_domain.com'  # Address of the webhook server
WEBHOOK_PORT = 8080
WEBHOOK_URL = f"https://{WEBHOOK_HOST}:{WEBHOOK_PORT}/webhooks/main/"

# set webhook settings
# IMPORTANT:
# 
# TLS is required for webhook, so you'll need to use a self-signed certificate or
# generate a certificate using Let's Encrypt.
# For testing only, you can use a self-signed certificate.

# For example, if you have a self-signed certificate, you can use it like this:
# PRIVATE_KEY = open('./webhook_cert.key', 'rb').read()
# CERTIFICATE = open('./webhook_cert.pem', 'rb').read()


async def on_startup(bot: Bot):
    # If you want to use webhook, uncomment the following line
    # You'll need to replace 'YOUR_DOMAIN' with your actual domain name
    # await bot.set_webhook(url=WEBHOOK_URL, certificate=CERTIFICATE)

    logging.info("Bot started and webhook configured!")


async def on_shutdown(bot: Bot):
    await bot.delete_webhook()


async def index(request):
    return web.Response(text="Hello, world")


async def handle_webhook(request):
    # This handler is for SimpleRequestHandler
    # If you are using TokenBasedRequestHandler, you should use its handler
    update = types.Update.model_validate(await request.json(), context={'bot': request.bot})
    dp = request.app.get('dp')
    await dp.feed_update(bot=request.bot, update=update)
    return web.Response(text="OK")


def main():
    # For TokenBasedRequestHandler, use:
    # dp = Dispatcher(storage=MemoryStorage())
    # handler = TokenBasedRequestHandler(dp, API_TOKEN)

    # For SimpleRequestHandler, use:
    dp = Dispatcher()
    handler = SimpleRequestHandler(dp, API_TOKEN)

    app = web.Application()

    # Configure webhook handler
    app.router.add_post('/webhooks/main/', handler)
    app.router.add_get('/', index)

    # Add bot to application for handler access
    app['dp'] = dp
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # Enable CORS for all routes if you need to access the server from a different domain
    # cors = aiohttp_cors.setup(app, defaults={"*": aiohttp_cors.ResourceOptions(allow_credentials=True,allow_methods='*')})
    # for route in list(app.routes):
    #     cors.add(route)

    web.run_app(app, port=WEBHOOK_PORT)  # , ssl_context=ssl_context)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    main()

```

--------------------------------

TITLE: Install Project Dependencies (Windows)
DESCRIPTION: Installs aiogram in editable mode along with development, testing, documentation, and optional dependencies (fast, redis, mongo, proxy, i18n) on Windows.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_7

LANGUAGE: bash
CODE:
```
pip install -e .[dev,test,docs,fast,redis,mongo,proxy,i18n]
```

--------------------------------

TITLE: Build Docs with Language (Bash)
DESCRIPTION: Starts a live preview server for the aiogram documentation, specifying the language to build.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_13

LANGUAGE: bash
CODE:
```
sphinx-autobuild --watch aiogram/ docs/ docs/_build/ -D language=<language_code>
```

--------------------------------

TITLE: Build Docs Live Preview (Bash)
DESCRIPTION: Starts a live preview server for the aiogram documentation using sphinx-autobuild, watching for changes in the aiogram directory.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_11

LANGUAGE: bash
CODE:
```
sphinx-autobuild --watch aiogram/ docs/ docs/_build/
```

--------------------------------

TITLE: Start FSM Dialog with /start Command (Python)
DESCRIPTION: Handles the '/start' command to initiate a dialog and transition the user to the 'name' state within the FSM.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_1

LANGUAGE: python
CODE:
```
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await Form.name.set()
    await message.reply('Hi! What is your name? Give us your name.', reply_markup=ReplyKeyboardRemove())

```

--------------------------------

TITLE: Define and Transition Scene in aiogram
DESCRIPTION: Demonstrates defining a custom scene 'MyScene' that inherits from 'Scene' and manages state. It includes an example of handling incoming messages starting with '🚀' to transition to 'AnotherScene' using the wizard.goto method, allowing direct control over state transitions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_16

LANGUAGE: python
CODE:
```
class MyScene(Scene, state="my_scene"):
    ...

    @on.message(F.text.startswith("🚀"))
    async def on_message(self, message: Message):
        # Direct control over when and how to transition
        await self.wizard.goto(AnotherScene, value=message.text)

    ...
```

--------------------------------

TITLE: Handling Errors with error_handling.py Example in aiogram
DESCRIPTION: References an example file `examples/error_handling.py` demonstrating how to implement error handling within aiogram applications. This is crucial for robust bot development.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_180

LANGUAGE: python
CODE:
```
# Content of examples/error_handling.py would show:
# async def handle_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     # Error handling logic here
#     pass
```

--------------------------------

TITLE: Install Project Dependencies (Bash/macOS)
DESCRIPTION: Installs aiogram in editable mode along with development, testing, documentation, and optional dependencies (fast, redis, mongo, proxy, i18n) on Linux and macOS.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_6

LANGUAGE: bash
CODE:
```
pip install -e ."[dev,test,docs,fast,redis,mongo,proxy,i18n]"
```

--------------------------------

TITLE: Get Bot Commands as Method Object (Python)
DESCRIPTION: This example shows how to use GetMyCommands as a method object, which can be passed to the bot for execution. It requires importing the GetMyCommands class, either directly or via an alias. This method provides flexibility in how commands are managed.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_commands.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_my_commands import GetMyCommands

result: list[BotCommand] = await bot(GetMyCommands(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetMyCommands

result: list[BotCommand] = await bot(GetMyCommands(...))
```

--------------------------------

TITLE: Check Pip Version (Bash)
DESCRIPTION: Displays the version and path of the pip package installer within the activated virtual environment.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_4

LANGUAGE: bash
CODE:
```
pip -V
```

--------------------------------

TITLE: Complete FSM Example (Python)
DESCRIPTION: A complete Python script demonstrating the usage of Finite State Machines in aiogram for a multi-step user interaction, including state definition, handling, and cancellation.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_9

LANGUAGE: python
CODE:
```
import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

API_TOKEN = '...'

# logging
logging.basicConfig(level=logging.INFO)

# states
class Form(StatesGroup):
    name = State() 
    age = State() 
    gender = State()

# storage
storage = MemoryStorage()

# bot and dispatcher
bot = Bot(token=API_TOKEN)
dispatcher = Dispatcher(bot, storage=storage)


@dispatcher.message_handler(commands='start')
async def start_handler(message: types.Message):
    await Form.name.set() 
    await message.reply('What is your name?', reply_markup=ReplyKeyboardRemove())


@dispatcher.message_handler(state=Form.name)
async def process_name(message: types.Message):
    await message.reply('What is your age?')
    await Form.next()


@dispatcher.message_handler(lambda message: not message.text.isdigit(), state=Form.age):
async def process_age_invalid(message: types.Message):
    await message.reply('Age MUST be a number! Enter age again:')


@dispatcher.message_handler(lambda message: message.text.isdigit(), state=Form.age):
async def process_age(message: types.Message):
    await message.reply('What is your gender? Male/Female')
    await Form.next()


@dispatcher.message_handler(state=Form.gender):
async def process_gender(message: types.Message):
    await Form.finish()
    await message.reply('Thank you! Data saved.')


@dispatcher.message_handler(state='*', commands='cancel')
@dispatcher.message_handler(Text(equals='cancel', ignore_case=True), state='*'):
async def cancel_handler(message: types.Message):
    current_state = await dispatcher.current_state(user=message.from_user.id)
    await current_state.finish()
    await message.reply('Cancelled')


if __name__ == '__main__':
    executor.start_polling(dispatcher, skip_updates=True)

```

--------------------------------

TITLE: Install aiogram with i18n dependency
DESCRIPTION: To use translation functionality in aiogram, you need to install the optional i18n dependency.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_0

LANGUAGE: bash
CODE:
```
pip install aiogram[i18n]
```

--------------------------------

TITLE: Throttling Manager Example in aiogram
DESCRIPTION: This points to the availability of an example for the throttling manager within aiogram. Throttling is essential for preventing abuse by limiting the rate at which users can interact with the bot, and this example likely demonstrates its implementation.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_115

LANGUAGE: python
CODE:
```
# Conceptual example of throttling setup:
# from aiogram.utils.executor import start_polling
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.contrib.middlewares.throttle import ThrottlingMiddleware
# 
# dp.middleware.setup(ThrottlingMiddleware(limit=3, key_prefix='throttle_key'))

```

--------------------------------

TITLE: HTML Equivalent of Basic Formatting
DESCRIPTION: Shows the equivalent HTML markup for the basic text formatting example, highlighting the need for manual escaping and tag management when not using aiogram's formatting utilities.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/formatting.rst#_snippet_1

LANGUAGE: python
CODE:
```
await message.answer(
    text=f"Hello, <b>{html.quote(message.from_user.full_name)}</b>!",
    parse_mode=ParseMode.HTML
)
```

--------------------------------

TITLE: Aiogram Callback Query Handler
DESCRIPTION: Example of handling callback queries from inline keyboards using the @router.callback_query() decorator.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_7

LANGUAGE: python
CODE:
```
@router.callback_query()
async def callback_query_handler(callback_query: types.CallbackQuery) -> Any: pass
```

--------------------------------

TITLE: Get Bot Description as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the get_my_description method directly on the bot object to retrieve the bot's description. Requires an initialized bot instance.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_description.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: BotDescription = await bot.get_my_description(...)
```

--------------------------------

TITLE: AiohttpSession with Proxy Configuration
DESCRIPTION: Shows how to configure AiohttpSession to use a proxy server. Requires the 'aiohttp-socks' library to be installed. The proxy URL specifies the protocol and host.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/aiohttp.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram import Bot
from aiogram.client.session.aiohttp import AiohttpSession

session = AiohttpSession(proxy="protocol://host:port/")
bot = Bot(token="bot token", session=session)
```

--------------------------------

TITLE: Combine Middleware Defaults and Handler Flags (Python)
DESCRIPTION: Example demonstrating setting middleware defaults and overriding them with handler-specific flags for callback answers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/callback_answer.rst#_snippet_4

LANGUAGE: python
CODE:
```
dispatcher.callback_query.middleware(CallbackAnswerMiddleware(pre=True, text="🤔"))

@router.callback_query(<filters>)
@flags.callback_answer(pre=False, cache_time=30)
async def my_handler(query: CallbackQuery):
    ...
    if <everything is ok>:
        callback_answer.text = "All is ok"
```

--------------------------------

TITLE: Combining filters with AND condition
DESCRIPTION: This Python snippet shows how to use multiple filters in aiogram routers, effectively applying an 'AND' condition. If both specified filters (e.g., text starting with 'show' and ending with 'example') are met, the handler will be triggered.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/index.rst#_snippet_1

LANGUAGE: python
CODE:
```
@router.message(F.text.startswith("show"), F.text.endswith("example"))
```

--------------------------------

TITLE: Running the Quiz Bot
DESCRIPTION: This Python code snippet demonstrates how to run the aiogram bot with the quiz game functionality. It includes the necessary setup and polling loop.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_6

LANGUAGE: python
CODE:
```
async def main():
    # ... setup bot and dispatcher ...
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

```

--------------------------------

TITLE: Install Babel for Translation
DESCRIPTION: Installs the Babel library, which is required for extracting translation strings from your aiogram code. It can be installed via pip or as an extra dependency of aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_0

LANGUAGE: bash
CODE:
```
pip install Babel
```

LANGUAGE: bash
CODE:
```
pip install aiogram[i18n]
```

--------------------------------

TITLE: Add cover and start_timestamp to InputPaidMediaVideo
DESCRIPTION: Allows specifying covers and start timestamps for videos within paid media contexts using `InputPaidMediaVideo`. This improves the presentation of paid video content.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_68

LANGUAGE: python
CODE:
```
from aiogram.types.input_paid_media_video import InputPaidMediaVideo

# Example usage
# paid_media_item = InputPaidMediaVideo(media=open('paid_video.mp4', 'rb'), cover=open('paid_cover.jpg', 'rb'), start_timestamp=500)
```

--------------------------------

TITLE: Example of writing a custom filter
DESCRIPTION: This Python code demonstrates how to create a custom filter in aiogram. It defines an asynchronous function that checks if an incoming event's text starts with a specific prefix. This filter can then be used within aiogram's routing system.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/index.rst#_snippet_0

LANGUAGE: python
CODE:
```
import typing

from aiogram.filters import BaseFilter
from aiogram.types import Message


def simple_text_filter(prefix: typing.Optional[str] = None) -> typing.Callable[[Message], bool]:
    def filter_function(message: Message) -> bool:
        return message.text and message.text.startswith(prefix)

    return filter_function


class SimpleTextFilter(BaseFilter):
    def __init__(self, prefix: typing.Optional[str] = None):
        self.prefix = prefix

    async def __call__(self, message: Message) -> bool:
        return message.text and message.text.startswith(self.prefix)
```

--------------------------------

TITLE: Specify custom API Server example
DESCRIPTION: Provides an example demonstrating how to specify a custom API server for aiogram. This is useful for using self-hosted Telegram API instances or specific endpoints.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_34

LANGUAGE: python
CODE:
```
# Added possibility to more easy specify custom API Server (example)
```

--------------------------------

TITLE: Get Business Account Gifts - Bot Method
DESCRIPTION: Example of calling the getBusinessAccountGifts method directly on a bot instance. This is a common way to interact with the Telegram Bot API via aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_account_gifts.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: OwnedGifts = await bot.get_business_account_gifts(...)
```

--------------------------------

TITLE: Refactored Examples with Enumerations and Markdown in aiogram
DESCRIPTION: Details refactoring of example code to utilize aiogram enumerations and enhance chat messages with markdown. This improves code readability and the user experience of the examples.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_183

LANGUAGE: python
CODE:
```
# Refactored example snippet:
# from aiogram.enums import ContentType
#
# async def send_formatted_message(message: types.Message):
#     await message.reply("**Hello!** *How are you?*")
```

--------------------------------

TITLE: Get Bot Info as Method Object (Python)
DESCRIPTION: This snippet shows how to instantiate the GetMe method object and pass it to the bot for execution. This approach allows for more explicit control and is useful when chaining operations. It requires importing GetMe from aiogram.methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_me.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_me import GetMe

result: User = await bot(GetMe(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetMe

result: User = await bot(GetMe(...))
```

--------------------------------

TITLE: Get File as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the get_file method directly on a bot instance. Requires an initialized bot object and appropriate arguments for GetFile.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_file.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: File = await bot.get_file(...)
```

--------------------------------

TITLE: Aiogram Pre Checkout Query Handler
DESCRIPTION: Example of handling pre-checkout queries, which occur before payment confirmation, using @router.pre_checkout_query().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_9

LANGUAGE: python
CODE:
```
@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: types.PreCheckoutQuery) -> Any: pass
```

--------------------------------

TITLE: Get Bot Description as Method Object (Python)
DESCRIPTION: Shows how to use GetMyDescription as a method object, which can be passed to the bot instance for execution. This approach requires importing the GetMyDescription class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_description.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_my_description import GetMyDescription

result: BotDescription = await bot(GetMyDescription(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetMyDescription

result: BotDescription = await bot(GetMyDescription(...))
```

--------------------------------

TITLE: Format Code (Bash)
DESCRIPTION: Reformats the aiogram project's code, tests, and examples using Black for code style and isort for import sorting.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_8

LANGUAGE: bash
CODE:
```
black aiogram tests examples
isort aiogram tests examples
```

--------------------------------

TITLE: Start Command Handler (Python)
DESCRIPTION: This Python code snippet defines a handler for a command that initiates the quiz game. It uses aiogram's command decorator to link the handler to a specific command, typically '/quiz'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_1

LANGUAGE: python
CODE:
```
@dp.message_handler(commands='quiz')
async def start_quiz(message: Message):
    await message.scene.wizard.enter_scene(QuizScene())
```

--------------------------------

TITLE: Create Basic Telegram Bot Start Link (Python)
DESCRIPTION: Generates a basic deep linking URL for a Telegram bot, allowing parameters to be passed on startup. It utilizes the `create_start_link` function from `aiogram.utils.deep_linking`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/deep_linking.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.utils.deep_linking import create_start_link

link = await create_start_link(bot, 'foo')
```

--------------------------------

TITLE: Get File as Object Method (Python)
DESCRIPTION: Illustrates using the GetFile method as a standalone object, which is then passed to the bot instance. This approach requires importing the GetFile class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_file.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_file import GetFile

result: File = await bot(GetFile(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetFile

result: File = await bot(GetFile(...))
```

--------------------------------

TITLE: Aiogram Channel Post Handler
DESCRIPTION: Example of a handler for messages sent to a channel, registered with @router.channel_post().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_3

LANGUAGE: python
CODE:
```
@router.channel_post()
async def channel_post_handler(channel_post: types.Message) -> Any: pass
```

--------------------------------

TITLE: aiogram: Common Filter Usage Examples
DESCRIPTION: Provides several examples of using magic filters directly within aiogram router decorators for different types of events and conditions, such as text equality, inline query data, text prefixes, content types, and regular expressions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#_snippet_11

LANGUAGE: python
CODE:
```
@router.message(F.text == 'hello')
@router.inline_query(F.data == 'button:1')
@router.message(F.text.startswith('foo'))
@router.message(F.content_type.in_({'text', 'sticker'}))
@router.message(F.text.regexp(r'\d+'))

...
```

--------------------------------

TITLE: RedisStorage Initialization - aiogram
DESCRIPTION: Initializes the RedisStorage for storing FSM states using Redis. This storage is persistent and suitable for production environments. It requires the 'redis' library to be installed.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.fsm.storage.redis import RedisStorage

storage = RedisStorage(redis_url="redis://localhost:6379/")
```

--------------------------------

TITLE: Set Webhook as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the set_webhook method directly with the bot object to configure a webhook. This is a common way to initiate webhook setup.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_webhook.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_webhook(...)
```

--------------------------------

TITLE: Upgrade Pip (Bash)
DESCRIPTION: Upgrades the pip package installer to the latest version within the active Python virtual environment.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_5

LANGUAGE: bash
CODE:
```
python -m pip install --upgrade pip
```

--------------------------------

TITLE: Aiogram Chat Boost Handler
DESCRIPTION: Example of handling updates when a chat receives a boost (e.g., from Telegram Premium users) using @router.chat_boost().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_17

LANGUAGE: python
CODE:
```
@router.chat_boost()
async def chat_boost_handler(chat_boost: types.ChatBoostUpdated) -> Any: pass
```

--------------------------------

TITLE: Add video_start_timestamp to ForwardMessage method
DESCRIPTION: Enables changing the start timestamp for forwarded videos using the `ForwardMessage` method. This allows preserving or altering the playback start point when forwarding content.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_69

LANGUAGE: python
CODE:
```
from aiogram.methods.forward_message import ForwardMessage

# Example usage (assuming bot instance exists)
# await bot(ForwardMessage(chat_id=target_chat_id, from_chat_id=source_chat_id, message_id=message_id, video_start_timestamp=2000))
```

--------------------------------

TITLE: Get Chat Administrators as Method Object (Python)
DESCRIPTION: This snippet shows how to instantiate the GetChatAdministrators method and pass it to the bot object to get chat administrators. It requires importing the GetChatAdministrators class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_administrators.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_chat_administrators import GetChatAdministrators

result: list[ResultChatMemberUnion] = await bot(GetChatAdministrators(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetChatAdministrators

result: list[ResultChatMemberUnion] = await bot(GetChatAdministrators(...))
```

--------------------------------

TITLE: Entering a Scene
DESCRIPTION: Explains the different methods available for initiating a scene within an aiogram bot.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_15

LANGUAGE: APIDOC
CODE:
```
## How to Enter a Scene

There are several ways to initiate a scene in aiogram, each suited for different scenarios:

### 1. Directly using the Scene's Entry Point as a Handler

Convert a scene's entry point handler into a regular aiogram handler and register it.

**Example:**
```python
from aiogram import Router
from aiogram.filters import Command
# Assuming SettingsScene is defined elsewhere
# from .scenes import SettingsScene 

router = Router()

# router.message.register(SettingsScene.as_handler(), Command("settings"))
```

### 2. From a Regular Handler using ScenesManager

Use the `ScenesManager` within any standard handler to transition into a scene. This method requires explicitly passing any dependencies needed by the scene's entry point handler.

**Example:**
```python
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.scene import ScenesManager
# Assuming SettingsScene is defined elsewhere
# from .scenes import SettingsScene 

# @router.message(Command("settings"))
# async def settings_handler(message: Message, scenes: ScenesManager):
#     await scenes.enter(SettingsScene, some_data="data") # Pass additional arguments
```

### 3. From Another Scene using `After.goto` Marker

Transition to a different scene after a specific handler within the current scene has executed. This is achieved using the `After.goto` marker.

**Example:**
```python
from aiogram.fsm.scene import Scene, on, After
from aiogram.types import Message
# Assuming AnotherScene and SomeRepository are defined elsewhere
# from .scenes import AnotherScene
# from .repositories import SomeRepository
# from sqlalchemy.ext.asyncio import AsyncSession

# class MyScene(Scene, state="my_scene"):
#     ...

#     @on.message(F.text.startswith("🚀"), after=After.goto(AnotherScene))
#     async def on_message(self, message: Message, some_repo: SomeRepository, db: AsyncSession):
#         # Persist some data before going to another scene
#         await some_repo.save(user_id=message.from_user.id, value=message.text)
#         await db.commit()
#     ...
```

### 4. Using Explicit Transition with `wizard.goto`

Gain fine-grained control over scene transitions by utilizing the `wizard.goto` method directly from within a scene handler. Dependencies will be automatically injected and can be extended with arguments provided to `goto`.

**Note:** Dependencies are injected normally and then augmented with arguments specified in the `goto` method.
```

--------------------------------

TITLE: Aiogram Message Reaction Handler
DESCRIPTION: Example of handling updates when users react to messages using the @router.message_reaction() decorator.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_15

LANGUAGE: python
CODE:
```
@router.message_reaction()
async def message_reaction_handler(message_reaction: types.MessageReactionUpdated) -> Any: pass
```

--------------------------------

TITLE: Aiogram Inline Query Handler
DESCRIPTION: Example of how to handle inline queries with the @router.inline_query() decorator. This is used for bots that respond to queries in any chat.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_5

LANGUAGE: python
CODE:
```
@router.inline_query()
async def inline_query_handler(inline_query: types.InlineQuery) -> Any: pass
```

--------------------------------

TITLE: Fix typos in documentation and examples
DESCRIPTION: This commit addresses and corrects various typos found in the project's documentation and code examples. It improves the overall quality and readability of the project's resources.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_26

LANGUAGE: python
CODE:
```
# Fixed some typos in docs and examples (#489, #490, #498, #504, #514)
```

--------------------------------

TITLE: Set Sticker Keywords - Webhook Reply
DESCRIPTION: This example illustrates how to return a `SetStickerKeywords` object as a reply within a webhook handler in aiogram. This is a common pattern for responding to incoming updates via webhooks.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_keywords.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetStickerKeywords(...)
```

--------------------------------

TITLE: Add cover and start_timestamp to SendVideo method
DESCRIPTION: Allows specifying a cover image and a start timestamp for videos sent via the `SendVideo` method. This enhances video playback control and presentation.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_66

LANGUAGE: python
CODE:
```
from aiogram.methods.send_video import SendVideo

# Example usage (assuming bot instance exists)
# await bot(SendVideo(chat_id=chat_id, video=open('video.mp4', 'rb'), cover=open('cover.jpg', 'rb'), start_timestamp=1000, ...))
```

--------------------------------

TITLE: Python: Define PreCheckoutQueryHandler
DESCRIPTION: Example of defining a custom handler for pre-checkout queries by subclassing PreCheckoutQueryHandler. This handler will be registered with the router to process specific events.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/pre_checkout_query.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.handlers import PreCheckoutQueryHandler

... # Assuming 'router' is defined elsewhere

@router.pre_checkout_query()
class MyHandler(PreCheckoutQueryHandler):
    async def handle(self) -> Any: ...

```

--------------------------------

TITLE: Quiz Scene Entry Point Handler
DESCRIPTION: This Python code snippet defines the entry point handler for a Quiz Scene, responsible for displaying the results of a quiz to the user. It's part of the quiz_scene.py example.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_3

LANGUAGE: python
CODE:
```
class QuizScene(Scene, name="quiz"):
    ...
    @on.exit()
    async def on_exit(self, message: types.Message):
        await message.answer("Your results:")
        await message.answer_quiz(
            question="What is the capital of France?",
            options=["Berlin", "Madrid", "Paris", "Rome"],
            correct_option_id=2,
        )
    ...

```

--------------------------------

TITLE: Aiogram Poll Answer Handler
DESCRIPTION: Example of handling updates when a user answers a poll using @router.poll_answer().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_11

LANGUAGE: python
CODE:
```
@router.poll_answer()
async def poll_answer_handler(poll_answer: types.PollAnswer) -> Any: pass
```

--------------------------------

TITLE: Instantiate and Call AnswerCallbackQuery
DESCRIPTION: This shows how to instantiate the AnswerCallbackQuery object and then pass it to the bot object for execution. This approach offers more flexibility in managing the callback query response.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_callback_query.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.answer_callback_query import AnswerCallbackQuery
result: bool = await bot(AnswerCallbackQuery(...))
```

--------------------------------

TITLE: Set Sticker Keywords - Method Object
DESCRIPTION: This snippet shows how to use `SetStickerKeywords` as a method object in aiogram. It requires importing the class and then passing an instance to the bot. The examples cover direct import and aliased import.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_keywords.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_sticker_keywords import SetStickerKeywords

result: bool = await bot(SetStickerKeywords(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetStickerKeywords

result: bool = await bot(SetStickerKeywords(...))
```

--------------------------------

TITLE: Instantiate aiogram Bot
DESCRIPTION: Shows how to create an instance of the aiogram Bot class, which is required for interacting with the Telegram Bot API. An API token is necessary for configuration.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/bot.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram import Bot

bot = Bot(token="YOUR_API_TOKEN")
```

--------------------------------

TITLE: Create Forum Topic as a Bot Object Method
DESCRIPTION: Shows how to instantiate and use the `CreateForumTopic` method as an object with a specific bot instance. This approach allows for more explicit control over the method call.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.create_forum_topic import CreateForumTopic
result: ForumTopic = await bot(CreateForumTopic(...))
```

--------------------------------

TITLE: Implement Custom Handler with BaseHandler
DESCRIPTION: Shows an example of creating a custom handler by inheriting from BaseHandler and overriding the handle method to respond to a message.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/base.rst#_snippet_1

LANGUAGE: python
CODE:
```
from typing import Any
from aiogram import types
from aiogram.handlers import BaseHandler

class MyHandler(BaseHandler[types.Message]):
    async def handle(self) -> Any:
         await self.event.answer("Hello!")
```

--------------------------------

TITLE: Use GetMyShortDescription as Method Object (Python)
DESCRIPTION: Shows how to use GetMyShortDescription as a method object, allowing it to be called with a bot instance. This approach involves importing the method explicitly.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_short_description.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_my_short_description import GetMyShortDescription
# or
from aiogram.methods import GetMyShortDescription

result: BotShortDescription = await bot(GetMyShortDescription(...))
```

--------------------------------

TITLE: Add cover and start_timestamp to InputMediaVideo
DESCRIPTION: Enables editing video covers and start timestamps for videos included in albums or paid media using `InputMediaVideo`. This provides more control over media display in collections.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_67

LANGUAGE: python
CODE:
```
from aiogram.types.input_media_video import InputMediaVideo

# Example usage
# media_item = InputMediaVideo(media=open('video.mp4', 'rb'), cover=open('cover.jpg', 'rb'), start_timestamp=1000)
```

--------------------------------

TITLE: Scene Markers and Entry Points
DESCRIPTION: Demonstrates how to use the `on` marker to define entry, leave, and exit points for scene handlers, and how to specify event types and filters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_14

LANGUAGE: APIDOC
CODE:
```
## Scene Markers

Markers are used to designate specific handlers within a `Scene` class for different interaction points (entry, leave, exit).

### Usage
Import the `on` object from `aiogram.fsm.scene` and use it as a decorator.

### Allowed Event Types
Markers can be applied to various Telegram event types:
- `message`
- `edited_message`
- `channel_post`
- `edited_channel_post`
- `inline_query`
- `chosen_inline_result`
- `callback_query`
- `shipping_query`
- `pre_checkout_query`
- `poll`
- `poll_answer`
- `my_chat_member`
- `chat_member`
- `chat_join_request`

### Filtering and Transition Points
Each event type can be filtered similarly to aiogram's `Router`. Additionally, event types can be marked as scene entry points, exit points, or leave points.

#### Scene Entry Points
Mark handlers that should be triggered when a user enters the scene.

**Example:**
```python
from aiogram.fsm.scene import Scene, on
from aiogram import types

class MyScene(Scene, name="my_scene"):
    @on.message.enter()
    async def on_enter(self, message: types.Message):
        # Handler for entering the scene via a message
        pass

    @on.callback_query.enter()
    async def on_enter(self, callback_query: types.CallbackQuery):
        # Handler for entering the scene via a callback query
        pass
```

#### Scene Leave Points
Mark handlers that are executed when a user leaves the current scene to transition to another.

#### Scene Exit Points
Mark handlers that are executed when a user exits the scene entirely.

### Scene Transition Points
A `Scene` has three primary transition points:
- **Enter Point**: Triggered when a user enters the scene.
- **Leave Point**: Triggered when a user leaves the current scene to enter another scene.
- **Exit Point**: Triggered when a user exits the scene completely.
```

--------------------------------

TITLE: Get Sticker Set as Method Object (Python)
DESCRIPTION: Shows how to use the `GetStickerSet` method as a distinct object, which can be passed to the bot for execution. This approach requires importing the `GetStickerSet` class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_sticker_set.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_sticker_set import GetStickerSet

result: StickerSet = await bot(GetStickerSet(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetStickerSet

result: StickerSet = await bot(GetStickerSet(...))
```

--------------------------------

TITLE: Register Handler with Flags (Python)
DESCRIPTION: Registers a handler with specific flags defined in a dictionary. This example shows setting 'chat_action' and 'rate_limit' flags.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#_snippet_2

LANGUAGE: python
CODE:
```
@router.message(..., flags={'chat_action': 'typing', 'rate_limit': {'rate': 5}})
```

--------------------------------

TITLE: Get Star Transactions API
DESCRIPTION: Retrieves a list of all Telegram Star transactions for the bot, including details about each transaction.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_151

LANGUAGE: APIDOC
CODE:
```
## GET /getStarTransactions

### Description
Use this method to get a list of all Telegram Star transactions that the bot has been involved in.

### Method
GET

### Endpoint
/getStarTransactions

### Parameters
#### Path Parameters
None

#### Query Parameters
- **offset** (int) - Optional - Number of transactions to skip.
- **limit** (int) - Optional - Maximum number of transactions to return. Defaults to 100.

### Request Example
```
GET /getStarTransactions?limit=10
```

### Response
#### Success Response (200)
- **transactions** (Array of StarTransaction) - List of transaction objects.

#### Response Example
```json
{
  "ok": true,
  "result": {
    "transactions": [
      {
        "id": "txn_12345abc",
        "counterparty": {
          "type": "user",
          "user": {
            "id": 123456789,
            "is_bot": false,
            "first_name": "Jane",
            "username": "janedoe"
          }
        },
        "amount": 100,
        "date": 1678886400,
        "type": "depletion"
      }
    ]
  }
}
```
```

--------------------------------

TITLE: Get My Star Balance as Method Object
DESCRIPTION: This snippet illustrates how to use GetMyStarBalance as a method object, which can be passed to the bot object for execution. It requires importing the GetMyStarBalance class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_star_balance.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_my_star_balance import GetMyStarBalance
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetMyStarBalance
```

LANGUAGE: python
CODE:
```
result: StarAmount = await bot(GetMyStarBalance(...))
```

--------------------------------

TITLE: Integrate aiohttp Application with aiogram
DESCRIPTION: This snippet provides an example demonstrating how to integrate an externally created `aiohttp` Application with aiogram. It shows a pattern for combining these two asynchronous libraries.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_24

LANGUAGE: python
CODE:
```
# Added an example of integration between externally created aiohttp Application and aiogram (#433)
```

--------------------------------

TITLE: Scene Handler with Message Enter Marker
DESCRIPTION: Demonstrates how to use the `@on.message.enter()` marker to define an entry point for a scene when a message event occurs. This is a standard way to initiate a scene.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_8

LANGUAGE: python
CODE:
```
from aiogram.fsm.scene import Scene, on
from aiogram import types

class MyScene(Scene, name="my_scene"):
    @on.message.enter()
    async def on_enter(self, message: types.Message):
        await message.answer("Welcome to MyScene!")

```

--------------------------------

TITLE: Get File ID for Document
DESCRIPTION: Extracts the file_id from a received document message. This is the first step in downloading a file.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#_snippet_0

LANGUAGE: python
CODE:
```
file_id = message.document.file_id
```

--------------------------------

TITLE: Aiogram Chat Member Handler
DESCRIPTION: Example of handling updates when any chat member's status changes using the @router.chat_member() decorator.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_13

LANGUAGE: python
CODE:
```
@router.chat_member()
async def chat_member_handler(chat_member: types.ChatMemberUpdated) -> Any: pass
```

--------------------------------

TITLE: Entering a Scene Directly via Handler Registration
DESCRIPTION: Shows how to register a scene's entry point as a handler with the router, allowing the scene to be activated by specific commands or filters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_10

LANGUAGE: python
CODE:
```
from aiogram.filters.command import Command
from aiogram.fsm.scene import Scene

# Assuming SettingsScene is defined elsewhere
# class SettingsScene(Scene, name="settings"):
#    ...

# router.message.register(SettingsScene.as_handler(), Command("settings"))

```

--------------------------------

TITLE: Aiogram FiltersResolveError Example
DESCRIPTION: Illustrates a FiltersResolveError in aiogram, indicating an unknown keyword filter 'content_types' or an invalid content type specified.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_216

LANGUAGE: python
CODE:
```
aiogram.exceptions.FiltersResolveError: Unknown keyword filters: {'content_types'}
  Possible cases:
  - 1 validation error for ContentTypesFilter
    content_types
      Invalid content types {'42'} is not allowed here (type=value_error)
```

--------------------------------

TITLE: Get Chat Menu Button as Bot Method
DESCRIPTION: This snippet demonstrates how to use the getChatMenuButton method directly as a method of the bot object. It returns a ResultMenuButtonUnion.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_menu_button.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: ResultMenuButtonUnion = await bot.get_chat_menu_button(...)
```

--------------------------------

TITLE: Quiz Scene Back Handler
DESCRIPTION: This Python code snippet defines a handler for navigating back to the previous question within the quiz game. It's part of the quiz_scene.py example.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_5

LANGUAGE: python
CODE:
```
class QuizScene(Scene, name="quiz"):
    ...
    @on.callback_query.back()
    async def back(self, callback_query: types.CallbackQuery):
        await callback_query.answer("Going back to the previous question.")
        # Logic to go back to the previous question would be here
    ...

```

--------------------------------

TITLE: Using wizard.goto for Explicit Scene Transition
DESCRIPTION: Shows how to use the `wizard.goto` method within a scene handler for explicit control over transitioning to another scene, allowing for additional arguments to be passed.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_13

LANGUAGE: python
CODE:
```
from aiogram.fsm.scene import Scene, on
from aiogram.types import Message

# Assuming AnotherScene is defined elsewhere
# class AnotherScene(Scene, name="another_scene"):
#    async def on_enter(self, message: Message, extra_info: str):
#        await message.answer(f"Entered with: {extra_info}")

# class MyScene(Scene, name="my_scene"):
#    ...
#    @on.message()
#    async def on_message(self, message: Message, wizard):
#        await message.answer("Moving to AnotherScene.")
#        await wizard.goto(AnotherScene, extra_info="some_value")
#    ...

```

--------------------------------

TITLE: Usage as Method Object
DESCRIPTION: Shows how to instantiate and use AnswerPreCheckoutQuery as a method object. This involves importing the class and passing an instance to the bot. It supports different import aliases.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_pre_checkout_query.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.answer_pre_checkout_query import AnswerPreCheckoutQuery

result: bool = await bot(AnswerPreCheckoutQuery(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import AnswerPreCheckoutQuery

result: bool = await bot(AnswerPreCheckoutQuery(...))
```

--------------------------------

TITLE: Entering a Scene from a Regular Handler using ScenesManager
DESCRIPTION: Demonstrates how to use the `ScenesManager` within a regular bot handler to programmatically enter a scene, passing necessary data to the scene's entry point.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_11

LANGUAGE: python
CODE:
```
from aiogram.fsm.scene import ScenesManager
from aiogram.types import Message
from aiogram.filters.command import Command

# Assuming SettingsScene is defined elsewhere
# class SettingsScene(Scene, name="settings"):
#    async def on_enter(self, message: Message, some_data: str):
#        await message.answer(f"Entering with data: {some_data}")

# @router.message(Command("settings"))
# async def settings_handler(message: Message, scenes: ScenesManager):
#     await scenes.enter(SettingsScene, some_data="data")

```

--------------------------------

TITLE: Instantiate and use AnswerInlineQuery object (Python)
DESCRIPTION: Shows how to import and use the `AnswerInlineQuery` class. This approach involves creating an instance of the method and passing it to the bot object. It's an alternative way to manage method calls.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_inline_query.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.answer_inline_query import AnswerInlineQuery

# Usage with specific bot
result: bool = await bot(AnswerInlineQuery(...))

# Usage as reply in Webhook handler
return AnswerInlineQuery(...)
```

--------------------------------

TITLE: Get quote_html and escape_md functions
DESCRIPTION: Retrieves the quote_html and escape_md functions, likely for formatting or escaping text within Telegram messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_71

LANGUAGE: python
CODE:
```
from aiogram.utils.text import quote_html, escape_md
```

--------------------------------

TITLE: Get User Profile Photos (Method Object)
DESCRIPTION: This snippet demonstrates how to use GetUserProfilePhotos as a method object, which can be passed to the bot. It requires importing the GetUserProfilePhotos class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_user_profile_photos.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_user_profile_photos import GetUserProfilePhotos

result: UserProfilePhotos = await bot(GetUserProfilePhotos(...))
```

--------------------------------

TITLE: Use GetMyShortDescription as Bot Method (Python)
DESCRIPTION: Demonstrates how to call the get_my_short_description method directly on a bot instance. This is a common way to interact with bot methods in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_short_description.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: BotShortDescription = await bot.get_my_short_description(...)
```

--------------------------------

TITLE: Get Star Transactions as Method Object
DESCRIPTION: This snippet shows how to use GetStarTransactions as a standalone method object. It requires importing the method from aiogram.methods.get_star_transactions or its alias. The method object is then passed to the bot instance for execution, returning StarTransactions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_star_transactions.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_star_transactions import GetStarTransactions

result: StarTransactions = await bot(GetStarTransactions(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetStarTransactions

result: StarTransactions = await bot(GetStarTransactions(...))
```

--------------------------------

TITLE: HTML Rendering of Advanced Formatting
DESCRIPTION: Presents the HTML output generated from the advanced structured message formatting example. This demonstrates how aiogram's utilities translate structured content into corresponding HTML tags for display in Telegram messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/formatting.rst#_snippet_3

LANGUAGE: html
CODE:
```
<b>Success:</b>
✅ Test 1
✅ Test 3
✅ Test 4

<b>Failed:</b>
❌ Test 2

<b>Summary:</b>
  <b>Total:</b> 4
  <b>Success:</b> 3
  <b>Failed:</b> 1

#test
```

--------------------------------

TITLE: Reply with Audio using Message Shortcut (Python)
DESCRIPTION: Provides examples of using the reply_audio or answer_audio shortcuts available on Message objects to send audio replies. These methods simplify the process of responding to user messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_audio.rst#_snippet_3

LANGUAGE: python
CODE:
```
# From Message object
await message.reply_audio(...)
```

LANGUAGE: python
CODE:
```
# From ChatJoinRequest object
await chat_join_request.answer_audio(...)
```

LANGUAGE: python
CODE:
```
# From ChatMemberUpdated object
await chat_member_updated.answer_audio(...)
```

LANGUAGE: python
CODE:
```
# From InaccessibleMessage object
await inaccessible_message.reply_audio(...)
```

--------------------------------

TITLE: Build and Send Media Group with aiogram
DESCRIPTION: Demonstrates how to initialize MediaGroupBuilder, add various media types (photos, videos) using different methods, and send the built media group via the bot. It shows adding media by URL or as a file, and sending the group with a caption.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/media_group.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.types import FSInputFile
from aiogram.utils.media_group import MediaGroupBuilder

# Initialize the builder with an optional caption
media_group = MediaGroupBuilder(caption="Media group caption")

# Add a photo using the dedicated method
media_group.add_photo(media="https://picsum.photos/200/300")

# Dynamically add a photo with a specified type
media_group.add(type="photo", media="https://picsum.photos/200/300")

# Add a video using a file path
media_group.add(type="video", media=FSInputFile("media/video.mp4"))

# To send the media group, use the bot's send_media_group method,
# passing the result of media_group.build() to the 'media' argument.
# await bot.send_media_group(chat_id=chat_id, media=media_group.build())
```

--------------------------------

TITLE: Get Business Account Gifts - Method Object
DESCRIPTION: Demonstrates using GetBusinessAccountGifts as a method object, which can be passed to the bot instance. This approach requires importing the method class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_account_gifts.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts

result: OwnedGifts = await bot(GetBusinessAccountGifts(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetBusinessAccountGifts

result: OwnedGifts = await bot(GetBusinessAccountGifts(...))
```

--------------------------------

TITLE: Get User Profile Photos (Bot Method)
DESCRIPTION: This snippet shows how to call the getUserProfilePhotos method directly on the bot object. It returns a UserProfilePhotos object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_user_profile_photos.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: UserProfilePhotos = await bot.get_user_profile_photos(...)
```

--------------------------------

TITLE: Get Webhook Info as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to call the `get_webhook_info` method directly on a bot instance. It returns a `WebhookInfo` object containing details about the webhook.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_webhook_info.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: WebhookInfo = await bot.get_webhook_info(...)
```

--------------------------------

TITLE: Fixed setup.py Compatibility with pip 10.0.0 in aiogram
DESCRIPTION: This addresses a compatibility issue with the `setup.py` file, ensuring it works correctly with `pip` version 10.0.0. This fix is important for users who are installing or updating the library using this specific version of pip.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_103

LANGUAGE: python
CODE:
```
# Indicates changes within setup.py to handle pip 10.0.0 requirements.
# Example change might involve how package data or dependencies are declared.
# 
# setup(
#     name='aiogram',
#     version='1.2.3',
#     packages=find_packages(),
#     # ... other setup parameters ...
# )

```

--------------------------------

TITLE: Reply with Photo using Message Shortcut (aiogram)
DESCRIPTION: Provides examples of using message object shortcuts like reply_photo and answer_photo to send photos. These shortcuts simplify media sending from existing message objects.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_photo.rst#_snippet_3

LANGUAGE: python
CODE:
```
# Example usage with aiogram.types.message.Message.answer_photo
# await message.answer_photo(...)

# Example usage with aiogram.types.message.Message.reply_photo
# await message.reply_photo(...)

# Example usage with aiogram.types.chat_join_request.ChatJoinRequest.answer_photo
# await chat_join_request.answer_photo(...)

# Example usage with aiogram.types.chat_join_request.ChatJoinRequest.answer_photo_pm
# await chat_join_request.answer_photo_pm(...)

# Example usage with aiogram.types.chat_member_updated.ChatMemberUpdated.answer_photo
# await chat_member_updated.answer_photo(...)

# Example usage with aiogram.types.inaccessible_message.InaccessibleMessage.answer_photo
# await inaccessible_message.answer_photo(...)

# Example usage with aiogram.types.inaccessible_message.InaccessibleMessage.reply_photo
# await inaccessible_message.reply_photo(...)
```

--------------------------------

TITLE: Get Webhook Info as Method Object (Python)
DESCRIPTION: This snippet shows how to use `GetWebhookInfo` as a method object. It requires importing the `GetWebhookInfo` class and then passing an instance of it to the bot. This method also returns a `WebhookInfo` object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_webhook_info.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_webhook_info import GetWebhookInfo

result: WebhookInfo = await bot(GetWebhookInfo(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetWebhookInfo

result: WebhookInfo = await bot(GetWebhookInfo(...))
```

--------------------------------

TITLE: Set Business Account Profile Photo - Method Object
DESCRIPTION: Shows how to instantiate and use `SetBusinessAccountProfilePhoto` as a method object with a bot instance. This approach allows for more explicit control and is useful for passing methods around.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_profile_photo.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_business_account_profile_photo import SetBusinessAccountProfilePhoto
# alias: from aiogram.methods import SetBusinessAccountProfilePhoto

result: bool = await bot(SetBusinessAccountProfilePhoto(...))
```

--------------------------------

TITLE: Aiogram Error Handler
DESCRIPTION: Example of registering a general error handler using @router.errors(). This handler catches exceptions raised by other handlers or during update processing.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_19

LANGUAGE: python
CODE:
```
@router.errors()
async def error_handler(exception: types.ErrorEvent) -> Any: pass
```

--------------------------------

TITLE: Dependency Injection Technology in aiogram
DESCRIPTION: Covers the addition of a section detailing Dependency Injection technology within aiogram. This guides developers on how to manage dependencies effectively in their bots.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_181

LANGUAGE: python
CODE:
```
# Documentation section details:
# - How to inject dependencies into handlers.
# - Benefits of using DI for state management and testing.
```

--------------------------------

TITLE: Post Story as Webhook Reply (Python)
DESCRIPTION: This example illustrates how to return a PostStory object as a reply within a webhook handler. This is a common pattern for handling incoming updates via webhooks.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/post_story.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.post_story import PostStory
return PostStory(...)
```

--------------------------------

TITLE: Initialize Language with Pybabel
DESCRIPTION: Shows the Pybabel command to initialize language-specific translation files. It takes the message template (messages.pot), the output directory for translations, the translation domain, and the target language code (e.g., 'en').

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_7

LANGUAGE: bash
CODE:
```
pybabel init -i locales/messages.pot -d locales -D messages -l en
```

--------------------------------

TITLE: Get Chat Menu Button as Method Object
DESCRIPTION: This snippet shows how to use the GetChatMenuButton method as a standalone object, which is then passed to the bot. This approach requires importing the method explicitly.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_menu_button.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_chat_menu_button import GetChatMenuButton
result: ResultMenuButtonUnion = await bot(GetChatMenuButton(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetChatMenuButton
result: ResultMenuButtonUnion = await bot(GetChatMenuButton(...))
```

--------------------------------

TITLE: Transitioning to Another Scene using After.goto Marker
DESCRIPTION: Illustrates how to configure a scene handler to automatically transition to another scene after its execution using the `After.goto` marker, often used for sequential workflows.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_12

LANGUAGE: python
CODE:
```
from aiogram.fsm.scene import Scene, on, After
from aiogram.types import Message

# Assuming AnotherScene is defined elsewhere
# class AnotherScene(Scene, name="another_scene"):
#    ...

# class MyScene(Scene, name="my_scene"):
#    ...
#    @on.message(F.text.startswith("🚀"), after=After.goto(AnotherScene))
#    async def on_message(self, message: Message):
#        await message.answer("Proceeding to the next scene...")
#        # Persist data or perform actions before transition
#    ...

```

--------------------------------

TITLE: Get Forum Topic Icon Stickers as Method Object (Python)
DESCRIPTION: Shows how to use `GetForumTopicIconStickers` as a method object with a bot instance. This involves importing the method class and passing an instance of it to the bot object. This approach is useful for structuring bot interactions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_forum_topic_icon_stickers.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_forum_topic_icon_stickers import GetForumTopicIconStickers

result: list[Sticker] = await bot(GetForumTopicIconStickers(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetForumTopicIconStickers

result: list[Sticker] = await bot(GetForumTopicIconStickers(...))
```

--------------------------------

TITLE: Get Game High Scores as Standalone Object (Python)
DESCRIPTION: This snippet demonstrates using GetGameHighScores as a standalone object with the bot. It requires importing the GetGameHighScores class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_game_high_scores.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_game_high_scores import GetGameHighScores

result: list[GameHighScore] = await bot(GetGameHighScores(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetGameHighScores

result: list[GameHighScore] = await bot(GetGameHighScores(...))
```

--------------------------------

TITLE: Add state support in aiogram scenes methods
DESCRIPTION: Introduced support for the State type in aiogram scenes methods such as goto, enter, and get, enhancing state management within scenes.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_9

LANGUAGE: python
CODE:
```
from aiogram.fsm.state import State

# Example usage:
# await state.goto(MyState.next_state)
# await state.enter(MyState.initial_state)
# current_state: State = await state.get()
```

--------------------------------

TITLE: Using Type Hints for Middleware Context Data (Python)
DESCRIPTION: Provides an example of using type hints to define custom middleware context data, extending `MiddlewareData`. This enhances code readability and allows type checkers to validate context usage, improving maintainability and reducing errors.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#_snippet_4

LANGUAGE: python
CODE:
```
from typing import Any, Awaitable, Callable
from aiogram.dispatcher.middlewares.data import MiddlewareData
from aiogram.types import Message


class MyMiddlewareData(MiddlewareData, total=False):
    my_custom_value: int


class MyMessageMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, MyMiddlewareData], Awaitable[Any]],
        event: Message,
        data: MyMiddlewareData,
    ) -> Any:
        bot = data["bot"]  # <-- IDE will show you that data has `bot` key and its type is `Bot`

        data["my_custom_value"] = bot.id * 42  # <-- IDE will show you that you can set `my_custom_value` key with int value and warn you if you try to set it with other type
        return await handler(event, data)
```

--------------------------------

TITLE: Get Business Connection as Bot Method
DESCRIPTION: This snippet demonstrates how to call the getBusinessConnection method directly on a bot instance in aiogram. It requires a bot object and returns a BusinessConnection object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_connection.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: BusinessConnection = await bot.get_business_connection(...)
```

--------------------------------

TITLE: Aiogram Message Handler
DESCRIPTION: Example of registering a handler for incoming messages using the @router.message() decorator. It's recommended to use magic filters for specific message content.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_1

LANGUAGE: python
CODE:
```
@router.message()
async def message_handler(message: types.Message) -> Any: pass
```

--------------------------------

TITLE: Get Star Transactions as Bot Method
DESCRIPTION: This snippet demonstrates how to call the GetStarTransactions method using the bot object directly. It requires an initialized bot instance and relevant parameters for the transaction retrieval. The result is expected to be of type StarTransactions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_star_transactions.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: StarTransactions = await bot.get_star_transactions(...)
```

--------------------------------

TITLE: Advanced Structured Message Formatting
DESCRIPTION: Illustrates advanced message formatting using various aiogram utility functions like as_list, as_marked_section, and as_key_value to create structured and readable messages with custom markers and separators. This example shows how to combine different formatting elements for complex layouts.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/formatting.rst#_snippet_2

LANGUAGE: python
CODE:
```
content = as_list(
    as_marked_section(
        Bold("Success:"),
        "Test 1",
        "Test 3",
        "Test 4",
        marker="✅ ",
    ),
    as_marked_section(
        Bold("Failed:"),
        "Test 2",
        marker="❌ ",
    ),
    as_marked_section(
        Bold("Summary:"),
        as_key_value("Total", 4),
        as_key_value("Success", 3),
        as_key_value("Failed", 1),
        marker="  ",
    ),
    HashTag("#test"),
    sep="\n\n",
)
```

--------------------------------

TITLE: Add missing thumb parameter
DESCRIPTION: Includes the missing `thumb` parameter in relevant methods. This allows for the specification of thumbnail images, for example, when sending files or media.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_46

LANGUAGE: python
CODE:
```
# Added missing thumb parameter (#362)
```

--------------------------------

TITLE: Initialize CallbackAnswerMiddleware with Defaults (Python)
DESCRIPTION: Set global default parameters for the CallbackAnswerMiddleware during initialization, such as 'pre' mode or a default text.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/callback_answer.rst#_snippet_1

LANGUAGE: python
CODE:
```
dispatcher.callback_query.middleware(CallbackAnswerMiddleware(pre=True, text="OK"))
```

--------------------------------

TITLE: Return AnswerCallbackQuery from Webhook Handler
DESCRIPTION: This example illustrates how to return an AnswerCallbackQuery object directly from a webhook handler function. This is a concise way to send a response when handling incoming updates via webhooks.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_callback_query.rst#_snippet_2

LANGUAGE: python
CODE:
```
return AnswerCallbackQuery(...)
```

--------------------------------

TITLE: Get Updates as Aiogram GetUpdates Object
DESCRIPTION: Shows how to use the GetUpdates class from aiogram.methods.get_updates to fetch updates. This involves creating an instance of GetUpdates and passing it to the bot object. Imports for GetUpdates are also provided.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_updates.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_updates import GetUpdates
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetUpdates
```

LANGUAGE: python
CODE:
```
result: list[Update] = await bot(GetUpdates(...))
```

--------------------------------

TITLE: AnswerWebAppQuery as a Method Object
DESCRIPTION: Shows how to use `AnswerWebAppQuery` as a method object, often used when calling methods directly on a bot instance. Requires importing the `AnswerWebAppQuery` class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_web_app_query.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.answer_web_app_query import AnswerWebAppQuery
result: SentWebAppMessage = await bot(AnswerWebAppQuery(...))
```

--------------------------------

TITLE: Get handler flags from filters (Python)
DESCRIPTION: Enables retrieval of handler flags directly from filters. This provides a mechanism to access filter-specific information within handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_169

LANGUAGE: python
CODE:
```
from aiogram import Dispatcher, Bot
from aiogram.filters import StateFilter

# Assume dp is a Dispatcher instance and bot is a Bot instance
# dp = Dispatcher(bot)

# Example of a handler that might access filter flags
# @dp.message(StateFilter('some_state'))
# async def process_state_message(message: types.Message, state: FSMContext):
#     # Accessing handler flags might involve inspecting the event or handler context
#     # This is a conceptual example as direct access to filter flags isn't a standard API feature shown here.
#     pass
```

--------------------------------

TITLE: Migrate MongoStorage to PyMongo (Python)
DESCRIPTION: Updates MongoStorage to utilize the new async PyMongo driver instead of the deprecated 'motor' package. Users should install 'PyMongo' and switch to 'PyMongoStorage'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_7

LANGUAGE: Python
CODE:
```
# Before:
# from aiogram.contrib.fsm_storage.mongo import MongoStorage

# After:
from aiogram.contrib.fsm_storage.memory import MemoryStorage # Example of importing a different storage if not using Mongo
from aiogram.fsm.storage.redis import RedisStorage # Example of importing another storage

# If you intend to use the new PyMongoStorage, ensure you have installed PyMongo:
# pip install PyMongo

# from aiogram.contrib.fsm_storage.mongodb import PyMongoStorage

# Example usage (conceptual):
# storage = PyMongoStorage(connection_string="mongodb://localhost:27017/", db_name="my_db")
# dp = Dispatcher(bot, storage=storage)
```

--------------------------------

TITLE: Scene Handler with CallbackQuery Enter Marker
DESCRIPTION: Illustrates using the `@on.callback_query.enter()` marker to define a scene's entry point triggered by a callback query, often used for inline button interactions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_9

LANGUAGE: python
CODE:
```
from aiogram.fsm.scene import Scene, on
from aiogram import types

class MyScene(Scene, name="my_scene"):
    @on.callback_query.enter()
    async def on_enter(self, callback_query: types.CallbackQuery):
        await callback_query.message.answer("Welcome to MyScene via callback!")

```

--------------------------------

TITLE: Get User Chat Boosts as Method Object (Python)
DESCRIPTION: This snippet illustrates how to use GetUserChatBoosts as a method object, which can be passed to the bot for execution. It includes import statements for the method and shows the usage pattern.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_user_chat_boosts.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_user_chat_boosts import GetUserChatBoosts

result: UserChatBoosts = await bot(GetUserChatBoosts(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetUserChatBoosts

result: UserChatBoosts = await bot(GetUserChatBoosts(...))
```

--------------------------------

TITLE: Get Bot Info as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the get_me method directly on a bot object to retrieve information about the current bot. It requires an active bot instance.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_me.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: User = await bot.get_me(...)
```

--------------------------------

TITLE: Get My Star Balance as Bot Method
DESCRIPTION: This snippet demonstrates how to call the get_my_star_balance method directly on the bot object to retrieve the bot's star balance. It returns a StarAmount object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_star_balance.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: StarAmount = await bot.get_my_star_balance(...)
```

--------------------------------

TITLE: Middleware to Handle Chat Action Flag (Python)
DESCRIPTION: An example middleware that checks for a 'typing' flag in the handler's data and uses `ChatActionSender` to send a typing indicator if the flag is present.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#_snippet_4

LANGUAGE: python
CODE:
```
from aiogram.dispatcher.flags import get_flag
from aiogram.utils.chat_action import ChatActionSender

async def my_middleware(handler, event, data):
    typing = get_flag(data, "typing")  # Check that handler marked with `typing` flag
    if not typing:
        return await handler(event, data)

    async with ChatActionSender.typing(chat_id=event.chat.id):
        return await handler(event, data)
```

--------------------------------

TITLE: Initialize and Send Message with AJAX
DESCRIPTION: Initializes the Telegram Web App, retrieves init data, and sends a message using an AJAX POST request. It handles success and error responses, updating the UI accordingly. Dependencies include jQuery.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/examples/web_app/demo.html#_snippet_4

LANGUAGE: javascript
CODE:
```
Telegram.WebApp.ready();
var initData = Telegram.WebApp.initData || '';
var initDataUnsafe = Telegram.WebApp.initDataUnsafe || {};

function sendMessage(msg_id, with_webview) {
    if (!initDataUnsafe.query_id) {
        alert('WebViewQueryId not defined');
        return;
    }
    $('button').prop('disabled', true);
    $('#btn_status').text('Sending...').removeClass('ok err').show();
    $.ajax('/demo/sendMessage', {
        type: 'POST',
        data: {
            _auth: initData,
            msg_id: msg_id || '',
            with_webview: !initDataUnsafe.receiver && with_webview ? 1 : 0
        },
        dataType: 'json',
        success: function (result) {
            $('button').prop('disabled', false);
            if (result.response) {
                if (result.response.ok) {
                    $('#btn_status').html('Message sent successfully!').addClass('ok').show();
                } else {
                    $('#btn_status').text(result.response.description).addClass('err').show();
                    alert(result.response.description);
                }
            } else {
                $('#btn_status').text('Unknown error').addClass('err').show();
                alert('Unknown error');
            }
        },
        error: function (xhr) {
            $('button').prop('disabled', false);
            $('#btn_status').text('Server error').addClass('err').show();
            alert('Server error');
        }
    });
}
```

--------------------------------

TITLE: Get Chat Administrators as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the get_chat_administrators method directly on the bot object to retrieve a list of chat administrators.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_administrators.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: list[ResultChatMemberUnion] = await bot.get_chat_administrators(...)
```

--------------------------------

TITLE: Set Bot Description as Method Object
DESCRIPTION: This snippet shows how to instantiate and use `SetMyDescription` as a method object, which can then be called with a bot instance. It requires importing `SetMyDescription` from `aiogram.methods`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_description.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_my_description import SetMyDescription

result: bool = await bot(SetMyDescription(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetMyDescription

result: bool = await bot(SetMyDescription(...))
```

--------------------------------

TITLE: AiohttpSession with Proxy Authorization
DESCRIPTION: Illustrates how to set up proxy authorization using either the BasicAuth class from aiohttp or by embedding credentials directly in the proxy URL.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/aiohttp.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiohttp import BasicAuth
from aiogram.client.session.aiohttp import AiohttpSession

auth = BasicAuth(login="user", password="password")
session = AiohttpSession(proxy=("protocol://host:port", auth))
```

LANGUAGE: python
CODE:
```
session = AioiohttpSession(proxy="protocol://user:password@host:port")
```

--------------------------------

TITLE: Get Business Account Star Balance (Method Object) - Python
DESCRIPTION: This snippet shows how to use GetBusinessAccountStarBalance as a method object with a specific bot instance in aiogram. It requires importing the method class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_account_star_balance.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_business_account_star_balance import GetBusinessAccountStarBalance
result: StarAmount = await bot(GetBusinessAccountStarBalance(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetBusinessAccountStarBalance
result: StarAmount = await bot(GetBusinessAccountStarBalance(...))
```

--------------------------------

TITLE: Instantiating and using AnswerShippingQuery as an object
DESCRIPTION: This section shows how to import and use `AnswerShippingQuery` as a standalone object. It can be called directly with the bot instance or returned from a handler, often used when responding to webhooks.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_shipping_query.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.answer_shipping_query import AnswerShippingQuery
# or
from aiogram.methods import AnswerShippingQuery

result: bool = await bot(AnswerShippingQuery(...))

# or
return AnswerShippingQuery(...)
```

--------------------------------

TITLE: RedisStorage Initialization from URL - aiogram
DESCRIPTION: Initializes the RedisStorage for storing FSM states using Redis from a Redis URL. This method provides a convenient way to connect to a Redis instance. Requires the 'redis' library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.fsm.storage.redis import RedisStorage

storage = RedisStorage.from_url("redis://localhost:6379/")
```

--------------------------------

TITLE: Get Game High Scores as Bot Method (Python)
DESCRIPTION: This snippet shows how to call the get_game_high_scores method directly using the bot object. It returns a list of GameHighScore objects.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_game_high_scores.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: list[GameHighScore] = await bot.get_game_high_scores(...)
```

--------------------------------

TITLE: Use GiftPremiumSubscription as a Method Object
DESCRIPTION: Demonstrates instantiating and using GiftPremiumSubscription as a method object with a bot. It includes the necessary import statements for the class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/gift_premium_subscription.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.gift_premium_subscription import GiftPremiumSubscription

result: bool = await bot(GiftPremiumSubscription(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GiftPremiumSubscription

result: bool = await bot(GiftPremiumSubscription(...))
```

--------------------------------

TITLE: Add video_start_timestamp to CopyMessage method
DESCRIPTION: Allows modification of the start timestamp for copied videos via the `CopyMessage` method. This feature helps maintain or adjust the playback initiation point for copied video messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_70

LANGUAGE: python
CODE:
```
from aiogram.methods.copy_message import CopyMessage

# Example usage (assuming bot instance exists)
# await bot(CopyMessage(chat_id=target_chat_id, from_chat_id=source_chat_id, message_id=message_id, video_start_timestamp=2500))
```

--------------------------------

TITLE: Get Business Connection as Method Object
DESCRIPTION: This snippet shows how to use the GetBusinessConnection method as a distinct object in aiogram. It involves importing the method and then calling it via the bot instance. This approach is useful for more explicit method calls.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_connection.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_business_connection import GetBusinessConnection
result: BusinessConnection = await bot(GetBusinessConnection(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetBusinessConnection
result: BusinessConnection = await bot(GetBusinessConnection(...))
```

--------------------------------

TITLE: Get File Path using File ID
DESCRIPTION: Retrieves the file_path from Telegram's servers using the file_id. This path is necessary for downloading the actual file content.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#_snippet_1

LANGUAGE: python
CODE:
```
file = await bot.get_file(file_id)
file_path = file.file_path
```

--------------------------------

TITLE: Send Message with Entities and No Parse Mode
DESCRIPTION: An example of sending a message with specific entities (like bold text) while ensuring no default parse mode is applied by setting `parse_mode=None`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/defaults.rst#_snippet_3

LANGUAGE: python
CODE:
```
await bot.send_message(
    chat_id=chat_id,
    text=text,
    entities=[MessageEntity(type='bold', offset=0, length=4)],
    parse_mode=None
)
```

--------------------------------

TITLE: Set Business Account Name as an Object (Python)
DESCRIPTION: This example shows how to instantiate and use the SetBusinessAccountName object with a bot instance. It requires importing the SetBusinessAccountName class from aiogram.methods. The method is called by passing the instantiated object to the bot. The return type is a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_name.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods import SetBusinessAccountName

result: bool = await bot(SetBusinessAccountName(...))
```

--------------------------------

TITLE: Deep Linking Utility
DESCRIPTION: Addition of a new utility function for creating 'startapp' deep links.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_62

LANGUAGE: APIDOC
CODE:
```
## Deep Linking Utility

### Description
Introduces a new utility function to facilitate the creation of 'startapp' deep links.

### New Function:
- `aiogram.utils.deep_linking.create_startapp_link`: Creates 'startapp' deep links.

### References:
- [Telegram API: Main Mini App Links](https://core.telegram.org/api/links#main-mini-app-links)
- [Telegram API: Direct Mini App Links](https://core.telegram.org/api/links#direct-mini-app-links)
```

--------------------------------

TITLE: Skipping pending updates (aiogram 3.0)
DESCRIPTION: To skip pending updates in aiogram 3.0, call the `DeleteWebhook` method directly instead of passing `skip_updates=True` to the start polling method.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_4

LANGUAGE: python
CODE:
```
await bot.delete_webhook()
```

--------------------------------

TITLE: Send Photo as Method Object (aiogram)
DESCRIPTION: Shows how to instantiate and use the SendPhoto method directly. This approach is useful for more complex scenarios or when working with specific bot instances.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_photo.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_photo import SendPhoto
result: Message = await bot(SendPhoto(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendPhoto
result: Message = await bot(SendPhoto(...))
```

--------------------------------

TITLE: Using AnswerShippingQuery as a bot method
DESCRIPTION: This snippet demonstrates how to use the `AnswerShippingQuery` method directly with a bot object to respond to a shipping query. It requires an instance of the bot and the necessary arguments for the query.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_shipping_query.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.answer_shipping_query(...)
```

--------------------------------

TITLE: Usage as Bot Method
DESCRIPTION: Demonstrates how to use the answer_pre_checkout_query method directly with a bot instance. This is a common way to send responses to pre-checkout queries from your bot.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_pre_checkout_query.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.answer_pre_checkout_query(...)
```

--------------------------------

TITLE: Get Telegram Star Transactions with aiogram
DESCRIPTION: Enables retrieval of all Telegram Star transactions for a bot using the GetStarTransactions method. This involves several data classes for transaction details and partners.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_137

LANGUAGE: python
CODE:
```
from aiogram.methods.get_star_transactions import GetStarTransactions
from aiogram.types.star_transactions import StarTransactions
from aiogram.types.star_transaction import StarTransaction
from aiogram.types.transaction_partner import TransactionPartner
from aiogram.types.revenue_withdrawal_state import RevenueWithdrawalState
```

--------------------------------

TITLE: Using Socks5 Proxy with aiohttp_socks in aiogram
DESCRIPTION: This snippet illustrates how to configure aiogram to use a Socks5 proxy, leveraging the `aiohttp_socks` library. This is crucial for users who need to route their Telegram bot's traffic through a proxy server for network or security reasons. It requires manual installation of the `aiohttp_socks` library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_86

LANGUAGE: python
CODE:
```
from aiogram import Bot
from aiohttp_socks import ProxyConnector

# Example of setting up a proxy connector
# proxy_url = "socks5://user:password@host:port"
# connector = ProxyConnector.from_url(proxy_url)
# bot = Bot(token='YOUR_BOT_TOKEN', connector=connector)

```

--------------------------------

TITLE: Get Sticker Set as Bot Method (Python)
DESCRIPTION: Demonstrates how to retrieve a sticker set by directly calling the `get_sticker_set` method on the bot object. This is a common way to interact with Telegram Bot API methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_sticker_set.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: StickerSet = await bot.get_sticker_set(...)
```

--------------------------------

TITLE: CommandStart filter for deep-linking
DESCRIPTION: Introduces a CommandStart filter that supports deep-linking parameters. This allows bots to handle incoming commands with specific arguments passed via deep links.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_72

LANGUAGE: python
CODE:
```
from aiogram.filters import CommandStart
```

--------------------------------

TITLE: Get Business Account Star Balance (Bot Method) - Python
DESCRIPTION: This snippet demonstrates how to retrieve the star balance of a business account using the bot method in aiogram. It returns a StarAmount object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_business_account_star_balance.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: StarAmount = await bot.get_business_account_star_balance(...)
```

--------------------------------

TITLE: Added PreparedInlineMessage and SavePreparedInlineMessage
DESCRIPTION: The library now includes the `PreparedInlineMessage` class and the `SavePreparedInlineMessage` method. These allow bots to suggest specific messages for users to send from a Mini App, enhancing the user experience for sharing content.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_91

LANGUAGE: python
CODE:
```
from aiogram.types import PreparedInlineMessage
from aiogram.methods import SavePreparedInlineMessage

# Example usage for saving a prepared message
prepared_message = PreparedInlineMessage(message_text='Check this out!')
save_method = SavePreparedInlineMessage(message=prepared_message)

# This can then be used with ShareMessage.
```

--------------------------------

TITLE: Customize Chat Action Type via Flags
DESCRIPTION: Illustrates how to change the chat action type for a specific handler using the `@flags.chat_action` decorator. This example sets the action to 'sticker'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/chat_action.rst#_snippet_2

LANGUAGE: python
CODE:
```
@router.message(...)
@flags.chat_action("sticker")
async def my_handler(message: Message): ...
```

--------------------------------

TITLE: Run Tests with Redis/MongoDB (Bash)
DESCRIPTION: Runs aiogram tests with specified Redis and MongoDB connection strings for storage testing.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_10

LANGUAGE: bash
CODE:
```
pytest --redis redis://<host>:<port>/<db> --mongo mongodb://<user>:<password>@<host>:<port> tests
```

--------------------------------

TITLE: Revoke Chat Invite Link as Object Method
DESCRIPTION: This example demonstrates calling revoke_chat_invite_link as a method object, imported from aiogram.methods. It can be used with a specific bot instance and expects a ChatInviteLink object as a return type.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/revoke_chat_invite_link.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods import RevokeChatInviteLink

result: ChatInviteLink = await bot(RevokeChatInviteLink(...))
```

--------------------------------

TITLE: Get Chat Member Count as Method Object (Python)
DESCRIPTION: This snippet demonstrates using GetChatMemberCount as a method object, which can be passed to the bot instance. It requires importing the GetChatMemberCount class from aiogram.methods.get_chat_member_count or aiogram.methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_member_count.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_chat_member_count import GetChatMemberCount

result: int = await bot(GetChatMemberCount(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetChatMemberCount

result: int = await bot(GetChatMemberCount(...))
```

--------------------------------

TITLE: Customize Sender Configuration via Flags
DESCRIPTION: Demonstrates how to customize the sender configuration, including `initial_sleep`, `action`, and `interval`, for a particular handler using the `@flags.chat_action` decorator. This example sets initial sleep to 2 seconds, action to 'upload_document', and interval to 3 seconds.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/chat_action.rst#_snippet_3

LANGUAGE: python
CODE:
```
@router.message(...)
@flags.chat_action(initial_sleep=2, action="upload_document", interval=3)
async def my_handler(message: Message): ...
```

--------------------------------

TITLE: Send Paid Media as Bot Method Object (aiogram)
DESCRIPTION: Illustrates sending paid media by instantiating the SendPaidMedia method as an object and passing it to the bot. This approach requires importing the SendPaidMedia class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_paid_media.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_paid_media import SendPaidMedia

result: Message = await bot(SendPaidMedia(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendPaidMedia

result: Message = await bot(SendPaidMedia(...))
```

--------------------------------

TITLE: Quiz Scene Exit Handler
DESCRIPTION: This Python code snippet defines a handler for exiting the quiz game, allowing users to leave the quiz flow. It's part of the quiz_scene.py example.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_4

LANGUAGE: python
CODE:
```
class QuizScene(Scene, name="quiz"):
    ...
    @on.exit()
    async def exit(self, message: types.Message):
        await message.answer("You have exited the quiz.")
    ...

```

--------------------------------

TITLE: Get Custom Emoji Stickers - Method Object Usage (Python)
DESCRIPTION: This snippet illustrates using GetCustomEmojiStickers by creating an instance of the method object and passing it to the bot. This approach requires importing the GetCustomEmojiStickers class. The output is a list of Sticker objects.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_custom_emoji_stickers.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_custom_emoji_stickers import GetCustomEmojiStickers
result: list[Sticker] = await bot(GetCustomEmojiStickers(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetCustomEmojiStickers
result: list[Sticker] = await bot(GetCustomEmojiStickers(...))
```

--------------------------------

TITLE: Basic Text Formatting with Bold
DESCRIPTION: Demonstrates creating a formatted text string with bold elements using the Text and Bold classes from aiogram.utils.formatting. This approach simplifies message construction by managing entities internally, avoiding manual HTML or Markdown tag handling.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/formatting.rst#_snippet_0

LANGUAGE: python
CODE:
```
content = Text("Hello, ", Bold(message.from_user.full_name), "!")
await message.answer(**content.as_kwargs())
```

--------------------------------

TITLE: Add Sticker to Set as Object (aiogram)
DESCRIPTION: Shows how to use the `AddStickerToSet` method as an object, which can be passed to a bot instance for execution. This approach involves importing the method and instantiating it with necessary parameters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/add_sticker_to_set.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.add_sticker_to_set import AddStickerToSet
result: bool = await bot(AddStickerToSet(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import AddStickerToSet
result: bool = await bot(AddStickerToSet(...))
```

--------------------------------

TITLE: Get Bot Name as Method Object
DESCRIPTION: Shows how to use the GetMyName method as a standalone object, which can then be passed to the bot instance. This approach requires importing the GetMyName class. The returned object is of type BotName.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_name.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_my_name import GetMyName

result: BotName = await bot(GetMyName(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetMyName

result: BotName = await bot(GetMyName(...))
```

--------------------------------

TITLE: Advanced CallbackData with Enums and Filters
DESCRIPTION: Provides an example of using Python Enums with CallbackData for actions and demonstrates filtering callback queries based on enum values, such as filtering for a 'ban' action.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#_snippet_3

LANGUAGE: python
CODE:
```
from aiogram.filters.callback_data import CallbackData
from aiogram import F
from aiogram.types import CallbackQuery, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from enum import Enum

class Action(str, Enum):
    ban = "ban"
    kick = "kick"
    warn = "warn"

class AdminAction(CallbackData, prefix="adm"):
    action: Action
    chat_id: int
    user_id: int

# ... (Inside handler)
# builder = InlineKeyboardBuilder()
# for action in Action:
#     builder.button(
#         text=action.value.title(),
#         callback_data=AdminAction(action=action, chat_id=chat_id, user_id=user_id),
#     )
# await bot.send_message(...)

# @router.callback_query(AdminAction.filter(F.action == Action.ban))
# async def ban_user(query: CallbackQuery, callback_data: AdminAction, bot: Bot):
#     await bot.ban_chat_member(
#         chat_id=callback_data.chat_id,
#         user_id=callback_data.user_id,
#         ...
#     )
```

--------------------------------

TITLE: MongoStorage Initialization from URL - aiogram
DESCRIPTION: Initializes the MongoStorage for storing FSM states using MongoDB from a MongoDB URL. This method provides a convenient way to connect to a MongoDB instance. Requires the 'motor' library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#_snippet_5

LANGUAGE: python
CODE:
```
from aiogram.fsm.storage.mongo import MongoStorage

storage = MongoStorage.from_url("mongodb://localhost:27017/")
```

--------------------------------

TITLE: Get Forum Topic Icon Stickers as Bot Method (Python)
DESCRIPTION: Demonstrates how to call the `get_forum_topic_icon_stickers` method directly on a bot instance. This method is used to retrieve a list of stickers associated with a forum topic. It requires a bot object and returns a list of Sticker objects.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_forum_topic_icon_stickers.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: list[Sticker] = await bot.get_forum_topic_icon_stickers(...)
```

--------------------------------

TITLE: Create Chat Subscription Invite Link (Method Object)
DESCRIPTION: Shows how to use CreateChatSubscriptionInviteLink as a method object, typically within a handler or when interacting with a specific bot instance. It requires importing the method class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_subscription_invite_link.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.create_chat_subscription_invite_link import CreateChatSubscriptionInviteLink
result: ChatInviteLink = await bot(CreateChatSubscriptionInviteLink(...))
```

--------------------------------

TITLE: Magic Filter: String startswith/endswith checks
DESCRIPTION: Shows how to check if a string attribute starts or ends with a specific prefix or suffix using `startswith` and `endswith` methods. Applicable only to string attributes.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#_snippet_4

LANGUAGE: python
CODE:
```
F.text.startswith('foo')  # lambda message: message.text.startswith('foo')
F.text.endswith('bar')  # lambda message: message.text.startswith('bar')
```

--------------------------------

TITLE: Launch Web Apps via t.me Links with aiogram
DESCRIPTION: Supports launching Web Apps through t.me links by utilizing the MenuButtonWebApp class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_140

LANGUAGE: python
CODE:
```
from aiogram.types.menu_button_web_app import MenuButtonWebApp
```

--------------------------------

TITLE: Get Bot's Default Administrator Rights (aiogram)
DESCRIPTION: Demonstrates how to retrieve a bot's default administrator rights using the aiogram library. This can be done either by calling the method directly on the bot object or by instantiating the method as an object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_default_administrator_rights.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: ChatAdministratorRights = await bot.get_my_default_administrator_rights(...)
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetMyDefaultAdministratorRights

result: ChatAdministratorRights = await bot(GetMyDefaultAdministratorRights(...))
```

--------------------------------

TITLE: Handle media groups with aiogram
DESCRIPTION: Provides an example for sending media groups, a feature that allows multiple media items (photos, videos) to be sent in a single message. This improves the user experience for sharing collections of media.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_117

LANGUAGE: python
CODE:
```
# Example for media group functionality (refer to external link for full code)
# from aiogram.types import MediaGroup
# 
# async def send_media_group_example(message):
#     media = MediaGroup()
#     media.attach_photo(open('path/to/photo1.jpg', 'rb'))
#     media.attach_photo(open('path/to/photo2.jpg', 'rb'))
#     await message.reply_media_group(media)
```

--------------------------------

TITLE: Get Chat Info as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the get_chat method directly on the bot object to retrieve chat information. It requires an initialized aiogram bot instance and chat identifier.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: ChatFullInfo = await bot.get_chat(...)
```

--------------------------------

TITLE: Upgrade Gift as Bot Object Method
DESCRIPTION: Shows how to instantiate and use the `UpgradeGift` method as an object, typically passed to a bot instance. Includes import statements for clarity.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upgrade_gift.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.upgrade_gift import UpgradeGift
from aiogram.methods import UpgradeGift

result: bool = await bot(UpgradeGift(...))
```

--------------------------------

TITLE: Get User Chat Boosts as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to call the getUserChatBoosts method directly on the bot object to retrieve user chat boosts. It shows the expected return type as UserChatBoosts.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_user_chat_boosts.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: UserChatBoosts = await bot.get_user_chat_boosts(...)
```

--------------------------------

TITLE: Instantiate and Use VerifyUser Object
DESCRIPTION: Shows how to import and use the VerifyUser method as a distinct object. This approach is useful when you need to pass the method call as an argument or manage it independently.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_user.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.verify_user import VerifyUser

result: bool = await bot(VerifyUser(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import VerifyUser

result: bool = await bot(VerifyUser(...))
```

--------------------------------

TITLE: Create Encoded Telegram Bot Start Link (Python)
DESCRIPTION: Creates a deep linking URL for a Telegram bot with an encoded payload. This is useful for passing sensitive information or longer parameters securely. The `encode=True` argument in `create_start_link` handles the encoding.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/deep_linking.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.utils.deep_linking import create_start_link

link = await create_start_link(bot, 'foo', encode=True)
```

--------------------------------

TITLE: AnswerWebAppQuery as Bot Method
DESCRIPTION: Demonstrates how to use the `answerWebAppQuery` method as a bot method. This is a common pattern for interacting with the Telegram Bot API through the aiogram library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_web_app_query.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: SentWebAppMessage = await bot.answer_web_app_query(...)
```

--------------------------------

TITLE: Initialize Dispatcher and Define Message Handler
DESCRIPTION: Demonstrates the basic initialization of a Dispatcher and setting up a message handler using a decorator. This handler is triggered by incoming messages and echoes the received text back to the sender.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dispatcher.rst#_snippet_0

LANGUAGE: python
CODE:
```
dp = Dispatcher()

@dp.message()
async def message_handler(message: types.Message) -> None:
    await SendMessage(chat_id=message.from_user.id, text=message.text)
```

--------------------------------

TITLE: Python Echo Bot using Long-Polling with aiogram
DESCRIPTION: This example demonstrates a basic echo bot using aiogram's long-polling mechanism. It requires the `aiogram` library and is suitable for development and testing purposes. The bot listens for incoming messages and replies with the same content.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/long_polling.rst#_snippet_0

LANGUAGE: python
CODE:
```
import logging

from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = '...'  # Replace with your bot's API token

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler()
async def echo(message: types.Message):
    """An example handler that echoes any incoming message."""
    await message.answer(message.text)

if __name__ == '__main__':
    # Start polling
    executor.start_polling(dp, skip_updates=True)

```

--------------------------------

TITLE: Set Bot Commands (aiogram)
DESCRIPTION: Demonstrates setting bot commands using the SetMyCommands method in aiogram. This snippet shows the method used directly with a bot instance.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_commands.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_my_commands(...)
```

--------------------------------

TITLE: Send Game as Method Object (Python)
DESCRIPTION: Shows how to instantiate and use `SendGame` as a method object. This approach requires importing the `SendGame` class and can be used with a specific bot instance.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_game.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_game import SendGame
result: Message = await bot(SendGame(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendGame
result: Message = await bot(SendGame(...))
```

--------------------------------

TITLE: Ban Chat Sender Chat as Webhook Reply
DESCRIPTION: This example illustrates how to return the BanChatSenderChat method as a response when handling a webhook. This is typically used in frameworks that expect a return value to represent the bot's action.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_sender_chat.rst#_snippet_2

LANGUAGE: python
CODE:
```
return BanChatSenderChat(...)
```

--------------------------------

TITLE: Get Updates as Bot Method in Aiogram
DESCRIPTION: Demonstrates how to call the getUpdates method directly on the bot object to retrieve a list of updates. This is a common way to interact with the Telegram API for bot updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_updates.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: list[Update] = await bot.get_updates(...)
```

--------------------------------

TITLE: Override Default Parse Mode for a Specific Request
DESCRIPTION: Shows how to override the globally set default parse mode for a single `send_message` request. In this example, MarkdownV2 is used instead of the default HTML.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/defaults.rst#_snippet_1

LANGUAGE: python
CODE:
```
await bot.send_message(chat_id, text, parse_mode=ParseMode.MARKDOWN_V2)
```

--------------------------------

TITLE: Injecting Dependencies via Webhook Handler (Python)
DESCRIPTION: Shows how to inject custom dependencies when setting up the SimpleRequestHandler for aiogram webhooks. This is analogous to injecting dependencies during polling start, ensuring custom data is available within the webhook processing context.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#_snippet_2

LANGUAGE: python
CODE:
```
async def main() -> None:
    dp = Dispatcher(..., foo=42)
    handler = SimpleRequestHandler(dispatcher=dp, bot=bot, bar="Bazz")
    ... # starting webhook
```

--------------------------------

TITLE: Get Chat Info as Standalone Method Object (Python)
DESCRIPTION: This snippet illustrates using the GetChat method as a standalone object, typically passed to the bot instance. It requires importing the GetChat class and initializing it with chat details.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_chat import GetChat
result: ChatFullInfo = await bot(GetChat(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetChat
result: ChatFullInfo = await bot(GetChat(...))
```

--------------------------------

TITLE: MenuButtonWebApp API
DESCRIPTION: Adds support for launching Web Apps via a t.me link within the MenuButtonWebApp class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_153

LANGUAGE: APIDOC
CODE:
```
## MenuButtonWebApp

### Description
Represents a menu button, which is the most recent post of the MenuButton that was used to open the current chat.
This class now supports launching Web Apps via a t.me link.

### Type
Object

### Fields
- **type** (str) - Type of the button, always "web_app".
- **text** (str) - Text on the button.
- **web_app** (WebAppInfo) - Description of the Web App that will be opened after the user presses the button.

### Example
```json
{
  "type": "web_app",
  "text": "Open My Web App",
  "web_app": {
    "url": "https://my.webapp.com?startapp=t.me/mybot"
  }
}
```
```

--------------------------------

TITLE: KeyBuilder Usage - aiogram
DESCRIPTION: Demonstrates the usage of KeyBuilder for customizing storage keys. Key builders allow for dynamic and structured key generation for different states and users within storages like Redis and Mongo.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#_snippet_6

LANGUAGE: python
CODE:
```
from aiogram.fsm.storage.base import KeyBuilder

key_builder = KeyBuilder()

# Example usage (actual key generation depends on storage implementation)
user_id = 123
state = "some_state"
key = key_builder.build(user_id, state)
```

--------------------------------

TITLE: Get Business Account Gifts in aiogram
DESCRIPTION: Adds `OwnedGiftRegular`, `OwnedGiftUnique`, `OwnedGifts` classes and the `GetBusinessAccountGifts` method to fetch a list of gifts owned by a business account. This facilitates gift management and tracking in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_34

LANGUAGE: Python
CODE:
```
from aiogram.types.owned_gift_regular import OwnedGiftRegular
from aiogram.types.owned_gift_unique import OwnedGiftUnique
from aiogram.types.owned_gifts import OwnedGifts
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts
```

--------------------------------

TITLE: Get Bot Name as Bot Method
DESCRIPTION: Demonstrates how to call the getMyName method directly on a bot instance. This is a common way to interact with bot methods in aiogram. The method expects arguments that are not detailed here but returns a BotName object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_name.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: BotName = await bot.get_my_name(...)
```

--------------------------------

TITLE: Create Sticker Set as Method Object (Python)
DESCRIPTION: Shows how to use the CreateNewStickerSet method as an object, which can be passed to the bot instance. This approach requires importing the method explicitly.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_new_sticker_set.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.create_new_sticker_set import CreateNewStickerSet

result: bool = await bot(CreateNewStickerSet(...))
```

--------------------------------

TITLE: Quiz Scene Data Models and Scene Definition (Python)
DESCRIPTION: Defines the data models for quiz questions and answers, and the 'QuizScene' class, representing a single step or state within a scene. The class name itself denotes the scene name, which aligns with its state. This code is part of a larger example for a quiz bot.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_0

LANGUAGE: python
CODE:
```
from typing import List, Dict, Any


class Question:
    def __init__(self, question_text: str, options: List[str], correct_answer: str):
        self.question_text = question_text
        self.options = options
        self.correct_answer = correct_answer


QUESTIONS: List[Dict[str, Any]] = [
    {
        "question_text": "What is the capital of France?",
        "options": ["Berlin", "Madrid", "Paris", "Rome"],
        "correct_answer": "Paris"
    },
    {
        "question_text": "What is 2 + 2?",
        "options": ["3", "4", "5", "6"],
        "correct_answer": "4"
    },
    {
        "question_text": "What is the largest planet in our Solar System?",
        "options": ["Earth", "Jupiter", "Mars", "Saturn"],
        "correct_answer": "Jupiter"
    }
]


class QuizScene(Wizard):  # type: ignore
    def __init__(self, name: str = 'quiz', **kwargs):
        super().__init__(name, **kwargs)
        self.questions: List[Question] = []
        self.current_question_index: int = 0
        self.user_answers: List[str] = []
        self.score: int = 0

    @Wizard.enter()
    async def on_enter(self):
        self.questions = [Question(**q) for q in QUESTIONS]
        self.current_question_index = 0
        self.user_answers = []
        self.score = 0

        if not self.questions:
            await self.reply("No questions available. Exiting.")
            await self.wizard.exit()
            return

        await self.send_question()

    async def send_question(self):
        question = self.questions[self.current_question_index]
        text = f"Question {self.current_question_index + 1}: {question.question_text}\nOptions: {', '.join(question.options)}"
        await self.reply(text)

    @Wizard.again()
    @Wizard.transition()
    async def answer(self, message: Message):
        if not self.questions:
            return

        correct_answer = self.questions[self.current_question_index].correct_answer
        user_answer = message.text
        self.user_answers.append(user_answer)

        if user_answer == correct_answer:
            self.score += 1

        self.current_question_index += 1

        if self.current_question_index < len(self.questions):
            await self.send_question()
        else:
            await self.show_results()

    async def show_results(self):
        results_text = f"Quiz finished! Your score: {self.score} out of {len(self.questions)}\n"
        for i, (question, answer) in enumerate(zip(self.questions, self.user_answers)):
            results_text += f"\n{i+1}. {question.question_text}\nYour answer: {answer}\nCorrect answer: {question.correct_answer}\n"

        await self.reply(results_text)
        await self.wizard.exit()

    @Wizard.error()
    async def unknown_message(self, message: Message):
        await self.reply("Please provide a valid answer from the options.")

```

--------------------------------

TITLE: Promote Chat Member as Method Object (Python)
DESCRIPTION: This snippet shows how to instantiate the PromoteChatMember method as an object and then call it using a bot instance. This approach is useful for more complex scenarios or when managing methods as objects.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/promote_chat_member.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.promote_chat_member import PromoteChatMember
result: bool = await bot(PromoteChatMember(...))
```

--------------------------------

TITLE: Get Bot Commands as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the get_my_commands method directly on the bot object to retrieve a list of BotCommand objects. It's a straightforward way to interact with the Telegram Bot API's command functionality.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_my_commands.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: list[BotCommand] = await bot.get_my_commands(...)
```

--------------------------------

TITLE: Create 'startapp' Deep Links
DESCRIPTION: Adds the 'create_startapp_link' function to the deep-linking module. This utility helps in generating 'startapp' deep links for applications.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_52

LANGUAGE: python
CODE:
```
- Added new method :func:`aiogram.utils.deep_linking.create_startapp_link` to deep-linking module
  for creating "startapp" deep links.
```

--------------------------------

TITLE: Edit or Delete Reply Markup using Message Shortcut
DESCRIPTION: Provides examples of using shortcut methods directly on a `Message` object to edit or delete its reply markup. These methods simplify the process of modifying existing messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_reply_markup.rst#_snippet_3

LANGUAGE: python
CODE:
```
# Editing reply markup
await message.edit_reply_markup(...)

# Deleting reply markup
await message.delete_reply_markup()
```

--------------------------------

TITLE: Get Chat Member as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the get_chat_member method directly on the bot object to retrieve chat member information. It expects a ResultChatMemberUnion as a return type.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_member.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: ResultChatMemberUnion = await bot.get_chat_member(...)
```

--------------------------------

TITLE: Inverting a filter result
DESCRIPTION: This Python example demonstrates how to invert the result of an aiogram filter, such as `IsAdmin()`, to check for the opposite condition. The `~` operator negates the filter's outcome, allowing handlers to be triggered when a user is *not* an admin.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/index.rst#_snippet_3

LANGUAGE: python
CODE:
```
@router.message(~IsAdmin())
```

--------------------------------

TITLE: Upload file from file system using FSInputFile
DESCRIPTION: Demonstrates how to upload a file from the local file system using aiogram's FSInputFile. This involves importing the class and then creating an instance with the file path, optionally specifying a custom filename.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/upload_file.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.types import FSInputFile

cat = FSInputFile("cat.png")
agenda = FSInputFile("my-document.pdf", filename="agenda-2019-11-19.pdf")
```

--------------------------------

TITLE: Allow State instances in FSM storage and get i18n locale without User
DESCRIPTION: This update allows the direct use of State instances in FSM storage and enables retrieval of the i18n locale without requiring a User instance. These changes enhance flexibility in state management and internationalization.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_8

LANGUAGE: python
CODE:
```
- Allowed to use State instances FSM storage directly (`#542 <https://github.com/aiogram/aiogram/issues/542>`_)
- Added possibility to get i18n locale without User instance (`#546 <https://github.com/aiogram/aiogram/issues/546>`_)
```

--------------------------------

TITLE: Get Custom Emoji Stickers - Bot Method Usage (Python)
DESCRIPTION: This snippet demonstrates how to use the GetCustomEmojiStickers method as a direct method of the bot object. It expects an asynchronous call and returns a list of Sticker objects. No external dependencies beyond the aiogram library are shown.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_custom_emoji_stickers.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: list[Sticker] = await bot.get_custom_emoji_stickers(...)
```

--------------------------------

TITLE: Unpin All Chat Messages as Method Object (Python)
DESCRIPTION: Shows how to use the UnpinAllChatMessages method as a distinct object, which can be passed to the bot instance. This approach allows for more explicit control and is useful when constructing commands programmatically. It includes examples of different import methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_chat_messages.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.unpin_all_chat_messages import UnpinAllChatMessages

result: bool = await bot(UnpinAllChatMessages(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import UnpinAllChatMessages

result: bool = await bot(UnpinAllChatMessages(...))
```

--------------------------------

TITLE: Get Chat Member Count as Bot Method (Python)
DESCRIPTION: This snippet shows how to use the getChatMemberCount method directly as a bot method. It requires an active bot instance and returns an integer representing the chat member count.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_member_count.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: int = await bot.get_chat_member_count(...)
```

--------------------------------

TITLE: Get Chat Member as Method Object (Python)
DESCRIPTION: This snippet shows how to use GetChatMember as a method object, imported from aiogram.methods. This allows for calling the method with a specific bot instance. It also returns a ResultChatMemberUnion.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_chat_member.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_chat_member import GetChatMember

result: ResultChatMemberUnion = await bot(GetChatMember(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetChatMember

result: ResultChatMemberUnion = await bot(GetChatMember(...))
```

--------------------------------

TITLE: Use MagicFilter `as_` for handler arguments in Python
DESCRIPTION: Demonstrates how to use the `as_` operation of MagicFilter to capture filter results as handler arguments. This allows for cleaner and more explicit data handling within message handlers. It shows examples for capturing regex matches and the last photo in a message.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_214

LANGUAGE: python
CODE:
```
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Match
from aiogram.Bot import Bot

... (router and other imports)

@router.message(F.text.regexp(r"^(\d+)$").as_("digits"))
async def any_digits_handler(message: Message, digits: Match[str]):
    await message.answer(html.quote(str(digits)))


@router.message(F.photo[-1].as_("photo"))
async def download_photos_handler(message: Message, photo: PhotoSize, bot: Bot):
    content = await bot.download(photo)
```

--------------------------------

TITLE: Create and Use a Router in Aiogram
DESCRIPTION: Demonstrates how to create a Router instance and define a message handler using decorators. This is a fundamental way to organize bot logic in Aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram import Router
from aiogram.types import Message

my_router = Router(name=__name__)

@my_router.message()
async def message_handler(message: Message) -> Any:
    await message.answer('Hello from my router!')
```

--------------------------------

TITLE: Use createInvoiceLink as a Method Object
DESCRIPTION: Shows how to instantiate and use the CreateInvoiceLink object with a bot instance. This approach allows for more structured request building.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_invoice_link.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.create_invoice_link import CreateInvoiceLink

result: str = await bot(CreateInvoiceLink(...))
```

--------------------------------

TITLE: Get Business Account Star Balance in aiogram
DESCRIPTION: Adds the `GetBusinessAccountStarBalance` method and `StarAmount` class to check a business account's Telegram Star balance. This functionality is crucial for managing in-app currency within aiogram applications.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_32

LANGUAGE: Python
CODE:
```
from aiogram.methods.get_business_account_star_balance import GetBusinessAccountStarBalance
from aiogram.types.star_amount import StarAmount
```

--------------------------------

TITLE: Reply in Webhook Handler
DESCRIPTION: Illustrates how to return an AnswerPreCheckoutQuery object directly from a webhook handler. This is useful when processing updates via webhooks.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_pre_checkout_query.rst#_snippet_2

LANGUAGE: python
CODE:
```
return AnswerPreCheckoutQuery(...)
```

--------------------------------

TITLE: Create Chat Subscription Invite Link (Bot Method)
DESCRIPTION: Demonstrates how to use the create_chat_subscription_invite_link method as a direct bot method. This function is asynchronous and requires a bot instance to be called.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_subscription_invite_link.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: ChatInviteLink = await bot.create_chat_subscription_invite_link(...)
```

--------------------------------

TITLE: Applying Class-based Middleware to Router in Python
DESCRIPTION: Demonstrates how to register an instance of a class-based middleware (CounterMiddleware) to the message event handler of an aiogram router.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/middlewares.rst#_snippet_1

LANGUAGE: python
CODE:
```
router = Router()
router.message.middleware(CounterMiddleware())
```

--------------------------------

TITLE: Fixing Polling Startup with Manual Bot Key in aiogram
DESCRIPTION: Addresses a bug that affected polling startup when the 'bot' key was manually passed into the dispatcher workflow data. This resolves in specific configurations.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_193

LANGUAGE: python
CODE:
```
# Fix ensures that:
# dispatcher.workflow_data['bot'] = bot_instance
# works correctly during polling startup.
```

--------------------------------

TITLE: Create Forum Topic using Bot Method
DESCRIPTION: Demonstrates how to create a forum topic using the bot method directly. This is a common way to interact with the Telegram API through aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_forum_topic.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: ForumTopic = await bot.create_forum_topic(...)
```

--------------------------------

TITLE: Filter event by data from middlewares with MagicData
DESCRIPTION: Demonstrates using the MagicData filter to filter events based on data provided by middlewares or other filters. This example shows how to filter messages based on the user's ID matching an admin ID stored in a 'config' object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_215

LANGUAGE: python
CODE:
```
@router.message(magic_data=F.event.from_user.id == F.config.admin_id)
...
```

--------------------------------

TITLE: Fix critical bug with asyncio event loop in executor
DESCRIPTION: This critical bug fix addresses an `AttributeError` related to getting the asyncio event loop in the executor. It resolves issues where the event loop was not properly available, preventing the loop from running.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_37

LANGUAGE: python
CODE:
```
# Fixed critical bug with getting asyncio event loop in executor. (#424) AttributeError: 'NoneType' object has no attribute 'run_until_complete'
```

--------------------------------

TITLE: Handle 'Yes' Answer for Bot Preference (Python)
DESCRIPTION: Handles the case where the user answers 'yes' to liking bots, storing the data and transitioning to the 'language' state.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_3

LANGUAGE: python
CODE:
```
@dp.message_handler(lambda message: message.text.lower() == 'yes', state=Form.like_bots)
async def process_like_write_bots(message: types.Message):
    await state.update_data(like_bots=message.text)
    await Form.next()
    await message.reply('Perfect, thank you. Which language do you prefer?')

```

--------------------------------

TITLE: Use Bot Context Manager in aiogram
DESCRIPTION: Demonstrates the new context manager interface for the Bot instance in aiogram. Allows for cleaner asynchronous resource management using 'async with Bot(...) as bot:'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_155

LANGUAGE: python
CODE:
```
async with Bot(...) as bot:
    ...

instead of

async with Bot(...).context() as bot:
    ...
```

--------------------------------

TITLE: Instantiate and Use EditUserStarSubscription Object in aiogram
DESCRIPTION: Shows how to import and use the EditUserStarSubscription method as an object. This includes using it directly with a bot instance or returning it from a webhook handler.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_user_star_subscription.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_user_star_subscription import EditUserStarSubscription
```

LANGUAGE: python
CODE:
```
from aiogram.methods import EditUserStarSubscription
```

LANGUAGE: python
CODE:
```
result: bool = await bot(EditUserStarSubscription(...))
```

LANGUAGE: python
CODE:
```
return EditUserStarSubscription(...)
```

--------------------------------

TITLE: Handle Callback Queries from Business Accounts with aiogram
DESCRIPTION: Improved event context resolution for callback queries originating from business accounts and added support for callback buttons in InlineKeyboardMarkup for business messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_142

LANGUAGE: python
CODE:
```
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup

# Support for callback queries from business accounts is handled internally.
# Example for InlineKeyboardMarkup:
# inline_kb = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [
#             InlineKeyboardButton(text='Callback', callback_data='callback_data')
#         ]
#     ]
# )

```

--------------------------------

TITLE: Simple MessageHandler Usage in Python
DESCRIPTION: Demonstrates the basic implementation of a MessageHandler in Python using aiogram. This handler is registered with a router and defines an asynchronous `handle` method to process incoming messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/message.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.handlers import MessageHandler

... 

@router.message()
class MyHandler(MessageHandler):
    async def handle(self) -> Any:
        return SendMessage(chat_id=self.chat.id, text="PASS")
```

--------------------------------

TITLE: Run Tests (Bash)
DESCRIPTION: Executes all tests for the aiogram project using pytest.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_9

LANGUAGE: bash
CODE:
```
pytest tests
```

--------------------------------

TITLE: DefaultKeyBuilder Usage - aiogram
DESCRIPTION: Demonstrates the usage of DefaultKeyBuilder, a concrete implementation of KeyBuilder. This provides a default mechanism for generating storage keys, typically including user ID and state information.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#_snippet_7

LANGUAGE: python
CODE:
```
from aiogram.fsm.storage.base import DefaultKeyBuilder

default_key_builder = DefaultKeyBuilder()

# Example usage (actual key generation depends on storage implementation)
user_id = 123
state = "some_state"
key = default_key_builder.build(user_id, state)
```

--------------------------------

TITLE: AiohttpSession with Proxy Chains
DESCRIPTION: Demonstrates how to configure AiohttpSession to use a chain of proxy servers, leveraging the capabilities of 'aiohttp-socks'. Supports various proxy formats including authentication.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/aiohttp.rst#_snippet_3

LANGUAGE: python
CODE:
```
from aiohttp import BasicAuth
from aiogram.client.session.aiohttp import AiohttpSession

auth = BasicAuth(login="user", password="password")
session = AiohttpSession(
    proxy={
        "protocol0://host0:port0",
        "protocol1://user:password@host1:port1",
        ("protocol2://host2:port2", auth),
    }
)
```

--------------------------------

TITLE: PyMongoStorage Initialization - aiogram
DESCRIPTION: Initializes the PyMongoStorage for storing FSM states using MongoDB. This storage is persistent and suitable for large-scale applications. It requires the 'pymongo' library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#_snippet_3

LANGUAGE: python
CODE:
```
from aiogram.fsm.storage.pymongo import PyMongoStorage

storage = PyMongoStorage(url="mongodb://localhost:27017/")
```

--------------------------------

TITLE: Add possibility to get bot id without calling get_me (Python)
DESCRIPTION: Introduces a way to retrieve the bot's ID without making a `get_me` API call in aiogram version 2.9. This can be useful for initializing components that require the bot's ID early on.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_66

LANGUAGE: python
CODE:
```
from aiogram import Bot

async def initialize_bot_with_id(bot: Bot):
    # Assuming bot.id is now available directly after initialization
    bot_id = bot.id
    print(f"Bot ID: {bot_id}")
```

--------------------------------

TITLE: Send Sticker as aiogram method object
DESCRIPTION: Shows how to use the SendSticker method as an object with a specific bot instance. It requires importing SendSticker from aiogram.methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_sticker.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_sticker import SendSticker

result: Message = await bot(SendSticker(...))
```

--------------------------------

TITLE: Fix CommandStart filter (Python)
DESCRIPTION: Addresses an issue with the `CommandStart` filter in aiogram version 2.5.3. This ensures that the filter correctly identifies and processes the `/start` command.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_60

LANGUAGE: python
CODE:
```
from aiogram.filters import CommandStart

# Example handler registration:
handler.register(message_handler, commands=[CommandStart()])
```

--------------------------------

TITLE: Configure I18n Instance
DESCRIPTION: Shows how to create an instance of the I18n class, specifying the path to locale files, the default language, and the translation domain. This instance is crucial for the bot to detect user languages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_4

LANGUAGE: python
CODE:
```
i18n = I18n(path="locales", default_locale="en", domain="messages")
```

--------------------------------

TITLE: Method as Object Usage
DESCRIPTION: Illustrates using the SavePreparedInlineMessage method as a distinct object. It shows how to import the method and then call it with a bot instance. This approach is useful for organizing method calls.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/save_prepared_inline_message.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.save_prepared_inline_message import SavePreparedInlineMessage
from aiogram.methods import SavePreparedInlineMessage

result: PreparedInlineMessage = await bot(SavePreparedInlineMessage(...))
```

--------------------------------

TITLE: Edit Chat Subscription Invite Link as Bot Method Object (Python)
DESCRIPTION: Shows how to instantiate and use the EditChatSubscriptionInviteLink method as an object, typically called with a bot instance. Imports are required.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_subscription_invite_link.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_chat_subscription_invite_link import EditChatSubscriptionInviteLink

result: ChatInviteLink = await bot(EditChatSubscriptionInviteLink(...))
```

--------------------------------

TITLE: Import BaseHandler from aiogram.handlers
DESCRIPTION: Demonstrates how to import the BaseHandler class from the aiogram.handlers module.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/base.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.handlers import BaseHandler
```

--------------------------------

TITLE: Requesting User Permissions (JavaScript)
DESCRIPTION: Illustrates how to initiate requests for user permissions such as location, video, or audio within a Telegram Web App. These actions are typically triggered by user interaction with specific UI elements.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/examples/web_app/demo.html#_snippet_3

LANGUAGE: javascript
CODE:
```
// Example for requesting location permission
// Telegram.WebApp.requestAccess('location', (error, payload) => { ... });

// Example for requesting video permission
// Telegram.WebApp.requestVideo(callback_function);

// Example for requesting audio permission
// Telegram.WebApp.requestAudio(callback_function);
```

--------------------------------

TITLE: Handle Paid Media Information with aiogram
DESCRIPTION: Introduces classes for PaidMediaPhoto and PaidMediaVideo to hold information about paid media content.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_145

LANGUAGE: python
CODE:
```
from aiogram.types.paid_media_photo import PaidMediaPhoto
from aiogram.types.paid_media_video import PaidMediaVideo
```

--------------------------------

TITLE: Show FSM State Summary (Python)
DESCRIPTION: Retrieves all stored data from the FSM state and displays a summary to the user.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_7

LANGUAGE: python
CODE:
```
@dp.message_handler(commands='summary')
async def show_summary(message: types.Message):
    state = await FSMContext(dp, message.chat.id).get_state()
    if not state:
        await message.reply('No state found')
        return

    await message.reply(str(state))
    await message.reply('All data: ' + str(await FSMContext(dp, message.chat.id).get_data()))

```

--------------------------------

TITLE: Aiogram Shipping Query Handler
DESCRIPTION: Demonstrates how to register a handler for shipping queries in an e-commerce context using @router.shipping_query().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_8

LANGUAGE: python
CODE:
```
@router.shipping_query()
async def shipping_query_handler(shipping_query: types.ShippingQuery) -> Any: pass
```

--------------------------------

TITLE: Create Chat Invite Link as Bot Method
DESCRIPTION: This snippet demonstrates how to use the createChatInviteLink method directly as a bot method. It requires an instance of the bot and the necessary parameters for creating an invite link.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_invite_link.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: ChatInviteLink = await bot.create_chat_invite_link(...)
```

--------------------------------

TITLE: Accessing Bot instance in middlewares (aiogram 3.0)
DESCRIPTION: In aiogram 3.0 middlewares, the bot instance can be accessed via the `data["bot"]` dictionary.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_3

LANGUAGE: python
CODE:
```
async def middleware_example(handler, request):
    bot = request.get('bot')
    # Use bot instance here
```

--------------------------------

TITLE: Send Video Note as Method Object (Python)
DESCRIPTION: Shows how to use SendVideoNote as a method object, allowing for more explicit control. It can be called directly with the bot instance.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video_note.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_video_note import SendVideoNote

result: Message = await bot(SendVideoNote(...))
```

--------------------------------

TITLE: Send Voice using Method Object (Python)
DESCRIPTION: Shows how to instantiate and use the `SendVoice` method object with a specific bot instance. This approach offers more explicit control over the method call.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_voice.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_voice import SendVoice

result: Message = await bot(SendVoice(...))
```

--------------------------------

TITLE: Call bot.answer_callback_query
DESCRIPTION: This snippet demonstrates how to use the answer_callback_query method directly on the bot object. It's a common way to respond to user interactions originating from inline keyboards.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_callback_query.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.answer_callback_query(...)
```

--------------------------------

TITLE: Interacting with Telegram Web App Buttons and Links (JavaScript)
DESCRIPTION: Demonstrates sending messages, opening inline webviews, and handling different types of links (external, deep links, JavaScript calls) within a Telegram Web App. It showcases how to control link behavior.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/examples/web_app/demo.html#_snippet_2

LANGUAGE: javascript
CODE:
```
// Example usage for sending messages
// Telegram.WebApp.sendData('Hello, World!');

// Example for opening an inline webview
// Telegram.WebApp.openTgLink('https://t.me/username');

// Example for handling links that open outside the webview
// window.open('https://telegram.org/');

// Example for handling tg:// links
// tg://resolve?domain=vote
```

--------------------------------

TITLE: Create Virtual Environment (Bash)
DESCRIPTION: Creates a Python virtual environment named .venv in the current directory using the venv module. This isolates project dependencies.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_0

LANGUAGE: bash
CODE:
```
python -m venv .venv
```

--------------------------------

TITLE: Use GiftPremiumSubscription as Bot Method
DESCRIPTION: This snippet shows how to use the giftPremiumSubscription method directly with a bot instance. It assumes the bot object and necessary parameters for GiftPremiumSubscription are already defined.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/gift_premium_subscription.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.gift_premium_subscription(...)
```

--------------------------------

TITLE: Upload Sticker File as Method Object
DESCRIPTION: This snippet shows how to use the UploadStickerFile method as a standalone object, which can be passed to the bot. This approach offers flexibility and is useful when you need to manage method calls more explicitly. It requires importing the UploadStickerFile class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upload_sticker_file.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.upload_sticker_file import UploadStickerFile
```

LANGUAGE: python
CODE:
```
result: File = await bot(UploadStickerFile(...))
```

--------------------------------

TITLE: Upload Sticker File using Bot Method
DESCRIPTION: This snippet demonstrates how to upload a sticker file using the bot object directly. It's a common way to interact with the aiogram library's methods. The method expects file-related arguments, indicated by '...'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upload_sticker_file.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: File = await bot.upload_sticker_file(...)
```

--------------------------------

TITLE: Activate Virtual Environment (Bash/macOS)
DESCRIPTION: Activates the Python virtual environment located at .venv/bin/activate on Linux and macOS systems.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_1

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

--------------------------------

TITLE: Basic InlineQueryHandler Usage in aiogram
DESCRIPTION: Demonstrates the fundamental way to define and register an InlineQueryHandler using aiogram's router. This handler is designed to process inline queries sent by users.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/inline_query.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.handlers import InlineQueryHandler

@router.inline_query()
class MyHandler(InlineQueryHandler):
    async def handle(self) -> Any: ...

```

--------------------------------

TITLE: Nginx Reverse Proxy Configuration
DESCRIPTION: This configuration snippet shows how to set up Nginx to proxy requests to an aiohttp webhook server, forwarding necessary headers for proper request handling.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/webhook.rst#_snippet_2

LANGUAGE: nginx
CODE:
```
location /webhook {
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_redirect off;
    proxy_buffering off;
    proxy_pass http://127.0.0.1:8080;
}
```

--------------------------------

TITLE: Create Chat Subscription Invite Link (Webhook Reply)
DESCRIPTION: Illustrates how to return a CreateChatSubscriptionInviteLink object as a reply within a webhook handler. This is a common pattern for responding to incoming webhook requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_subscription_invite_link.rst#_snippet_2

LANGUAGE: python
CODE:
```
return CreateChatSubscriptionInviteLink(...)
```

--------------------------------

TITLE: Basic AiohttpSession Usage in aiogram
DESCRIPTION: Demonstrates the basic initialization of AiohttpSession and its binding to an aiogram Bot instance. This is the default session type used by aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/aiohttp.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram import Bot
from aiogram.client.session.aiohttp import AiohttpSession

session = AiohttpSession()
bot = Bot('42:token', session=session)
```

--------------------------------

TITLE: Compact Router Registration in aiogram
DESCRIPTION: Adds a method for compactly registering routers, simplifying the process of structuring and organizing bot handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_201

LANGUAGE: python
CODE:
```
# Method to compactly register routers
```

--------------------------------

TITLE: Set Sticker Keywords - Bot Method
DESCRIPTION: This code snippet demonstrates how to use the `set_sticker_keywords` method directly as a bot method in aiogram. It is a simple asynchronous call expecting a boolean result.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_keywords.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_sticker_keywords(...)
```

--------------------------------

TITLE: Send Checklist as Object Method Call
DESCRIPTION: Shows how to instantiate the SendChecklist class and then call it using a bot instance. This method is useful for more explicit control or when chaining operations. Imports for SendChecklist are also provided.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_checklist.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_checklist import SendChecklist

result: Message = await bot(SendChecklist(...))
```

--------------------------------

TITLE: Activate Virtual Environment (Windows cmd)
DESCRIPTION: Activates the Python virtual environment located at .\.venv\Scripts\activate on Windows command prompt.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_2

LANGUAGE: text
CODE:
```
.\.venv\Scripts\activate
```

--------------------------------

TITLE: Instantiate and use CopyMessage object with bot in Python
DESCRIPTION: Shows how to import and instantiate the CopyMessage class to call it with a bot object. This method offers more flexibility for advanced use cases.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_message.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.copy_message import CopyMessage

result: MessageId = await bot(CopyMessage(...))
```

--------------------------------

TITLE: Send Video as Method Object with aiogram
DESCRIPTION: Shows how to use `SendVideo` as a method object for sending videos, either with a specific bot instance or when handling webhooks. It requires importing `SendVideo` from `aiogram.methods.send_video` or `aiogram.methods`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_video import SendVideo

result: Message = await bot(SendVideo(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendVideo

return SendVideo(...)
```

--------------------------------

TITLE: Use TransferBusinessAccountStars as Method Object
DESCRIPTION: Shows how to instantiate and use the TransferBusinessAccountStars method as an object. This approach involves importing the method and then passing it to the bot object. It's useful for more structured or complex interactions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_business_account_stars.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.transfer_business_account_stars import TransferBusinessAccountStars

# Alternative import:
# from aiogram.methods import TransferBusinessAccountStars

result: bool = await bot(TransferBusinessAccountStars(...))
```

--------------------------------

TITLE: Set Bot Description as Bot Method
DESCRIPTION: This snippet demonstrates how to use the `setMyDescription` method directly on a bot instance to set the bot's description. It returns a boolean indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_description.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_my_description(...)
```

--------------------------------

TITLE: Send Audio using Bot Method (Python)
DESCRIPTION: Demonstrates how to send an audio message using the send_audio method directly with a bot instance. Requires an initialized bot object and audio file details.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_audio.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_audio(...)
```

--------------------------------

TITLE: Added TransactionPartnerAffiliateProgram class
DESCRIPTION: A new class, `TransactionPartnerAffiliateProgram`, has been introduced to manage transactions related to incoming affiliate commissions. This enhances the library's capability to handle affiliate program integrations.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_81

LANGUAGE: python
CODE:
```
from aiogram.types import TransactionPartnerAffiliateProgram

# Example usage:
affiliate_partner = TransactionPartnerAffiliateProgram(currency='USD', amount=10.50)
```

--------------------------------

TITLE: Set Webhook as Bot Object Method (Python)
DESCRIPTION: Shows how to instantiate the SetWebhook method as an object and pass it to the bot for execution. This approach is useful for more explicit control over webhook configuration.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_webhook.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_webhook import SetWebhook

result: bool = await bot(SetWebhook(...))
```

--------------------------------

TITLE: Handle 'No' Answer for Bot Preference (Python)
DESCRIPTION: Handles the case where the user answers 'no' to liking bots, storing the data and transitioning to the 'language' state.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_4

LANGUAGE: python
CODE:
```
@dp.message_handler(lambda message: message.text.lower() == 'no', state=Form.like_bots)
async def process_dont_like_write_bots(message: types.Message):
    await state.finish()
    await message.reply('Okay, understood.')

```

--------------------------------

TITLE: Construct ReplyKeyboardMarkup
DESCRIPTION: Generates the final ReplyKeyboardMarkup object from the builder's configuration, ready to be used in a message.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_8

LANGUAGE: python
CODE:
```
builder.as_markup() -> aiogram.types.reply_keyboard_markup.ReplyKeyboardMarkup
```

--------------------------------

TITLE: Send Game as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the `sendGame` method directly as a bot method. This is a common way to send games in aiogram applications.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_game.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_game(...)
```

--------------------------------

TITLE: Create Sticker Set using Bot Method (Python)
DESCRIPTION: Demonstrates how to create a new sticker set by calling the create_new_sticker_set method directly on the bot object. This is the most common way to use the method.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_new_sticker_set.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.create_new_sticker_set(...)
```

--------------------------------

TITLE: Send Video as Bot Method using aiogram
DESCRIPTION: Demonstrates how to send a video using the `send_video` method directly on the bot object. This method returns a `Message` object upon successful execution.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_video(...)
```

--------------------------------

TITLE: Implementing FSM Storage Proxy in aiogram
DESCRIPTION: This code relates to the implementation of a proxy for aiogram's FSM (Finite State Machine) storage. This proxy likely enhances the management and access to state data stored for users, potentially improving performance and reliability in complex stateful bots.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_89

LANGUAGE: python
CODE:
```
# This is a conceptual representation as the exact code isn't provided.
# It involves using a proxy pattern for state storage.
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher import FSMContext
# 
# storage = MemoryStorage()
# state_proxy = storage.proxy()

```

--------------------------------

TITLE: Shortcut methods for Text.as_kwargs()
DESCRIPTION: Added new shortcut methods for the aiogram.utils.formatting.Text.as_kwargs() function to simplify its usage.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_14

LANGUAGE: python
CODE:
```
from aiogram.utils.formatting import Text

# Example usage:
# kwargs = Text.as_kwargs("text")
# Or using new shortcuts...
```

--------------------------------

TITLE: Post Story as Object Method (Python)
DESCRIPTION: This snippet shows how to use PostStory as a method object, typically within a specific bot instance. It requires importing the PostStory class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/post_story.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.post_story import PostStory
result: Story = await bot(PostStory(...))
```

--------------------------------

TITLE: ConvertGiftToStars as Method Object (Python)
DESCRIPTION: Shows how to instantiate and use the ConvertGiftToStars method as an object, which can then be passed to the bot. This approach offers flexibility in how the method is called.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/convert_gift_to_stars.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.convert_gift_to_stars import ConvertGiftToStars

result: bool = await bot(ConvertGiftToStars(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import ConvertGiftToStars

result: bool = await bot(ConvertGiftToStars(...))
```

--------------------------------

TITLE: Integrate CallbackData with Inline Keyboards
DESCRIPTION: Shows how to use the packed callback data when creating inline keyboard buttons. It also illustrates that the InlineKeyboardBuilder can automatically handle unpacked CallbackData instances.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

# ... (MyCallback definition)

# Pass it into the markup
InlineKeyboardButton(
    text="demo",
    callback_data=MyCallback(foo="demo", bar="42").pack()  # value should be packed to string
)

# Using InlineKeyboardBuilder
builder = InlineKeyboardBuilder()
builder.button(
    text="demo",
    callback_data=MyCallback(foo="demo", bar="42")  # Value can be not packed to string inplace, because builder knows what to do with callback instance
)
```

--------------------------------

TITLE: AnswerWebAppQuery as Webhook Reply
DESCRIPTION: Illustrates how to return `AnswerWebAppQuery` as a reply within a webhook handler. This is useful for responding to specific events or queries received via webhook.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_web_app_query.rst#_snippet_2

LANGUAGE: python
CODE:
```
return AnswerWebAppQuery(...)
```

--------------------------------

TITLE: SetStickerSetThumbnail Imports and Usage as Object
DESCRIPTION: Provides the necessary import statements for the SetStickerSetThumbnail method and shows how to use it as an object when calling a bot. This approach is useful for more structured interactions with the bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_thumbnail.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_sticker_set_thumbnail import SetStickerSetThumbnail
from aiogram.methods import SetStickerSetThumbnail

result: bool = await bot(SetStickerSetThumbnail(...))
```

--------------------------------

TITLE: Close Forum Topic as Method Object
DESCRIPTION: This snippet shows how to use `CloseForumTopic` as a method object, which can be passed to the bot instance. It highlights the import statements and the instantiation of the `CloseForumTopic` class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.close_forum_topic import CloseForumTopic

result: bool = await bot(CloseForumTopic(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import CloseForumTopic

result: bool = await bot(CloseForumTopic(...))
```

--------------------------------

TITLE: Telegram Web App Viewport and Theme Event Handling
DESCRIPTION: Handles Telegram Web App viewport changes and theme updates. It logs viewport dimensions and theme parameters to the console or DOM elements. It also includes functions to expand and close the webview.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/examples/web_app/demo.html#_snippet_5

LANGUAGE: javascript
CODE:
```
function webviewExpand() {
    Telegram.WebApp.expand();
}

function webviewClose() {
    Telegram.WebApp.close();
}

function round(val, d) {
    var k = Math.pow(10, d || 0);
    return Math.round(val * k) / k;
}

function setViewportData() {
    $('.viewport_border').attr('text', window.innerWidth + ' x ' + round(Telegram.WebApp.viewportHeight, 2));
    $('.viewport_stable_border').attr('text', window.innerWidth + ' x ' + round(Telegram.WebApp.viewportStableHeight, 2) + ' | is_expanded: ' + (Telegram.WebApp.isExpanded ? 'true' : 'false'));
}

Telegram.WebApp.onEvent('themeChanged', function () {
    $('#theme_data').html(JSON.stringify(Telegram.WebApp.themeParams, null, 2));
});
Telegram.WebApp.onEvent('viewportChanged', setViewportData);
setViewportData();
```

--------------------------------

TITLE: Reopen Forum Topic as Method Object (Python)
DESCRIPTION: Shows how to use the ReopenForumTopic method object with a specific bot instance. This involves importing the method and calling the bot with the method object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.reopen_forum_topic import ReopenForumTopic
result: bool = await bot(ReopenForumTopic(...))
```

--------------------------------

TITLE: Configure FSM Strategy for Forum Topics in aiogram
DESCRIPTION: Demonstrates how to set the FSM strategy to USER_IN_TOPIC for handling Finite State Machine in forum topics. This requires specifying a storage mechanism. Custom storage implementations need to extend the record key generation to include 'thread_id'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_195

LANGUAGE: python
CODE:
```
from aiogram.fsm.strategy import FSMStrategy
...
dispatcher = Dispatcher(
    fsm_strategy=FSMStrategy.USER_IN_TOPIC,
    storage=...,  # Any persistent storage
)
```

--------------------------------

TITLE: Set Sticker Set Title - Method Object
DESCRIPTION: This snippet shows how to instantiate and use SetStickerSetTitle as a method object with a bot. It requires importing the class and passing necessary arguments to the constructor.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_title.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_sticker_set_title import SetStickerSetTitle

result: bool = await bot(SetStickerSetTitle(...))
```

--------------------------------

TITLE: Pin Chat Message - Method Object Usage
DESCRIPTION: Shows how to use PinChatMessage as a method object, allowing for its use with a specific bot instance or as a return value in a webhook handler. Imports include `from aiogram.methods.pin_chat_message import PinChatMessage` and `from aiogram.methods import PinChatMessage`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/pin_chat_message.rst#_snippet_1

LANGUAGE: python
CODE:
```
result: bool = await bot(PinChatMessage(...))
```

LANGUAGE: python
CODE:
```
return PinChatMessage(...)
```

--------------------------------

TITLE: Prepare thumb in send_document method
DESCRIPTION: The `send_document` method now includes logic to prepare the thumbnail for the document. This ensures that thumbnails are correctly generated or processed before being sent.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_53

LANGUAGE: python
CODE:
```
# Added preparing thumb in send_document method (#391)
```

--------------------------------

TITLE: BaseStorage Customization - aiogram
DESCRIPTION: Illustrates the base class for creating custom storage solutions in aiogram. By inheriting from BaseStorage and implementing its abstract methods, developers can integrate their own storage backends.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#_snippet_8

LANGUAGE: python
CODE:
```
from aiogram.fsm.storage.base import BaseStorage

class CustomStorage(BaseStorage):
    async def get_state(self, bot, key: str) -> str | None:
        # Custom logic to retrieve state
        pass

    async def set_state(self, bot, key: str, state: str | None):
        # Custom logic to set state
        pass

    async def update_data(self, bot, key: str, data: dict) -> dict:
        # Custom logic to update data
        pass

    async def get_data(self, bot, key: str) -> dict:
        # Custom logic to retrieve data
        pass

    async def reset_state(self, bot, key: str):
        # Custom logic to reset state
        pass

    async def reset_all_states(self, name: str | None = None):
        # Custom logic to reset all states
        pass

# Example of using the custom storage
# storage = CustomStorage()

```

--------------------------------

TITLE: Send Document as Method Object (Python)
DESCRIPTION: This shows how to send a document by instantiating the SendDocument method and passing it to the bot instance. It requires importing the SendDocument class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_document.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_document import SendDocument

result: Message = await bot(SendDocument(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendDocument

result: Message = await bot(SendDocument(...))
```

--------------------------------

TITLE: Add CreateChatSubscriptionInviteLink method in aiogram
DESCRIPTION: Introduces the 'CreateChatSubscriptionInviteLink' method to allow bots to generate subscription invite links. This feature is part of Bot API 7.8 support and enhances community management tools.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_115

LANGUAGE: python
CODE:
```
aiogram.methods.create_chat_subscription_invite_link.CreateChatSubscriptionInviteLink(...)
```

--------------------------------

TITLE: Parse and Validate WebApp Init Data with aiogram
DESCRIPTION: Demonstrates how to safely parse and validate initialization data received from a Telegram WebApp using aiogram. It handles potential unauthorized access and returns user information in JSON format. This is useful for backend services that need to verify requests originating from a WebApp.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/web_app.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.utils.web_app import safe_parse_webapp_init_data
from aiohttp.web_request import Request
from aiohttp.web_response import json_response

async def check_data_handler(request: Request):
    bot: Bot = request.app["bot"]

    data = await request.post()  # application/x-www-form-urlencoded
    try:
        data = safe_parse_webapp_init_data(token=bot.token, init_data=data["_auth"])
    except ValueError:
        return json_response({"ok": False, "err": "Unauthorized"}, status=401)
    return json_response({"ok": True, "data": data.user.dict()})
```

--------------------------------

TITLE: Return Create Forum Topic in Webhook Handler
DESCRIPTION: Illustrates how to return a `CreateForumTopic` object from a webhook handler. This is useful for processing incoming updates and responding by creating a forum topic.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_forum_topic.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods import CreateForumTopic
return CreateForumTopic(...)
```

--------------------------------

TITLE: Set Bot Description as Webhook Reply
DESCRIPTION: This snippet illustrates how to return a `SetMyDescription` object as a reply from a webhook handler to set the bot's description.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_description.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.set_my_description import SetMyDescription

return SetMyDescription(...)
```

--------------------------------

TITLE: Create New Sticker Set
DESCRIPTION: Allows the creation of a new sticker set for a Telegram bot.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_new_sticker_set.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
## POST /createStickerSet

### Description
Creates a new sticker set for a bot. Returns True on success.

### Method
POST

### Endpoint
/createStickerSet

### Parameters
#### Query Parameters
- **user_id** (integer) - Required - Unique identifier for the target user
- **name** (string) - Required - Text describing the sticker set
- **type** (string) - Required - Type of stickers in the set, e.g. "regular", "mask", "custom_emoji"
- **title** (string) - Required - Sticker set title, can be empty

#### Request Body
- **sticker** (InputSticker) - Required - A JSON-serialized object describing the sticker
- **emoji** (string) - Optional - One or more emoji corresponding to the sticker
- **mask_position** (MaskPosition) - Optional - Position where the mask should be placed on the face
- **needs_reanimation** (boolean) - Optional - Pass True if stickers in the sticker set must be animated, otherwise false

### Request Example
```json
{
  "user_id": 123456789,
  "name": "my_cat_stickers",
  "type": "regular",
  "title": "My Cat Stickers",
  "sticker": {
    "sticker": "attach://sticker.png",
    "emoji": "😻"
  }
}
```

### Response
#### Success Response (200)
- **result** (boolean) - True if the sticker set was created successfully.

#### Response Example
```json
{
  "ok": true,
  "result": true
}
```
```

--------------------------------

TITLE: Compile Translations using pybabel
DESCRIPTION: This command compiles translation files (.po) into a machine-readable format (.mo) for use by the application. It requires specifying the directory where translations are stored and the domain of the messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_8

LANGUAGE: bash
CODE:
```
pybabel compile -d locales -D messages
```

--------------------------------

TITLE: MongoStorage Initialization - aiogram
DESCRIPTION: Initializes the MongoStorage for storing FSM states using MongoDB. This storage is persistent and suitable for large-scale applications. It requires the 'motor' library for asynchronous operations.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#_snippet_4

LANGUAGE: python
CODE:
```
from aiogram.fsm.storage.mongo import MongoStorage

storage = MongoStorage(url="mongodb://localhost:27017/")
```

--------------------------------

TITLE: Suggested Posts Functionality (Python)
DESCRIPTION: Introduces classes and methods for handling suggested posts in channels, including parameters for sending, approving, and declining posts, as well as new service message types for post events.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from aiogram.types import Message, SuggestedPostParameters, SuggestedPostInfo, SuggestedPostPrice
from aiogram.methods import ApproveSuggestedPost, DeclineSuggestedPost

# Example: Sending a message with suggested post parameters
# await message.answer("Check out this post!", suggested_post_parameters=SuggestedPostParameters(currency="USD", amount=100))

# Example: Approving a suggested post
# await bot(ApproveSuggestedPost(channel_id=CHANNEL_ID, message_id=MESSAGE_ID))

# Example: Declining a suggested post
# await bot(DeclineSuggestedPost(channel_id=CHANNEL_ID, message_id=MESSAGE_ID))
```

--------------------------------

TITLE: Refund Star Payment as Object and Reply
DESCRIPTION: Shows how to import and use the RefundStarPayment class. It can be called directly with the bot object or returned as a reply in a webhook handler.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/refund_star_payment.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.refund_star_payment import RefundStarPayment
from aiogram.methods import RefundStarPayment

result: bool = await bot(RefundStarPayment(...))

return RefundStarPayment(...)
```

--------------------------------

TITLE: SetBusinessAccountBio as Method Object
DESCRIPTION: Illustrates using SetBusinessAccountBio as a method object, which can be called with a bot instance. It shows two ways to import the SetBusinessAccountBio class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_bio.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_business_account_bio import SetBusinessAccountBio
result: bool = await bot(SetBusinessAccountBio(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetBusinessAccountBio
result: bool = await bot(SetBusinessAccountBio(...))
```

--------------------------------

TITLE: Send Message Using SendMessage Object
DESCRIPTION: Shows how to instantiate and use the SendMessage object, either directly with a bot instance or when returning from a webhook handler. Requires importing SendMessage.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_message.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_message import SendMessage
result: Message = await bot(SendMessage(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendMessage

# As reply into Webhook in handler
return SendMessage(...)
```

--------------------------------

TITLE: FSM Scene Entry Handler Fix
DESCRIPTION: Fix for an issue where the scene entry handler was not receiving context data passed by middleware.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_19

LANGUAGE: APIDOC
CODE:
```
## FSM Scene Entry Handler Bugfix

### Description
Corrected an issue where the scene entry handler (`enter`) was not receiving data passed to the context by middleware, potentially causing `TypeError`.

### Details
Additionally, documentation has been updated to clarify the correct procedure for entering a scene.

### Example
No direct API endpoint for this, but it affects the behavior of FSM scene handlers.
```

--------------------------------

TITLE: Send Location as Bot Method (Python)
DESCRIPTION: Demonstrates how to send a location using the bot object directly. This method requires an instance of the bot and arguments for sending the location.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_location.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_location(...)
```

--------------------------------

TITLE: Set Chat Menu Button as Object Method (Python)
DESCRIPTION: This snippet shows how to instantiate and use the SetChatMenuButton method as an object, which can then be called with a bot instance. Imports for SetChatMenuButton are also provided.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_menu_button.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_chat_menu_button import SetChatMenuButton

result: bool = await bot(SetChatMenuButton(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetChatMenuButton

result: bool = await bot(SetChatMenuButton(...))
```

--------------------------------

TITLE: Return Set Business Account Gift Settings in Webhook Handler (Python)
DESCRIPTION: Shows how to return an instance of `SetBusinessAccountGiftSettings` from a webhook handler. This allows the Telegram server to process the gift settings update when it receives a webhook request.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_gift_settings.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetBusinessAccountGiftSettings(...)
```

--------------------------------

TITLE: Update Documentation Translations (Bash)
DESCRIPTION: Updates the gettext catalog for documentation translations and prepares locale directories for a specified language code.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_12

LANGUAGE: bash
CODE:
```
cd docs
make gettext
sphinx-intl update -p _build/gettext -l <language_code>
```

--------------------------------

TITLE: Promote Chat Member as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the promoteChatMember method directly as a bot method. It requires a bot object and the necessary arguments for promotion.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/promote_chat_member.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.promote_chat_member(...)
```

--------------------------------

TITLE: MemoryStorage Initialization - aiogram
DESCRIPTION: Initializes the MemoryStorage for storing FSM states in memory. This is a simple and fast storage option suitable for development or small applications. It does not require any external dependencies.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/storages.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.fsm.storage.memory import MemoryStorage

storage = MemoryStorage()
```

--------------------------------

TITLE: Send Media Group as Method Object (Python)
DESCRIPTION: Shows how to use the SendMediaGroup method as an object, which can be passed to the bot instance. Requires importing the SendMediaGroup class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_media_group.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_media_group import SendMediaGroup

result: list[Message] = await bot(SendMediaGroup(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendMediaGroup

result: list[Message] = await bot(SendMediaGroup(...))
```

--------------------------------

TITLE: Download File to Binary I/O Object (Specific Object)
DESCRIPTION: Downloads a file and saves it into a provided binary I/O object. The function returns the same object that was passed as a destination.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#_snippet_3

LANGUAGE: python
CODE:
```
my_object = MyBinaryIO()
result: MyBinaryIO = await bot.download_file(file_path, my_object)
```

--------------------------------

TITLE: Add supports_streaming to reply_video and remove redundant docstrings
DESCRIPTION: The `reply_video` method has been updated to include the `supports_streaming` parameter, allowing for streaming support to be specified. Additionally, redundant documentation strings have been removed for clarity.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_31

LANGUAGE: python
CODE:
```
# Added parameter supports_streaming to reply_video, remove redundant docstrings (#459)
```

--------------------------------

TITLE: Registering Scene in SceneRegistry (Python)
DESCRIPTION: This Python snippet demonstrates how to register a custom scene, 'QuizScene', with the SceneRegistry. This is a crucial step to make the scene available for use within the aiogram application.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/scene.rst#_snippet_2

LANGUAGE: python
CODE:
```
def create_dispatcher():
    # ... other dispatcher setup ...
    dp.scene.register(QuizScene()) # Registering the scene
    return dp
```

--------------------------------

TITLE: Downloading files from URL using InputFile in aiogram
DESCRIPTION: This code demonstrates how to download files directly from a URL using the `InputFile.from_url()` method in aiogram. This is useful for uploading files to Telegram that are hosted elsewhere. It simplifies the process of handling file uploads from external sources.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_85

LANGUAGE: python
CODE:
```
from aiogram import Bot
from aiogram.types import InputFile

# Assuming 'bot' is an instance of Bot
# file_path = "http://example.com/path/to/your/file.txt"
# input_file = InputFile.from_url(file_path)
# await bot.send_document(chat_id=..., document=input_file)

```

--------------------------------

TITLE: ReactionTypePaid Support
DESCRIPTION: Documentation for the addition of ReactionTypePaid, enabling support for paid reactions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_131

LANGUAGE: APIDOC
CODE:
```
## POST /api/reaction/paid

### Description
This endpoint details the implementation of `ReactionTypePaid`, which allows for the processing and handling of paid reactions within the platform.

### Method
POST

### Endpoint
/api/reaction/paid

### Parameters
#### Path Parameters
- **chat_id** (integer) - Required - The ID of the chat where the reaction occurred.
- **message_id** (integer) - Required - The ID of the message to which the reaction was added.

#### Query Parameters
- **reaction_type** (string) - Required - Specifies the type of reaction as 'paid'.

#### Request Body
- **user** (object) - Information about the user who applied the paid reaction.
  - **id** (integer) - Unique identifier for the user.
  - **is_bot** (boolean) - True if the user is a bot.
  - **first_name** (string) - First name of the user.
  - **username** (string) - Username of the user.

### Request Example
```json
{
  "user": {
    "id": 112233445,
    "is_bot": false,
    "first_name": "Charlie",
    "username": "charlie_chap"
  }
}
```

### Response
#### Success Response (200)
- **status** (string) - Indicates the success of the operation.
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "status": "success",
  "message": "Paid reaction processed successfully."
}
```
```

--------------------------------

TITLE: Added nanostar_amount to StarTransaction
DESCRIPTION: The `StarTransaction` class now includes the `nanostar_amount` field to support new Telegram Bot API features related to star transactions. This allows for more granular tracking of star amounts in transactions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_80

LANGUAGE: python
CODE:
```
from aiogram.types import StarTransaction

# Example usage (assuming StarTransaction can be instantiated)
transaction = StarTransaction(
    telegram_id=12345,
    amount=100,
    nanostar_amount=50,  # New field
    // ... other fields
)
```

--------------------------------

TITLE: Codegen Configuration for Lost Shortcuts in aiogram
DESCRIPTION: Details the addition of codegen configuration for previously missing shortcuts like `ShippingQuery.answer`, `PreCheckoutQuery.answer`, and `Message.delete_reply_markup`. This improves developer convenience.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_194

LANGUAGE: python
CODE:
```
# Auto-generated methods:
# await shipping_query.answer(ok=True)
# await pre_checkout_query.answer(ok=True)
# await message.delete_reply_markup()
```

--------------------------------

TITLE: Approve Suggested Post (Method Object)
DESCRIPTION: This snippet shows how to call `approveSuggestedPost` as a method object. This approach is useful when you need to pass the method call as an argument or manage it separately. It requires importing the `ApproveSuggestedPost` class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/approve_suggested_post.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.approve_suggested_post import ApproveSuggestedPost

# Or alias:
# from aiogram.methods import ApproveSuggestedPost

result: bool = await bot(ApproveSuggestedPost(...))
```

--------------------------------

TITLE: Delete Forum Topic as Object (Python)
DESCRIPTION: This snippet shows how to instantiate and use the DeleteForumTopic method as an object. It can be called directly with the bot object or returned as a reply in a webhook handler. Imports include 'from aiogram.methods.delete_forum_topic import DeleteForumTopic' or 'from aiogram.methods import DeleteForumTopic'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
result: bool = await bot(DeleteForumTopic(...))
```

LANGUAGE: python
CODE:
```
return DeleteForumTopic(...)
```

--------------------------------

TITLE: Set Bot Commands as Object (aiogram)
DESCRIPTION: Shows how to use SetMyCommands as a method object in aiogram, allowing it to be called with a specific bot instance. This includes import statements for clarity.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_commands.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_my_commands import SetMyCommands
from aiogram.methods import SetMyCommands

result: bool = await bot(SetMyCommands(...))
```

--------------------------------

TITLE: Inline Keyboard Builder
DESCRIPTION: Dynamically generates inline keyboards with customizable button layouts. Supports adding buttons, adjusting grid, attaching other markups, and exporting to InlineKeyboardMarkup.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
## Inline Keyboard Builder Usage

### Description
Dynamically generate inline keyboards with customizable button layouts. Supports adding buttons, adjusting grid, attaching other markups, and exporting to InlineKeyboardMarkup.

### Method
N/A (This is a class for building markups, not a direct API endpoint)

### Endpoint
N/A

### Parameters
#### Class Initialization
- **`InlineKeyboardBuilder()`**: Initializes a new InlineKeyboardBuilder instance.

#### Button Creation (`button` method)
- **`text`** (str) - Required - The text displayed on the button.
- **`url`** (Optional[str]) - Optional - For URL buttons.
- **`login_url`** (Optional[LoginUrl]) - Optional - For Login URL buttons.
- **`callback_data`** (Optional[Union[str, CallbackData]]) - Optional - Data sent when the button is pressed.
- **`switch_inline_query`** (Optional[str]) - Optional - To switch to inline mode.
- **`switch_inline_query_current_chat`** (Optional[str]) - Optional - To switch to inline mode in the current chat.
- **`callback_game`** (Optional[CallbackGame]) - Optional - For callback games.
- **`pay`** (Optional[bool]) - Optional - To indicate if the button is for payment.

#### Markup Manipulation
- **`adjust(*args)`**: Adjusts the button layout into a grid. Each argument specifies the number of buttons per row.
- **`attach(builder)`**: Attaches another KeyboardBuilder instance to the current one.
- **`from_markup(markup)`**: Creates a builder from an existing markup.

### Request Example
```python
from aiogram.utils.keyboard import InlineKeyboardBuilder

builder = InlineKeyboardBuilder()

for index in range(1, 11):
    builder.button(text=f"Set {index}", callback_data=f"set:{index}")

builder.adjust(3, 2)

# To attach another builder:
# another_builder = InlineKeyboardBuilder(...)
# builder.attach(another_builder)

# To export markup:
# markup = builder.as_markup()
```

### Response
#### Success Response
- **`as_markup()`** -> `aiogram.types.inline_keyboard_markup.InlineKeyboardMarkup`: The constructed inline keyboard markup.
```

--------------------------------

TITLE: Set Business Account Username as Method Object (Python)
DESCRIPTION: Illustrates using the SetBusinessAccountUsername method as an object, which can be passed to a bot instance for execution. It also shows different ways to import the method.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_username.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_business_account_username import SetBusinessAccountUsername
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetBusinessAccountUsername
```

LANGUAGE: python
CODE:
```
result: bool = await bot(SetBusinessAccountUsername(...))
```

--------------------------------

TITLE: Feed Webhook Update to Dispatcher (aiogram)
DESCRIPTION: This Python code snippet demonstrates how to manually feed an incoming webhook update to the aiogram dispatcher, typically used when integrating with frameworks other than aiohttp.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/webhook.rst#_snippet_3

LANGUAGE: python
CODE:
```
update = Update.model_validate(await request.json(), context={'bot': bot})
await dispatcher.feed_update(update)
```

--------------------------------

TITLE: Check ChatMember Status Using isinstance (aiogram)
DESCRIPTION: Shows how to check a ChatMember's status in aiogram using the isinstance function with pre-defined groups like ADMINS and MEMBERS in version 3.x, replacing the direct method calls from version 2.x.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_11

LANGUAGE: python
CODE:
```
# Version 2.x

if chat_member.is_chat_admin():
    print("ChatMember is chat admin")

if chat_member.is_chat_member():
    print("ChatMember is in the chat")
```

LANGUAGE: python
CODE:
```
# Version 3.x

from aiogram.utils.chat_member import ADMINS, MEMBERS

if isinstance(chat_member, ADMINS):
    print("ChatMember is chat admin")

if isinstance(chat_member, MEMBERS):
    print("ChatMember is in the chat")
```

--------------------------------

TITLE: FSM State Management Documentation
DESCRIPTION: Documentation added for changing another user's state in FSM.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_21

LANGUAGE: APIDOC
CODE:
```
## FSM State Management Documentation Update

### Description
Documentation has been expanded to cover the process of changing another user's state within the Finite State Machine (FSM) system.

### Details
This update aims to provide clearer guidance on advanced FSM usage.

### Example
No direct API endpoint for this, but it relates to the documentation of FSM features.
```

--------------------------------

TITLE: Set Business Account Profile Photo - Bot Method
DESCRIPTION: Demonstrates how to use the `set_business_account_profile_photo` method directly via the bot object. This method is used to set the profile photo for a business account.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_profile_photo.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_business_account_profile_photo(...)
```

--------------------------------

TITLE: Instantiate and Use ReadBusinessMessage Object
DESCRIPTION: Shows how to import and use the `ReadBusinessMessage` class, either directly or with an alias, for interacting with the bot or returning from a handler. This provides flexibility in how the method is applied.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/read_business_message.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.read_business_message import ReadBusinessMessage
```

LANGUAGE: python
CODE:
```
from aiogram.methods import ReadBusinessMessage
```

LANGUAGE: python
CODE:
```
result: bool = await bot(ReadBusinessMessage(...))
```

LANGUAGE: python
CODE:
```
return ReadBusinessMessage(...)
```

--------------------------------

TITLE: Send Paid Media as Bot Method (aiogram)
DESCRIPTION: Demonstrates how to use the sendPaidMedia method directly with a bot object. This is a common pattern for sending paid media content in an aiogram bot.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_paid_media.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_paid_media(...)
```

--------------------------------

TITLE: Use VerifyUser as Bot Method
DESCRIPTION: Demonstrates how to call the VerifyUser method directly on the bot object. This is a common pattern for interacting with the Telegram API through the aiogram library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_user.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.verify_user(...)
```

--------------------------------

TITLE: Set Chat Description as Bot Method
DESCRIPTION: This code snippet demonstrates how to use the setChatDescription method directly as a bot method. It requires an instance of the bot and the necessary parameters for the chat description.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_description.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_chat_description(...)
```

--------------------------------

TITLE: SetBusinessAccountBio Usage with Bot Instance
DESCRIPTION: Demonstrates how to call the setBusinessAccountBio method directly on a bot instance. This method is used to set the business account bio.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_bio.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_business_account_bio(...)
```

--------------------------------

TITLE: General Chat Management API
DESCRIPTION: Methods for managing chat settings, members, and messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/index.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
## POST /answer_callback_query

### Description
Use this method to send answers to callback queries sent from inline keyboards.
The answer will be displayed to the user as a notification at the top of the chat screen or as a modal.

### Method
POST

### Endpoint
/answer_callback_query

### Parameters
#### Request Body
- **callback_query_id** (string) - Required - Unique identifier for the query to be answered.
- **text** (string) - Optional - Text of the notification; 0-200 characters.
- **show_alert** (boolean) - Optional - If `True`, an alert will be shown; otherwise, only a notification at the top of the chat screen of the user answering the callback query.
- **url** (string) - Optional - URL that will be opened by the user's client.
- **cache_time** (integer) - Optional - The maximum amount of time in seconds that the result of the callback query may be cached client-side.

### Request Example
```json
{
  "callback_query_id": "1234567890:ABCDEFGH"
}
```

### Response
#### Success Response (200)
- **result** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true,
  "result": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /approve_chat_join_request

### Description
Approve a chat join request.

### Method
POST

### Endpoint
/approve_chat_join_request

### Parameters
#### Request Body
- **chat_id** (integer or string) - Required - Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).
- **user_id** (integer) - Required - Identifier of the user to approve.

### Request Example
```json
{
  "chat_id": "@mychannel",
  "user_id": 123456789
}
```

### Response
#### Success Response (200)
- **result** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true,
  "result": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /ban_chat_member

### Description
Use this method to ban a user in a group, a supergroup or a channel. In the case of channels, the function only suits for removing members who are banned in the supergroup that the channel is linked to. The function will not work in a supergroup with more than 100 members.

### Method
POST

### Endpoint
/ban_chat_member

### Parameters
#### Request Body
- **chat_id** (integer or string) - Required - Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).
- **user_id** (integer) - Required - Unique identifier of the target user.
- **until_date** (integer) - Optional - Date when the user will be unbanned in Unix time. More this value than 0, then the user will be banned until the mentioned date.
- **revoke_messages** (boolean) - Optional - True, if the bot needs to delete all messages from the user that are not yet visible to the other users in the group.

### Request Example
```json
{
  "chat_id": "@mychannel",
  "user_id": 123456789,
  "revoke_messages": true
}
```

### Response
#### Success Response (200)
- **result** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true,
  "result": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /ban_chat_sender_chat

### Description
Use this method to ban a channel chat in a forum topic.

### Method
POST

### Endpoint
/ban_chat_sender_chat

### Parameters
#### Request Body
- **chat_id** (integer or string) - Required - Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).
- **sender_chat_id** (integer) - Required - Unique identifier of the chat to ban.

### Request Example
```json
{
  "chat_id": "@mychannel",
  "sender_chat_id": 123456789
}
```

### Response
#### Success Response (200)
- **result** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true,
  "result": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /close

### Description
Use this method to close the chat for the bot. The bot will not receive any more updates from this chat.

### Method
POST

### Endpoint
/close

### Parameters
#### Request Body
- **chat_id** (integer or string) - Required - Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).

### Request Example
```json
{
  "chat_id": 123456789
}
```

### Response
#### Success Response (200)
- **result** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true,
  "result": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /close_forum_topic

### Description
Use this method to close an active topic in a forum supergroup chat.

### Method
POST

### Endpoint
/close_forum_topic

### Parameters
#### Request Body
- **chat_id** (integer or string) - Required - Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).
- **message_thread_id** (integer) - Optional - Unique identifier for the target message thread of the forum topic.

### Request Example
```json
{
  "chat_id": 123456789,
  "message_thread_id": 1
}
```

### Response
#### Success Response
```

--------------------------------

TITLE: Verify Chat as Method Object
DESCRIPTION: This snippet demonstrates using VerifyChat as a method object. It requires importing the VerifyChat class and then passing an instance of it to the bot object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_chat.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.verify_chat import VerifyChat

result: bool = await bot(VerifyChat(...))
```

--------------------------------

TITLE: Send Game as Webhook Reply (Python)
DESCRIPTION: Illustrates how to return a `SendGame` object as a reply when handling webhooks. This is useful for frameworks that expect a direct return value for replies.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_game.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendGame(...)
```

--------------------------------

TITLE: Importing MagicData Filter
DESCRIPTION: Shows the import statement required to use the MagicData filter in your aiogram bot code.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_data.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.filters import MagicData
```

--------------------------------

TITLE: Link Preview Options Fix
DESCRIPTION: Information about a bugfix that ensures link preview options use global defaults across various types and methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_128

LANGUAGE: APIDOC
CODE:
```
## POST /api/link-preview

### Description
This endpoint addresses a bugfix related to link preview options, ensuring they consistently use global defaults across different message types and methods for enhanced flexibility.

### Method
POST

### Endpoint
/api/link-preview

### Parameters
#### Path Parameters
None

#### Query Parameters
- **use_global_defaults** (boolean) - Set to true to enforce global defaults for link preview options.

#### Request Body
- **link_preview_options** (object) - Configuration for link previews.
  - **is_disabled** (boolean) - Whether link previews are disabled.
  - **mode** (string) - The mode for link previews (e.g., 'show_link_preview', 'hide_link_preview').
  - **url** (string) - The URL for which the preview is generated.

### Request Example
```json
{
  "link_preview_options": {
    "is_disabled": false,
    "mode": "show_link_preview",
    "url": "https://example.com"
  }
}
```

### Response
#### Success Response (200)
- **status** (string) - Indicates the success of the operation.
- **message** (string) - A confirmation message about the updated link preview settings.

#### Response Example
```json
{
  "status": "success",
  "message": "Link preview options updated to use global defaults."
}
```
```

--------------------------------

TITLE: Register CallbackAnswerMiddleware (Python)
DESCRIPTION: Register the CallbackAnswerMiddleware to automatically answer all handled callback queries after their processing.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/callback_answer.rst#_snippet_0

LANGUAGE: python
CODE:
```
dispatcher.callback_query.middleware(CallbackAnswerMiddleware())
```

--------------------------------

TITLE: Attach Another Builder
DESCRIPTION: Combines buttons from another InlineKeyboardBuilder instance into the current one. This facilitates modular keyboard construction.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_2

LANGUAGE: python
CODE:
```
another_builder = InlineKeyboardBuilder(...)
builder.attach(another_builder)
```

--------------------------------

TITLE: Register RequestLogging Middleware - Python
DESCRIPTION: Demonstrates how to register the RequestLogging middleware for the client session using the register method. It shows how to ignore specific methods like GetUpdates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/middleware.rst#_snippet_0

LANGUAGE: python
CODE:
```
bot.session.middleware(RequestLogging(ignore_methods=[GetUpdates]))
```

--------------------------------

TITLE: Send Chat Action as Method Object (Python)
DESCRIPTION: Shows how to instantiate and use the SendChatAction method as an object, either directly with a bot instance or as a reply in a webhook handler. It highlights the import statement for the method.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_chat_action.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_chat_action import SendChatAction
# or
from aiogram.methods import SendChatAction

result: bool = await bot(SendChatAction(...))
```

LANGUAGE: python
CODE:
```
return SendChatAction(...)
```

--------------------------------

TITLE: Send Audio as a Standalone Object (Python)
DESCRIPTION: Shows how to use SendAudio as a standalone object, which can be called with a bot instance. This method allows for more explicit control and is useful when working with handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_audio.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_audio import SendAudio

result: Message = await bot(SendAudio(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendAudio

result: Message = await bot(SendAudio(...))
```

--------------------------------

TITLE: Set Business Account Gift Settings as Method Object (Python)
DESCRIPTION: Illustrates using `SetBusinessAccountGiftSettings` as a method object, which can be passed to the bot instance. This approach is useful for organizing API calls or when working with asynchronous queues.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_gift_settings.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_business_account_gift_settings import SetBusinessAccountGiftSettings

result: bool = await bot(SetBusinessAccountGiftSettings(...))
```

--------------------------------

TITLE: SetMyName Method Object Usage
DESCRIPTION: This snippet illustrates using SetMyName as a method object, which can be called with a specific bot instance. It also shows the import statements required for this method. The '...' indicates placeholder parameters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_name.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_my_name import SetMyName
from aiogram.methods import SetMyName

result: bool = await bot(SetMyName(...))
```

--------------------------------

TITLE: InlineKeyboardBuilder Type Hint Fix
DESCRIPTION: Fix for MyPy [return-value] error in InlineKeyboardBuilder().as_markup().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_22

LANGUAGE: APIDOC
CODE:
```
## InlineKeyboardBuilder Type Hint Fix

### Description
Resolved a MyPy error related to the return value of the `as_markup()` method in `InlineKeyboardBuilder` and `ReplyKeyboardBuilder` classes.

### Details
The `as_markup` method now correctly overloads the parent class method and uses `super()` to call the parent's implementation. Correct type hints have been added to the return value of `as_markup` for both classes.

### Example
No direct API endpoint for this, but it affects the internal implementation and type safety of keyboard builders.
```

--------------------------------

TITLE: Export Chat Invite Link as Method Object
DESCRIPTION: This snippet shows how to instantiate and use the ExportChatInviteLink method object with a specific bot instance. It's useful for more explicit control over method calls and can be used in handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/export_chat_invite_link.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.export_chat_invite_link import ExportChatInviteLink

result: str = await bot(ExportChatInviteLink(...))
```

--------------------------------

TITLE: Use createInvoiceLink as Bot Method
DESCRIPTION: Demonstrates how to call the createInvoiceLink method directly on the bot object. This is a common way to send requests to the Telegram Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_invoice_link.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: str = await bot.create_invoice_link(...)
```

--------------------------------

TITLE: Post Story as Bot Method (Python)
DESCRIPTION: This code snippet demonstrates how to use the PostStory method directly as a bot method to post a story. It expects a Story object as a return type.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/post_story.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Story = await bot.post_story(...)
```

--------------------------------

TITLE: Create Chat Invite Link as Method Object
DESCRIPTION: This snippet shows how to use the CreateChatInviteLink method as a callable object with a bot instance. It's a common pattern for more complex interactions or when passing methods as arguments.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_invite_link.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.create_chat_invite_link import CreateChatInviteLink

result: ChatInviteLink = await bot(CreateChatInviteLink(...))
```

--------------------------------

TITLE: Set Sticker Emoji List as Bot Method Object (Python)
DESCRIPTION: Shows how to instantiate and use the `SetStickerEmojiList` class as a method object with a bot instance. This approach is useful for more complex request constructions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_emoji_list.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_sticker_emoji_list import SetStickerEmojiList

result: bool = await bot(SetStickerEmojiList(...))
```

--------------------------------

TITLE: Change State for Another User (Python)
DESCRIPTION: Demonstrates how to change the FSM state for a different user via the dispatcher's `get_context` method, useful for admin actions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_10

LANGUAGE: python
CODE:
```
from aiogram.types import Message
from aiogram import Bot, Dispatcher
from aiogram.filters import Command

@example_router.message(Command("example"))
async def command_example(message: Message, dispatcher: Dispatcher, bot: Bot):
    user_id = ...  # Get the user ID in the way that you need
    state = await dispatcher.fsm.get_context(
        bot=bot,
        chat_id=user_id,
        user_id=user_id,
    )

    # Now you can use the state context to change the state for the specified user
    await state.set_state(YourState.some_state)

    # Or store data in the state
    await state.update_data(some_key="some_value")

    # Or clear the state
    await state.clear()

```

--------------------------------

TITLE: Return Create Sticker Set Method in Webhook Handler (Python)
DESCRIPTION: Illustrates how to return a CreateNewStickerSet object from a webhook handler, allowing the bot to create a sticker set in response to an incoming webhook request.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_new_sticker_set.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.create_new_sticker_set import CreateNewStickerSet

return CreateNewStickerSet(...)
```

--------------------------------

TITLE: Set Default Administrator Rights as Bot Method
DESCRIPTION: This code snippet demonstrates how to set the default administrator rights for a bot using the aiogram library. It requires a bot instance and the necessary parameters for the rights.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_default_administrator_rights.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_my_default_administrator_rights(...)
```

--------------------------------

TITLE: Set Message Reaction - Method as Object
DESCRIPTION: Shows how to use `SetMessageReaction` as a method object, which can be passed to the bot instance. It details the necessary imports for using the method as an object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_message_reaction.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_message_reaction import SetMessageReaction
from aiogram.methods import SetMessageReaction
```

LANGUAGE: python
CODE:
```
result: bool = await bot(SetMessageReaction(...))
```

LANGUAGE: python
CODE:
```
return SetMessageReaction(...)
```

--------------------------------

TITLE: Send Invoice as Method Object (Python)
DESCRIPTION: Illustrates using the SendInvoice method object with a specific bot instance. This approach provides flexibility in how the method is called and managed.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_invoice.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_invoice import SendInvoice

result: Message = await bot(SendInvoice(...))
```

--------------------------------

TITLE: Aiogram Chat Join Request Handler
DESCRIPTION: Shows how to register a handler for when a user requests to join a chat via invite link, using @router.chat_join_request().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_14

LANGUAGE: python
CODE:
```
@router.chat_join_request()
async def chat_join_request_handler(chat_join_request: types.ChatJoinRequest) -> Any: pass
```

--------------------------------

TITLE: InlineKeyboardBuilder.as_markup() MyPy fix
DESCRIPTION: Resolved a MyPy [return-value] error in InlineKeyboardBuilder().as_markup() by overloading the parent method and using super() for correct return type hinting.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_13

LANGUAGE: python
CODE:
```
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ...
# builder = InlineKeyboardBuilder()
# markup = builder.as_markup()
```

--------------------------------

TITLE: Verify Chat as Bot Method
DESCRIPTION: This snippet shows how to use the verify_chat method directly on the bot object. It requires an instance of the bot and the necessary arguments for verify_chat.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_chat.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.verify_chat(...)
```

--------------------------------

TITLE: Send Animation as Method Object (Python)
DESCRIPTION: Shows how to use the SendAnimation method as a distinct object, which can be passed to the bot instance. This approach requires importing the SendAnimation class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_animation.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_animation import SendAnimation
result: Message = await bot(SendAnimation(...))
```

--------------------------------

TITLE: Promote Chat Member as Webhook Reply (Python)
DESCRIPTION: This snippet illustrates how to return a PromoteChatMember object as a reply when handling webhooks. This is a common pattern for responding to incoming updates via webhooks.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/promote_chat_member.rst#_snippet_2

LANGUAGE: python
CODE:
```
return PromoteChatMember(...)
```

--------------------------------

TITLE: Access Bot Attributes and Methods
DESCRIPTION: Demonstrates accessing essential attributes of a configured aiogram Bot instance, such as its unique ID and the bot's own user information. It also shows the convention for calling methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/bot.rst#_snippet_1

LANGUAGE: python
CODE:
```
# Accessing bot attributes
bot_id = bot.id
me = bot.me

# Calling methods (lower_camel_case aliased to snake_case)
# For example, sendMessage is send_message
# await bot.send_message(chat_id=update.message.chat.id, text='Hello!')
```

--------------------------------

TITLE: Use EditStory as Object
DESCRIPTION: Shows how to instantiate and use the `EditStory` class directly. This approach allows for more explicit control and is useful when working with handlers or specific bot instances.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_story.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_story import EditStory
from aiogram.methods import EditStory

result: Story = await bot(EditStory(...))
```

--------------------------------

TITLE: Set Sticker Position in Set (Method Object)
DESCRIPTION: Shows how to instantiate and use the SetStickerPositionInSet method as an object, either directly with a bot instance or when handling webhooks. Includes common import patterns.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_position_in_set.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_sticker_position_in_set import SetStickerPositionInSet

# Usage with a specific bot instance
result: bool = await bot(SetStickerPositionInSet(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetStickerPositionInSet

# Usage as a reply in a Webhook handler
return SetStickerPositionInSet(...)
```

--------------------------------

TITLE: Supplementing Dispatcher Context with Dictionary Assignment (Python)
DESCRIPTION: Demonstrates augmenting the Dispatcher's workflow data by assigning values using dictionary-like syntax. This allows for dynamic addition of context information that can be accessed by handlers and middleware.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#_snippet_3

LANGUAGE: python
CODE:
```
dp = Dispatcher(...)
dp["eggs"] = Spam()
```

--------------------------------

TITLE: RethinkDB Storage for FSM in aiogram
DESCRIPTION: This entry introduces the `RethinkDBStorage` for aiogram's FSM (Finite State Machine) system. This allows bot states to be persisted in a RethinkDB database, providing a robust and scalable solution for managing user states across bot restarts.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_113

LANGUAGE: python
CODE:
```
from aiogram.contrib.fsm_storage.rethinkdb import RethinkDBStorage
from aiogram.dispatcher import Dispatcher

# storage = RethinkDBStorage(
#     host='localhost', 
#     port=28015, 
#     db='aiogram_states', 
#     table='fsm'
# )
# dp = Dispatcher(bot, storage=storage)

```

--------------------------------

TITLE: Requesting Device Permissions (Geolocation, Video, Audio)
DESCRIPTION: Requests user permission for geolocation, video, and audio access using the browser's navigator API. It updates the UI with the status of the permission request.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/examples/web_app/demo.html#_snippet_6

LANGUAGE: javascript
CODE:
```
function requestLocation(el) {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            $(el).next('span').html('(' + position.coords.latitude + ', ' + position.coords.longitude + ')').attr('class', 'ok');
        });
    } else {
        $(el).next('span').html('Geolocation is not supported in this browser.').attr('class', 'err');
    }
    return false;
}

function requestVideo(el) {
    if (navigator.mediaDevices) {
        navigator.mediaDevices.getUserMedia({ audio: false, video: true }).then(function (stream) {
            $(el).next('span').html('(Access granted)').attr('class', 'ok');
        });
    } else {
        $(el).next('span').html('Media devices is not supported in this browser.').attr('class', 'err');
    }
    return false;
}

function requestAudio(el) {
    if (navigator.mediaDevices) {
        navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(function (stream) {
            $(el).next('span').html('(Access granted)').attr('class', 'ok');
        });
    } else {
        $(el).next('span').html('Media devices is not supported in this browser.').attr('class', 'err');
    }
    return false;
}
```

--------------------------------

TITLE: Export Markup for Message
DESCRIPTION: Converts the built keyboard into an InlineKeyboardMarkup object that can be attached to a message. This is the final step to display the keyboard to the user.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_4

LANGUAGE: python
CODE:
```
await message.answer("Some text here", reply_markup=builder.as_markup())
```

--------------------------------

TITLE: Activate Virtual Environment (Windows PowerShell)
DESCRIPTION: Activates the Python virtual environment located at .\.venv\Scripts\activate.ps1 on Windows PowerShell.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/contributing.rst#_snippet_3

LANGUAGE: powershell
CODE:
```
.\.venv\Scripts\activate.ps1
```

--------------------------------

TITLE: Add Sticker to Set using Bot Method (aiogram)
DESCRIPTION: Demonstrates how to add a sticker to a sticker set using the `add_sticker_to_set` method directly with a bot instance. This is a common way to interact with the Telegram Bot API for sticker management.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/add_sticker_to_set.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.add_sticker_to_set(...)
```

--------------------------------

TITLE: Return Paid Media in Webhook Handler (aiogram)
DESCRIPTION: Shows how to return a SendPaidMedia object from a webhook handler in aiogram. This is useful for responding to incoming updates with paid media.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_paid_media.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendPaidMedia(...)
```

--------------------------------

TITLE: Subscription Invite Link Management
DESCRIPTION: APIs for creating and editing subscription invite links, enabling bots to manage subscription offerings.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_129

LANGUAGE: APIDOC
CODE:
```
## POST /api/chat/subscription/invite-link

### Description
These endpoints allow bots to create and manage subscription invite links for chats. This includes creating new links and editing existing ones, providing flexibility in subscription management.

### Method
POST

### Endpoint
/api/chat/subscription/invite-link

### Parameters
#### Path Parameters
- **chat_id** (integer) - Required - The ID of the chat for which to create/edit the invite link.

#### Query Parameters
- **action** (string) - Required - Specifies the action to perform: 'create' or 'edit'.

#### Request Body
- **invite_link_data** (object) - Data for the subscription invite link.
  - **name** (string) - Optional - The name of the invite link (for editing).
  - **member_limit** (integer) - Optional - The maximum number of members the link can be used by.
  - **expire_date** (string) - Optional - The date when the invite link will expire.
  - **subscription_period** (integer) - Optional - The duration of the subscription in days.
  - **chat_id** (integer) - Required for creating subscription links - The ID of the chat the subscription is for.

### Request Example
```json
{
  "action": "create",
  "invite_link_data": {
    "name": "Premium Subscription",
    "member_limit": 100,
    "expire_date": "2024-12-31T23:59:59Z",
    "subscription_period": 30,
    "chat_id": 123456789
  }
}
```

### Response
#### Success Response (200)
- **invite_link** (string) - The created or edited subscription invite link.
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "invite_link": "https://t.me/+abc123XYZ",
  "message": "Subscription invite link created successfully."
}
```
```

--------------------------------

TITLE: Reopen Forum Topic as Bot Method (Python)
DESCRIPTION: Demonstrates how to reopen a forum topic using the aiogram bot instance. This method returns a boolean value indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_forum_topic.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.reopen_forum_topic(...)
```

--------------------------------

TITLE: Added AffiliateInfo and affiliate field to TransactionPartnerUser
DESCRIPTION: The `AffiliateInfo` class and the `affiliate` field within `TransactionPartnerUser` have been added. These additions enable bots to identify specific affiliates involved in transactions that include affiliate commissions, improving tracking and reporting.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_82

LANGUAGE: python
CODE:
```
from aiogram.types import TransactionPartnerUser, AffiliateInfo

# Example usage:
user_partner = TransactionPartnerUser(
    user_id=67890,
    affiliate=AffiliateInfo(telegram_id=112233) # New affiliate field
)
```

--------------------------------

TITLE: Callback Answer Utility in aiogram
DESCRIPTION: Introduces a utility for handling callback answers, enhancing interaction with inline keyboards.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_200

LANGUAGE: python
CODE:
```
# callback-answer-util
```

--------------------------------

TITLE: Register ChatActionMiddleware
DESCRIPTION: Shows how to register the ChatActionMiddleware with a router or dispatcher. Once registered, handlers that take longer than 'initial_sleep' will automatically send a 'typing' chat action.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/chat_action.rst#_snippet_1

LANGUAGE: python
CODE:
```
<router or dispatcher>.message.middleware(ChatActionMiddleware())
```

--------------------------------

TITLE: Attach Existing Markup
DESCRIPTION: Integrates an existing InlineKeyboardMarkup into the builder. This allows for modifying or extending pre-defined keyboard layouts.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_3

LANGUAGE: python
CODE:
```
markup = InlineKeyboardMarkup(inline_keyboard=[...])
builder.attach(InlineKeyboardBuilder.from_markup(markup))
```

--------------------------------

TITLE: Replace Sticker in Set (Object Instantiation)
DESCRIPTION: Instantiating ReplaceStickerInSet as an object and calling it with the bot instance. This approach requires importing the ReplaceStickerInSet class from aiogram.methods.replace_sticker_in_set. It returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/replace_sticker_in_set.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.replace_sticker_in_set import ReplaceStickerInSet

result: bool = await bot(ReplaceStickerInSet(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import ReplaceStickerInSet

result: bool = await bot(ReplaceStickerInSet(...))
```

--------------------------------

TITLE: Define Custom Middleware with Callable Class - Python
DESCRIPTION: Illustrates how to create a function-based client session middleware by implementing the __call__ method within a class. This allows for pre-request and post-request actions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/middleware.rst#_snippet_3

LANGUAGE: python
CODE:
```
async def __call__(
    self,
    make_request: NextRequestMiddlewareType[TelegramType],
    bot: "Bot",
    method: TelegramMethod[TelegramType],
) -> Response[TelegramType]:
    try:
        # do something with request
        return await make_request(bot, method)
    finally:
        # do something after request
```

--------------------------------

TITLE: Refactor FSMContext and BaseStorage input types to Mapping
DESCRIPTION: Replaced Dict[str, Any] with Mapping[str, Any] in FSMContext and BaseStorage methods for better type hinting and compatibility with MyPy.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_8

LANGUAGE: python
CODE:
```
from typing import Mapping, Any

# ... FSMContext methods like set_data, update_data
# ... BaseStorage methods like set_data, update_data
```

--------------------------------

TITLE: Upload file from URL using URLInputFile
DESCRIPTION: Explains how to upload a file from a remote URL using aiogram's URLInputFile. This method is beneficial for bypassing upload limits or when the file link is tied to a specific server IP. The class is imported, and an instance is created with the URL and an optional filename.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/upload_file.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.types import URLInputFile

image = URLInputFile(
    "https://www.python.org/static/community_logos/python-powered-h-140x182.png",
    filename="python-logo.png"
)
```

--------------------------------

TITLE: Added subscription_period to CreateInvoiceLink
DESCRIPTION: The `CreateInvoiceLink` method now supports the `subscription_period` parameter. This allows for the creation of invoice links for services that are billed periodically, enabling subscription management via the API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_85

LANGUAGE: python
CODE:
```
from aiogram.methods import CreateInvoiceLink

# Example usage:
create_link_method = CreateInvoiceLink(
    title='Monthly Subscription',
    description='Access premium features',
    payload='sub_123',
    provider_token='YOUR_PROVIDER_TOKEN',
    currency='USD',
    prices=[{'label': 'Monthly', 'amount': 500}],
    subscription_period='P1M' # Added parameter for monthly subscription
)
```

--------------------------------

TITLE: Construct InlineKeyboardMarkup
DESCRIPTION: Generates the final InlineKeyboardMarkup object from the builder's configuration, ready to be used in a message.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_6

LANGUAGE: python
CODE:
```
builder.as_markup() -> aiogram.types.inline_keyboard_markup.InlineKeyboardMarkup
```

--------------------------------

TITLE: Include Routers in Dispatcher
DESCRIPTION: Shows how to attach another Router instance to the main Dispatcher. This allows for modular organization of handlers and logic within an aiogram application.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dispatcher.rst#_snippet_1

LANGUAGE: python
CODE:
```
dp = Dispatcher()
router1 = Router()
dp.include_router(router1)
```

--------------------------------

TITLE: Define and Use CallbackData Class
DESCRIPTION: Demonstrates how to create a subclass of CallbackData with specific fields and generate callback data strings. It shows how to pack data into a string and unpack it back into the class instance.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.filters.callback_data import CallbackData

class MyCallback(CallbackData, prefix="my"):
    foo: str
    bar: int

# Usage example:
cb1 = MyCallback(foo="demo", bar=42)
cb1.pack()  # returns 'my:demo:42'
cb1.unpack('my:demo:42')  # returns <MyCallback(foo="demo", bar=42)>
```

--------------------------------

TITLE: Use CopyMessages as Method Object
DESCRIPTION: Shows how to instantiate and use CopyMessages as a method object with a bot instance. This approach is useful for more complex scenarios or when passing methods as arguments.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_messages.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.copy_messages import CopyMessages

result: list[MessageId] = await bot(CopyMessages(...))
```

--------------------------------

TITLE: Set Message Reaction - Usage as Bot Method
DESCRIPTION: Demonstrates how to use the `set_message_reaction` method directly with a bot instance. This is the primary way to send the set message reaction request.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_message_reaction.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_message_reaction(...)
```

--------------------------------

TITLE: Set Business Account Name using Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to call the set_business_account_name method directly using the bot object. It requires an active bot instance and the necessary parameters for the method. The expected return type is a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_name.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_business_account_name(...)
```

--------------------------------

TITLE: Handle Raw Updates with Dispatcher
DESCRIPTION: Demonstrates feeding raw update data (as a dictionary) to the Dispatcher using the `feed_raw_update` method. This method is useful for processing updates that may not conform to the standard `Update` object structure.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dispatcher.rst#_snippet_3

LANGUAGE: python
CODE:
```
from aiogram import Bot, Dispatcher

async def update_handler(raw_update: dict[str, Any], bot: Bot, dispatcher: Dispatcher):
  result = await dp.feed_raw_update(bot, raw_update)
```

--------------------------------

TITLE: Telegram Object to Python Dictionary Conversion (aiogram 2.x vs 3.x)
DESCRIPTION: Demonstrates how to convert a Telegram object to a Python dictionary using `TelegramObject.to_object()` in aiogram 2.x and `TelegramObject.model_validate()` in aiogram 3.x. This highlights the shift to Pydantic models for data validation and transformation.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_7

LANGUAGE: Python
CODE:
```
# Version 2.x
message_dict = {"id": 42, ...}
message_obj = Message.to_object(message_dict)
print(message_obj)
# id=42 name='n' ...
print(type(message_obj))
# <class 'aiogram.types.message.Message'>
```

LANGUAGE: Python
CODE:
```
# Version 3.x
message_dict = {"id": 42, ...}
message_obj = Message.model_validate(message_dict)
print(message_obj)
# id=42 name='n' ...
print(type(message_obj))
# <class 'aiogram.types.message.Message'>
```

--------------------------------

TITLE: UnhideGeneralForumTopic Usage as Method Object
DESCRIPTION: Shows how to instantiate and use the UnhideGeneralForumTopic method as an object. This approach involves importing the method and then passing it to the bot instance. The method is used to unhide a general forum topic and returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unhide_general_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.unhide_general_forum_topic import UnhideGeneralForumTopic

result: bool = await bot(UnhideGeneralForumTopic(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import UnhideGeneralForumTopic

result: bool = await bot(UnhideGeneralForumTopic(...))
```

--------------------------------

TITLE: Decline Suggested Post Usage with Specific Bot Instance (Python)
DESCRIPTION: This snippet shows how to call the DeclineSuggestedPost method by creating an instance of the method and passing it to the bot. It requires importing the DeclineSuggestedPost class. The method returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/decline_suggested_post.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.decline_suggested_post import DeclineSuggestedPost

result: bool = await bot(DeclineSuggestedPost(...))
```

--------------------------------

TITLE: Send Venue as Method Object
DESCRIPTION: Shows how to use the `SendVenue` method as an object, which allows for more explicit control and is useful in various contexts like webhook handlers. It includes import statements for clarity.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_venue.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_venue import SendVenue
from aiogram.methods import SendVenue

# With specific bot
result: Message = await bot(SendVenue(...))

# As reply into Webhook in handler
return SendVenue(...)
```

--------------------------------

TITLE: Return VerifyUser as Webhook Reply
DESCRIPTION: Illustrates how to return a VerifyUser object directly from a webhook handler. This allows the bot to respond to incoming webhook requests with the user verification action.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_user.rst#_snippet_2

LANGUAGE: python
CODE:
```
return VerifyUser(...)
```

--------------------------------

TITLE: Set Sticker Set Title - Bot Method
DESCRIPTION: This snippet demonstrates how to use the setStickerSetTitle method directly as a bot method. It requires the bot object and appropriate parameters for the sticker set title.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_title.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_sticker_set_title(...)
```

--------------------------------

TITLE: Send Sticker using aiogram bot method
DESCRIPTION: Demonstrates how to send a sticker using the bot object directly. This method is part of the aiogram library for Telegram bot development.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_sticker.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_sticker(...)
```

--------------------------------

TITLE: Send Invoice as Bot Method (Python)
DESCRIPTION: Demonstrates how to send an invoice directly using the bot instance in aiogram. This is a primary way to interact with the send_invoice functionality.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_invoice.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_invoice(...)
```

--------------------------------

TITLE: Add missing parameter to promoteChatMember alias
DESCRIPTION: A missing parameter has been added to the `promoteChatMember` alias. This ensures that all necessary arguments are available when using this alias for chat promotion.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_32

LANGUAGE: python
CODE:
```
# Added missing parameter to promoteChatMember alias (#458)
```

--------------------------------

TITLE: Download File to Binary I/O Object (Default)
DESCRIPTION: Downloads a file and returns it as an io.BytesIO object. This is useful for processing file content directly in memory.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#_snippet_4

LANGUAGE: python
CODE:
```
result: io.BytesIO = await bot.download_file(file_path)
```

--------------------------------

TITLE: Extract Messages with Pybabel
DESCRIPTION: Provides the command to use Pybabel for extracting translatable strings from your project's source code. It specifies the input directories and the output template file (messages.pot).

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_5

LANGUAGE: bash
CODE:
```
pybabel extract --input-dirs=. -o locales/messages.pot
```

--------------------------------

TITLE: Set Business Account Profile Photo - Webhook Reply
DESCRIPTION: Illustrates how to return a `SetBusinessAccountProfilePhoto` object from a webhook handler. This is the standard way to send method responses when using webhooks.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_profile_photo.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetBusinessAccountProfilePhoto(...)
```

--------------------------------

TITLE: Forward Message as Method Object (Python)
DESCRIPTION: This shows how to use ForwardMessage as a method object, either directly with a bot instance or within a handler context. It requires importing ForwardMessage from aiogram.methods.forward_message or aiogram.methods. The output is a Message object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_message.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.forward_message import ForwardMessage
result: Message = await bot(ForwardMessage(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import ForwardMessage
result: Message = await bot(ForwardMessage(...))
```

LANGUAGE: python
CODE:
```
return ForwardMessage(...)
```

--------------------------------

TITLE: SetMyName Bot Method Usage
DESCRIPTION: This snippet demonstrates how to use the SetMyName method as a direct bot method. It shows the asynchronous call and the expected boolean return type. No specific parameters are detailed here, indicated by '...'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_name.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_my_name(...)
```

--------------------------------

TITLE: Send Checklist as Bot Method
DESCRIPTION: Demonstrates how to use the sendChecklist method directly as a bot method. It returns a Message object upon successful execution.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_checklist.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_checklist(...)
```

--------------------------------

TITLE: Use EditUserStarSubscription as Bot Method in aiogram
DESCRIPTION: Demonstrates how to call the editUserStarSubscription method directly using a bot instance. This is the primary way to interact with the method for sending requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_user_star_subscription.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.edit_user_star_subscription(...)
```

--------------------------------

TITLE: Send Video Note as Bot Method
DESCRIPTION: Demonstrates how to send a video note using the bot object directly. This is a common way to interact with the Telegram Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video_note.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_video_note(...)
```

--------------------------------

TITLE: Send Chat Action as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the sendChatAction method directly with a bot instance to send a chat action. This is a common way to interact with the aiogram API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_chat_action.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.send_chat_action(...)
```

--------------------------------

TITLE: Send Video Note Reply in Handler (Python)
DESCRIPTION: Illustrates returning a SendVideoNote object from a webhook handler to send a video note as a reply. This is useful for direct responses.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_video_note.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendVideoNote(...)
```

--------------------------------

TITLE: Export Chat Invite Link as Bot Method
DESCRIPTION: This snippet demonstrates how to use the export_chat_invite_link method directly as a bot method in aiogram. It returns a string representing the invite link.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/export_chat_invite_link.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: str = await bot.export_chat_invite_link(...)
```

--------------------------------

TITLE: Use EditForumTopic as Bot Object
DESCRIPTION: Shows how to use the EditForumTopic method as an object, passed to the bot instance. This approach is useful for more complex interactions or when chaining methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
result: bool = await bot(EditForumTopic(...))
```

--------------------------------

TITLE: Handle Unknown Answers in FSM (Python)
DESCRIPTION: Handles any other input from the user when they are in the 'like_bots' state, prompting them to answer 'yes' or 'no'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_5

LANGUAGE: python
CODE:
```
@dp.message_handler(state=Form.like_bots)
async def process_unknown_write_bots(message: types.Message):
    await message.reply('Please answer Yes or No.')

```

--------------------------------

TITLE: Send Venue Shortcuts
DESCRIPTION: Lists the available shortcut methods for sending venues from different received objects like Message, ChatJoinRequest, and ChatMemberUpdated. These shortcuts simplify the process of replying with venue information.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_venue.rst#_snippet_2

LANGUAGE: python
CODE:
```
# From Message
Message.answer_venue
Message.reply_venue

# From ChatJoinRequest
ChatJoinRequest.answer_venue
ChatJoinRequest.answer_venue_pm

# From ChatMemberUpdated
ChatMemberUpdated.answer_venue

# From InaccessibleMessage
InaccessibleMessage.answer_venue
InaccessibleMessage.reply_venue
```

--------------------------------

TITLE: Business Accounts API - BusinessBotRights
DESCRIPTION: Introduction of the `BusinessBotRights` class and modification of the `rights` field.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_23

LANGUAGE: APIDOC
CODE:
```
## BusinessBotRights Class and Rights Field Update

### Description
Adds the `BusinessBotRights` class and updates the `rights` field, replacing the previous `can_reply` field.

### Details
This change is part of the support for Bot API version 9.0, specifically for business accounts.

### Example
No direct API endpoint for this, but it affects the data structures used for business account interactions.
```

--------------------------------

TITLE: Hide General Forum Topic as Method Object (Python)
DESCRIPTION: This code shows how to use the HideGeneralForumTopic method as an object, which can be passed to a bot instance. It illustrates the import statement required for this approach.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/hide_general_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.hide_general_forum_topic import HideGeneralForumTopic

result: bool = await bot(HideGeneralForumTopic(...))
```

--------------------------------

TITLE: Using multiple bot tokens
DESCRIPTION: Enables the use of different bot tokens from a single bot instance via a context manager, allowing for more flexible bot configurations.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_79

LANGUAGE: python
CODE:
```
from aiogram import Bot

async with Bot(token='NEW_TOKEN') as bot_instance:
```

--------------------------------

TITLE: Add MongoStorage for FSM in aiogram
DESCRIPTION: Introduces aiogram.fsm.storage.MongoStorage for Finite State Machine management using MongoDB via the 'motor' library. This enhances state persistence capabilities.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_154

LANGUAGE: python
CODE:
```
aiogram.fsm.storage.MongoStorage
```

--------------------------------

TITLE: General Updates and Pricing
DESCRIPTION: Details on general updates, including changes to paid media and subscription pricing, and new message types for price changes.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_55

LANGUAGE: APIDOC
CODE:
```
## General Updates and Pricing

### Description
This section outlines general updates to the Aiogram library, including pricing adjustments for paid media and subscriptions, and new message types related to price changes.

### Key Updates:
- Maximum price for paid media increased to 10000 Telegram Stars.
- Maximum price for subscription periods increased to 10000 Telegram Stars.
- Added `PaidMessagePriceChanged` class to `Message` for price change notifications.
- Added `paid_star_count` field to `Message` to indicate paid stars for a message.
```

--------------------------------

TITLE: Handling updates in aiogram 3.0
DESCRIPTION: In aiogram 3.0, updates are fed to the Dispatcher using the `feed_update` method instead of `process_update`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_1

LANGUAGE: python
CODE:
```
dp.feed_update(update, ctx_api=bot)
```

--------------------------------

TITLE: Send Venue as Bot Method
DESCRIPTION: Demonstrates how to send a venue using the `send_venue` method directly on a bot instance. This is a common way to interact with the Telegram Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_venue.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_venue(...)
```

--------------------------------

TITLE: Add public methods for filters and middlewares
DESCRIPTION: Introduces public methods for registering filters and middlewares. This provides a clearer and more direct way for developers to customize bot behavior and processing pipelines.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_47

LANGUAGE: python
CODE:
```
# Added public methods to register filters and middlewares (#370)
```

--------------------------------

TITLE: Reply with Voice using Method Object (Python)
DESCRIPTION: Illustrates how to return a `SendVoice` object as a reply within a webhook handler. This pattern is useful for processing incoming updates and sending responses.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_voice.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.send_voice import SendVoice

return SendVoice(...)
```

--------------------------------

TITLE: Send Animation as Bot Method (Python)
DESCRIPTION: Demonstrates how to send an animation using the sendAnimation method directly on a bot instance. This is a common way to interact with the Telegram Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_animation.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_animation(...)
```

--------------------------------

TITLE: Business Account Profile Management
DESCRIPTION: Methods for managing the name, username, bio, and profile photo of a business account.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_46

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/business/account/name/set

### Description
Changes the first and last name of a managed business account.

### Method
POST

### Endpoint
/api/aiogram/business/account/name/set

### Parameters
#### Request Body
- **first_name** (string) - Required - New first name for the business account.
- **last_name** (string) - Optional - New last name for the business account.

### Request Example
```json
{
  "first_name": "New Business Name",
  "last_name": "Inc."
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/business/account/username/set

### Description
Changes the username of a managed business account.

### Method
POST

### Endpoint
/api/aiogram/business/account/username/set

### Parameters
#### Request Body
- **username** (string) - Required - New username for the business account.

### Request Example
```json
{
  "username": "my_business_account"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/business/account/bio/set

### Description
Changes the bio of a managed business account.

### Method
POST

### Endpoint
/api/aiogram/business/account/bio/set

### Parameters
#### Request Body
- **bio** (string) - Required - New bio for the business account.

### Request Example
```json
{
  "bio": "We offer the best services."
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/business/account/profile_photo/set

### Description
Changes the profile photo of a managed business account.

### Method
POST

### Endpoint
/api/aiogram/business/account/profile_photo/set

### Parameters
#### Request Body
- **photo** (InputProfilePhoto) - Required - Describes a profile photo to be set.

### Request Example
```json
{
  "photo": {
    "type": "file",
    "media": "attach://profile.jpg"
  }
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/business/account/profile_photo/remove

### Description
Removes the profile photo of a managed business account.

### Method
POST

### Endpoint
/api/aiogram/business/account/profile_photo/remove

### Parameters
#### Request Body
(No parameters required)

### Request Example
```json
{}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

--------------------------------

TITLE: Set Default Administrator Rights as Method Object
DESCRIPTION: This snippet shows how to instantiate and use the SetMyDefaultAdministratorRights method object from aiogram. It can be called directly with a bot instance or returned as a reply in a webhook handler.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_default_administrator_rights.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_my_default_administrator_rights import SetMyDefaultAdministratorRights
# or
from aiogram.methods import SetMyDefaultAdministratorRights

result: bool = await bot(SetMyDefaultAdministratorRights(...))
```

LANGUAGE: python
CODE:
```
return SetMyDefaultAdministratorRights(...)
```

--------------------------------

TITLE: Set Business Account Gift Settings using Bot Method (Python)
DESCRIPTION: Demonstrates how to call the `set_business_account_gift_settings` method directly on a bot instance. This is a common way to interact with the Telegram Bot API for setting gift configurations.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_gift_settings.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_business_account_gift_settings(...)
```

--------------------------------

TITLE: SetBusinessAccountBio as Webhook Reply
DESCRIPTION: Shows how to return the SetBusinessAccountBio object as a reply when handling webhooks. This is a common pattern for responding to incoming Telegram updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_bio.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetBusinessAccountBio(...)
```

--------------------------------

TITLE: Upgrade Gift as Bot Method
DESCRIPTION: Demonstrates how to use the `upgrade_gift` method directly with a bot instance. This is a common pattern for sending Telegram bot API requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upgrade_gift.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.upgrade_gift(...)
```

--------------------------------

TITLE: Handle Custom and General Exceptions with aiogram Routers
DESCRIPTION: Demonstrates how to set up error handlers for specific exceptions (MyCustomException) and a general handler for all other exceptions within an aiogram router. It utilizes `ExceptionTypeFilter` and `F.update.message` for targeted error management and logging.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/errors.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import ExceptionTypeFilter
from aiogram.types.error_event import ErrorEvent

router = Router()

class MyCustomException(Exception):
    pass

@router.error(ExceptionTypeFilter(MyCustomException), F.update.message.as_("message"))
async def handle_my_custom_exception(event: ErrorEvent, message: Message):
    # do something with error
    await message.answer("Oops, something went wrong!")


@router.error()
async def error_handler(event: ErrorEvent):
    # Assuming logger is configured elsewhere
    # logger.critical("Critical error caused by %s", event.exception, exc_info=True)
    # do something with error
    pass

```

--------------------------------

TITLE: FSMContext Modifications
DESCRIPTION: Details on refactoring input types for FSMContext methods to improve MyPy compatibility.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_17

LANGUAGE: APIDOC
CODE:
```
## Methods Refactoring

### Description
Input types for several methods have been refactored from `Dict[str, Any]` to `Mapping[str, Any]` to enhance MyPy compatibility.

### Affected Methods
- `FSMContext.set_data`
- `FSMContext.update_data`
- `BaseStorage.set_data`
- `BaseStorage.update_data`
- `BaseStorage's child methods`
- `SceneWizard.set_data`
- `SceneWizard.update_data

### Details
This change aims to provide more accurate type hinting and improve static analysis.

### Example
No direct API endpoint for this, but it affects the internal implementation of the FSMContext and Storage classes.
```

--------------------------------

TITLE: Process User's Preferred Language in FSM (Python)
DESCRIPTION: Processes the user's preferred programming language, updates the state data, and prepares for the final summary.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_6

LANGUAGE: python
CODE:
```
@dp.message_handler(state=Form.language)
async def process_language(message: types.Message):
    await state.update_data(language=message.text)
    await Form.finish()
    await message.reply('Thank you! Your preferences have been saved.')

```

--------------------------------

TITLE: Ban Chat Sender Chat as Method Object
DESCRIPTION: This snippet shows how to instantiate the BanChatSenderChat method as an object and then call it using the bot instance. It involves importing the method from aiogram.methods.ban_chat_sender_chat or aiogram.methods. The call is awaited and returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_sender_chat.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.ban_chat_sender_chat import BanChatSenderChat

result: bool = await bot(BanChatSenderChat(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import BanChatSenderChat

result: bool = await bot(BanChatSenderChat(...))
```

--------------------------------

TITLE: Telegram Web App UI Elements and Styling (CSS)
DESCRIPTION: Provides CSS rules for styling various UI elements within a Telegram Web App, including body, links, buttons, sections, and preformatted text. It utilizes CSS variables for theme colors provided by Telegram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/examples/web_app/demo.html#_snippet_1

LANGUAGE: css
CODE:
```
body {
  font-family: sans-serif;
  background-color: var(--tg-theme-bg-color, #ffffff);
  color: var(--tg-theme-text-color, #222222);
  font-size: 16px;
  margin: 0;
  padding: 0;
  color-scheme: var(--tg-color-scheme);
}
a {
  color: var(--tg-theme-link-color, #2678b6);
}
button {
  display: block;
  width: 100%;
  font-size: 14px;
  margin: 15px 0;
  padding: 12px 20px;
  border: none;
  border-radius: 4px;
  background-color: var(--tg-theme-button-color, #50a8eb);
  color: var(--tg-theme-button-text-color, #ffffff);
  cursor: pointer;
}
button[disabled] {
  opacity: 0.6;
  cursor: auto;
  pointer-events: none;
}
button.close_btn {
  /*position: fixed;*/
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 0;
  margin: 0;
  padding: 16px 20px;
  text-transform: uppercase;
}
section {
  padding: 15px 15px 65px;
  text-align: center;
}
p {
  margin: 40px 0 15px;
}
ul {
  text-align: left;
}
li {
  color: var(--tg-theme-hint-color, #a8a8a8);
}
textarea {
  width: 100%;
  box-sizing: border-box;
  padding: 7px;
}
pre {
  background: rgba(0, 0, 0, .07);
  border-radius: 4px;
  padding: 4px;
  margin: 7px 0;
  word-break: break-all;
  word-break: break-word;
  white-space: pre-wrap;
  text-align: left;
}
.dark pre {
  background: rgba(255, 255, 255, .15);
}
.hint {
  font-size: .8em;
  color: var(--tg-theme-hint-color, #a8a8a8);
}
.ok {
  color: green;
}
.err {
  color: red;
}
#fixed_wrap {
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  transform: translateY(100vh);
}
.viewport_border, .viewport_stable_border {
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  height: var(--tg-viewport-height, 100vh);
  pointer-events: none;
}
.viewport_stable_border {
  height: var(--tg-viewport-stable-height, 100vh);
}
.viewport_border:before, .viewport_stable_border:before {
  content: attr(text);
  display: inline-block;
  position: absolute;
  background: gray;
  right: 0;
  top: 0;
  font-size: 7px;
  padding: 2px 4px;
  vertical-align: top;
}
.viewport_stable_border:before {
  background: green;
  left: 0;
  right: auto;
}
.viewport_border:after, .viewport_stable_border:after {
  content: '';
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  border: 2px dashed gray;
}
.viewport_stable_border:after {
  border-color: green;
}
```

--------------------------------

TITLE: Upload file from buffer using BufferedInputFile
DESCRIPTION: Shows how to upload file content directly from a memory buffer using aiogram's BufferedInputFile. This is useful for dynamically generated files, such as images created with libraries like Pillow. It requires importing the class and providing the byte data along with a filename.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/upload_file.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.types import BufferedInputFile

text_file = BufferedInputFile(b"Hello, world!", filename="file.txt")
```

--------------------------------

TITLE: Send Location as SendLocation Object (Python)
DESCRIPTION: Shows how to use the SendLocation class to send a location. This involves importing the class and calling the bot with an instance of SendLocation. Imports are also provided.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_location.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_location import SendLocation
from aiogram.methods import SendLocation

result: Message = await bot(SendLocation(...))
```

--------------------------------

TITLE: Reopen General Forum Topic as Object Method
DESCRIPTION: This snippet demonstrates using the ReopenGeneralForumTopic method as an object, which can be called with a specific bot instance in aiogram. It also returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_general_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.reopen_general_forum_topic import ReopenGeneralForumTopic

result: bool = await bot(ReopenGeneralForumTopic(...))
```

--------------------------------

TITLE: Call EditMessageReplyMarkup as a Method Object
DESCRIPTION: Shows how to use `EditMessageReplyMarkup` as an object, typically within a bot instance call. This approach requires importing the method class and instantiating it with necessary parameters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_reply_markup.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_message_reply_markup import EditMessageReplyMarkup

# Alias import
from aiogram.methods import EditMessageReplyMarkup

result: Union[Message, bool] = await bot(EditMessageReplyMarkup(...))
```

--------------------------------

TITLE: Middleware Context Data Typing
DESCRIPTION: Introduction of TypedDict definitions for middleware context data to enhance type safety.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_61

LANGUAGE: APIDOC
CODE:
```
## Middleware Context Data Typing

### Description
Adds TypedDict definitions for middleware context data, improving type hinting and safety in middleware development.

### Details:
- Users can now use `aiogram.dispatcher.middleware.data.MiddlewareData` directly.
- It's also possible to extend `MiddlewareData` with custom data within middlewares.
```

--------------------------------

TITLE: Webhook File Reply in aiogram
DESCRIPTION: Enables the possibility to reply with files when using webhooks, facilitating the sending of media in webhook-based bots.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_204

LANGUAGE: python
CODE:
```
# Added possibility to reply into webhook with files
```

--------------------------------

TITLE: Stickers API
DESCRIPTION: Methods related to managing and sending stickers within Telegram chats.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/index.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
## POST /add_sticker_to_set

### Description
Adds a new sticker to a set.

### Method
POST

### Endpoint
/add_sticker_to_set

### Parameters
#### Request Body
- **user_id** (integer) - Required - User identifier of the sticker set owner.
- **name** (string) - Required - Sticker set name.
- **sticker** (InputSticker) - Required - The added sticker.
- **emoji_list** (array of strings) - Required - One or more emoji corresponding to the sticker.
- **mask_position** (MaskPosition) - Optional - Position where the mask should be placed on the sticker.
- **keywords** (array of strings) - Optional - List of 1-20 keywords for the sticker.

### Request Example
```json
{
  "user_id": 123456789,
  "name": "my_sticker_set",
  "sticker": {
    "sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
    "emoji_list": ["😀"],
    "keywords": ["happy"]
  }
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /create_new_sticker_set

### Description
Creates a new sticker set with a given title and one or more stickers.

### Method
POST

### Endpoint
/create_new_sticker_set

### Parameters
#### Request Body
- **user_id** (integer) - Required - User identifier of the sticker set owner.
- **title** (string) - Required - Sticker set name.
- **name** (string) - Required - Short name of the sticker set. Should be unique.
- **stickers** (array of InputSticker) - Required - A JSON-serialized array of stickers to be added to the set.
- **sticker_type** (string) - Optional - Type of stickers in the set. Can be "regular", "mask", "custom_emoji".
- **emoji_list** (array of strings) - Required - One or more emoji corresponding to the sticker.
- **keywords** (array of strings) - Optional - List of 1-20 keywords for the sticker.

### Request Example
```json
{
  "user_id": 123456789,
  "title": "My Awesome Stickers",
  "name": "MyAwesomeStickers",
  "stickers": [
    {
      "sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
      "emoji_list": ["😀"],
      "keywords": ["happy"]
    }
  ]
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /delete_sticker_from_set

### Description
Deletes a sticker from a set.

### Method
POST

### Endpoint
/delete_sticker_from_set

### Parameters
#### Request Body
- **user_id** (integer) - Required - User identifier of the sticker set owner.
- **sticker** (string) - Required - Sticker file identifier.

### Request Example
```json
{
  "user_id": 123456789,
  "sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /delete_sticker_set

### Description
Deletes a sticker set.

### Method
POST

### Endpoint
/delete_sticker_set

### Parameters
#### Request Body
- **sticker_set_name** (string) - Required - Name of the sticker set to delete.

### Request Example
```json
{
  "sticker_set_name": "my_sticker_set"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## GET /get_custom_emoji_stickers

### Description
Returns a list of custom emoji stickers, which can be used as a non-official emoji on the platform.

### Method
GET

### Endpoint
/get_custom_emoji_stickers

### Parameters
#### Query Parameters
- **premium_animation** (string) - Optional - Pass `true`, if you want to receive premium animation stickers.

### Response
#### Success Response (200)
- **result** (array of Sticker) - List of stickers.

#### Response Example
```json
{
  "ok": true,
  "result": [
    {
      "width": 512,
      "height": 512,
      "is_animated": false,
      "file_id": "CAACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
      "file_unique_id": "AgICIAACf7M7SA",
      "width": 512,
      "height": 512,
      "is_animated": false,
      "thumb": {
        "width": 320,
        "height": 320,
        "file_id": "TArt_a9z_0x7m8L7AAICIAACf7M7S",
        "file_unique_id": "AQADwBoAAfM7SA"
      }
    }
  ]
}
```
```

LANGUAGE: APIDOC
CODE:
```
## GET /get_sticker_set

### Description
Returns a sticker set.

### Method
GET

### Endpoint
/get_sticker_set

### Parameters
#### Query Parameters
- **name** (string) - Required - Name of the sticker set.

### Response
#### Success Response (200)
- **result** (StickerSet) - On success, a StickerSet object is returned.

#### Response Example
```json
{
  "ok": true,
  "result": {
    "name": "my_sticker_set",
    "title": "My Stickers",
    "sticker_type": "regular",
    "stickers": [
      {
        "width": 512,
        "height": 512,
        "is_animated": false,
        "file_id": "CAACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
        "file_unique_id": "AgICIAACf7M7SA",
        "width": 512,
        "height": 512,
        "is_animated": false,
        "thumb": {
          "width": 320,
          "height": 320,
          "file_id": "TArt_a9z_0x7m8L7AAICIAACf7M7S",
          "file_unique_id": "AQADwBoAAfM7SA"
        }
      }
    ]
  }
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /replace_sticker_in_set

### Description
Replaces sticker in a sticker set.

### Method
POST

### Endpoint
/replace_sticker_in_set

### Parameters
#### Request Body
- **user_id** (integer) - Required - User identifier of the sticker set owner.
- **name** (string) - Required - Sticker set name.
- **old_sticker** (string) - Required - File identifier of the replaced sticker.
- **sticker** (InputSticker) - Required - The added sticker.
- **emoji_list** (array of strings) - Required - One or more emoji corresponding to the sticker.
- **mask_position** (MaskPosition) - Optional - Position where the mask should be placed on the sticker.
- **keywords** (array of strings) - Optional - List of 1-20 keywords for the sticker.

### Request Example
```json
{
  "user_id": 123456789,
  "name": "my_sticker_set",
  "old_sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
  "sticker": {
    "sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
    "emoji_list": ["😀"],
    "keywords": ["happy"]
  }
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /send_sticker

### Description
Use this method to send static. We recommend using a Telegram client to create a sticker set.

### Method
POST

### Endpoint
/send_sticker

### Parameters
#### Request Body
- **chat_id** (integer or string) - Required - Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).
- **sticker** (InputFile or string) - Required - Sticker to send. Pass a file_id as String, or upload a new sticker file.
- **emoji** (string) - Optional - Emoji associated with the sticker. Use this parameter to send the sticker as a reaction to a message.
- **disable_notification** (boolean) - Optional - Sends the message silently. Users will not receive a notification, except for the mentioned users and if the chat is secret.
- **protect_content** (boolean) - Optional - Protects the contents of the sent messages from forwarding and saving.
- **reply_to_message_id** (integer) - Optional - If the message is a reply, text will be sent with a reference to the message.
- **allow_sending_without_reply** (boolean) - Optional - Pass `True`, if the message should be sent even if the specified replied-to message is not found.
- **reply_markup** (InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply) - Optional - Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.

### Request Example
```json
{
  "chat_id": 123456789,
  "sticker": "CAACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S"
}
```

### Response
#### Success Response (200)
- **result** (Message) - On success, the sent Message is returned.

#### Response Example
```json
{
  "ok": true,
  "result": {
    "message_id": 1,
    "chat": {
      "id": 123456789,
      "first_name": "John",
      "last_name": "Doe",
      "type": "private"
    },
    "date": 1678886400,
    "sticker": {
      "width": 512,
      "height": 512,
      "is_animated": false,
      "file_id": "CAACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
      "file_unique_id": "AgICIAACf7M7SA",
      "width": 512,
      "height": 512,
      "is_animated": false,
      "thumb": {
        "width": 320,
        "height": 320,
        "file_id": "TArt_a9z_0x7m8L7AAICIAACf7M7S",
        "file_unique_id": "AQADwBoAAfM7SA"
      }
    }
  }
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /set_custom_emoji_sticker_set_thumbnail

### Description
Use this method to set a custom emoji sticker set thumbnail.

### Method
POST

### Endpoint
/set_custom_emoji_sticker_set_thumbnail

### Parameters
#### Request Body
- **sticker_set_name** (string) - Required - Name of the sticker set.
- **sticker** (InputFile or string) - Required - The sticker.

### Request Example
```json
{
  "sticker_set_name": "my_sticker_set",
  "sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /set_sticker_emoji_list

### Description
Modifies a sticker in a sticker set.

### Method
POST

### Endpoint
/set_sticker_emoji_list

### Parameters
#### Request Body
- **sticker** (string) - Required - File identifier of the sticker.
- **emoji_list** (array of strings) - Required - List of 1-20 emoji corresponding to the sticker.

### Request Example
```json
{
  "sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
  "emoji_list": ["😀", "😄"]
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /set_sticker_keywords

### Description
Modifies a sticker in a sticker set.

### Method
POST

### Endpoint
/set_sticker_keywords

### Parameters
#### Request Body
- **sticker** (string) - Required - File identifier of the sticker.
- **keywords** (array of strings) - Required - List of 1-20 keywords for the sticker.

### Request Example
```json
{
  "sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
  "keywords": ["cool", "awesome"]
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /set_sticker_mask_position

### Description
Modifies a sticker in a sticker set.

### Method
POST

### Endpoint
/set_sticker_mask_position

### Parameters
#### Request Body
- **sticker** (string) - Required - File identifier of the sticker.
- **mask_position** (MaskPosition) - Required - Position where the mask should be placed on the sticker.

### Request Example
```json
{
  "sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
  "mask_position": {
    "point": "eyes",
    "x_shift": 0.5,
    "y_shift": 0.5,
    "scale": 1.0
  }
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /set_sticker_position_in_set

### Description
Modifies the position of a sticker in a sticker set.

### Method
POST

### Endpoint
/set_sticker_position_in_set

### Parameters
#### Request Body
- **sticker** (string) - Required - File identifier of the sticker.
- **position** (integer) - Required - The new position of the sticker in the set (0-99).

### Request Example
```json
{
  "sticker": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
  "position": 0
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /set_sticker_set_thumbnail

### Description
Use this method to set a sticker set thumbnail.

### Method
POST

### Endpoint
/set_sticker_set_thumbnail

### Parameters
#### Request Body
- **sticker_set_name** (string) - Required - Name of the sticker set.
- **thumbnail** (InputFile or string) - Required - The thumbnail of the sticker set.

### Request Example
```json
{
  "sticker_set_name": "my_sticker_set",
  "thumbnail": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /set_sticker_set_title

### Description
Modifies the title of a sticker set.

### Method
POST

### Endpoint
/set_sticker_set_title

### Parameters
#### Request Body
- **sticker_set_name** (string) - Required - Name of the sticker set.
- **title** (string) - Required - New title of the sticker set.

### Request Example
```json
{
  "sticker_set_name": "my_sticker_set",
  "title": "My New Stickers"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /upload_sticker_file

### Description
Use this method to upload a sticker file to be used in a sticker set.

### Method
POST

### Endpoint
/upload_sticker_file

### Parameters
#### Request Body
- **user_id** (integer) - Required - User identifier of the sticker file owner.
- **sticker** (InputFile) - Required - The sticker file to upload.
- **sticker_format** (string) - Required - Format of the uploaded sticker, must be one of "static", "animated", "video".

### Request Example
```json
{
  "user_id": 123456789,
  "sticker": "@/path/to/sticker.png",
  "sticker_format": "static"
}
```

### Response
#### Success Response (200)
- **result** (File) - On success, a File object is returned.

#### Response Example
```json
{
  "ok": true,
  "result": {
    "file_id": "BQACAgIAAxkBAAIE72L8yBfG3-y_1c9c9p2_z3x7m8L7AAICIAACf7M7STf7z3z7x7m8L7AAICIAACf7M7S",
    "file_unique_id": "AgICIAACf7M7SA",
    "file_size": 1024,
    "file_path": "stickers/some_sticker.png"
  }
}
```
```

--------------------------------

TITLE: Bot API 8.1 Support
DESCRIPTION: Aiogram now fully supports Bot API 8.1, including new fields and classes for star transactions and affiliate programs.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_96

LANGUAGE: APIDOC
CODE:
```
## Bot API 8.1 Support

### Description
Full support for Bot API 8.1 has been added. This includes new fields and classes related to star transactions and affiliate program interactions.

### Method
N/A (Feature update)

### Endpoint
N/A

### Parameters
#### Path Parameters
N/A

#### Query Parameters
N/A

#### Request Body
N/A

### Request Example
N/A

### Response
#### Success Response (200)
- **nanostar_amount** (int) - Added to `aiogram.types.star_transaction.StarTransaction`.
- **TransactionPartnerAffiliateProgram** (class) - New class for affiliate commission transactions.
- **AffiliateInfo** (class) - New class added to `aiogram.types.transaction_partner_user.TransactionPartnerUser` to identify affiliate information in transactions.

#### Response Example
N/A
```

--------------------------------

TITLE: MongoStorage implementation
DESCRIPTION: Introduces MongoStorage for persistent storage of bot data, built upon aiomongo. This provides a NoSQL database solution for managing bot states and data.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_77

LANGUAGE: python
CODE:
```
from aiogram.contrib.fsm_storage.mongo import MongoStorage
```

--------------------------------

TITLE: Edit Message Media - Method as Object Usage (Python)
DESCRIPTION: Shows how to use EditMessageMedia as a standalone object, which can be passed to the bot instance. This approach is useful for managing API calls more explicitly. It requires importing the EditMessageMedia class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_media.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_message_media import EditMessageMedia

result: Union[Message, bool] = await bot(EditMessageMedia(...))
```

--------------------------------

TITLE: Refund Star Payment as Bot Method
DESCRIPTION: Demonstrates how to use the refundStarPayment method directly with the bot object. This is a common way to interact with Telegram Bot API methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/refund_star_payment.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.refund_star_payment(...)
```

--------------------------------

TITLE: Send Photo using Bot Method (aiogram)
DESCRIPTION: Demonstrates how to send a photo using the bot.send_photo method. This is a common way to send media files to Telegram users.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_photo.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_photo(...)
```

--------------------------------

TITLE: Send Typing Chat Action with Context Manager
DESCRIPTION: Demonstrates using ChatActionSender.typing as an asynchronous context manager to send the 'typing' chat action. It's useful for indicating that a bot is processing a request and will perform some long calculations before responding.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/chat_action.rst#_snippet_0

LANGUAGE: python
CODE:
```
async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
    # Do something...
    # Perform some long calculations
    await message.answer(result)
```

--------------------------------

TITLE: Set Chat Photo as Method Object (Python)
DESCRIPTION: Demonstrates using SetChatPhoto as a method object, which involves importing the class and passing an instance to the bot. This approach requires specific imports and allows for more explicit method calls. It returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_photo.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_chat_photo import SetChatPhoto

result: bool = await bot(SetChatPhoto(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetChatPhoto

result: bool = await bot(SetChatPhoto(...))
```

--------------------------------

TITLE: Set Chat Description as Method Object
DESCRIPTION: This demonstrates using SetChatDescription as a method object, which can be called with a bot instance or returned in a webhook handler. It requires importing the SetChatDescription class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_description.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_chat_description import SetChatDescription

# Usage with a specific bot
result: bool = await bot(SetChatDescription(...))

# Usage in a webhook handler
return SetChatDescription(...)
```

--------------------------------

TITLE: Utilize aiogram.utils.context
DESCRIPTION: Added more employments and use cases for `aiogram.utils.context`. This utility helps manage contextual information within asynchronous operations.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_122

LANGUAGE: python
CODE:
```
# Example of using context (specific usage depends on implementation):
# from aiogram.utils.context import get_context, set_context
# 
# async def process_update(update):
#     set_context(update.update_id, {'user_id': update.message.from_user.id})
#     # ... process update ...
#     context_data = get_context(update.update_id)
#     print(f"User ID: {context_data['user_id']}")
```

--------------------------------

TITLE: Set Bot's Short Description (Python)
DESCRIPTION: Demonstrates how to set the short description for a Telegram bot using the aiogram library. This method can be called directly on the bot object or as an instantiated method object. It returns a boolean indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_short_description.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_my_short_description(...)
```

LANGUAGE: python
CODE:
```
from aiogram.methods.set_my_short_description import SetMyShortDescription
result: bool = await bot(SetMyShortDescription(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetMyShortDescription
return SetMyShortDescription(...)
```

--------------------------------

TITLE: Fix addStickerToSet method
DESCRIPTION: This commit includes a fix for the `addStickerToSet` method, resolving potential issues that may have occurred when adding stickers to a set.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_52

LANGUAGE: python
CODE:
```
# Fixed addStickerToSet method
```

--------------------------------

TITLE: Accessing Contextual Data in Handlers (Python)
DESCRIPTION: Demonstrates how to access contextual data, such as FSMContext, Bot, and Message, by specifying them as keyword parameters in an aiogram handler function. This is a core mechanism for retrieving state and bot information during message processing.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram import Bot, F, types
from aiogram.dispatcher.dispatcher import Dispatcher
from aiogram.fsm.context import FSMContext

router = Dispatcher()

@router.message(ProfileCompletion.add_photo, F.photo)
async def add_photo(
    message: types.Message, bot: Bot, state: FSMContext
) -> Any:
    ... # do something with photo
```

--------------------------------

TITLE: Improvements to InlineKeyboardMarkup and ReplyKeyboardMarkup in aiogram
DESCRIPTION: This entry indicates improvements made to the `InlineKeyboardMarkup` and `ReplyKeyboardMarkup` objects. These improvements could include better handling of button creation, layout options, or compatibility with new Telegram features.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_107

LANGUAGE: python
CODE:
```
# Conceptual example of improved keyboard creation:
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# 
# markup = InlineKeyboardMarkup()
# markup.add(InlineKeyboardButton("Button 1", callback_data="data1"))
# markup.insert(InlineKeyboardButton("Button 2", callback_data="data2"))
# # Further improvements might involve easier row management or styling.

```

--------------------------------

TITLE: Send Location as Handler Reply (Python)
DESCRIPTION: Illustrates how to return a SendLocation object directly from a webhook handler to reply with a location. This is a concise way to send location data.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_location.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendLocation(...)
```

--------------------------------

TITLE: Reply in Webhook Handler
DESCRIPTION: Shows how to return the SavePreparedInlineMessage object as a reply within a webhook handler. This is a common pattern for responding to incoming webhook requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/save_prepared_inline_message.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SavePreparedInlineMessage(...)
```

--------------------------------

TITLE: Business Account Gift Settings
DESCRIPTION: Methods for managing gift settings and retrieving gift information for a business account.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_47

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/business/account/gift_settings/set

### Description
Changes the privacy settings pertaining to incoming gifts in a managed business account.

### Method
POST

### Endpoint
/api/aiogram/business/account/gift_settings/set

### Parameters
#### Request Body
- **gift_premium_access** (string) - Optional - Specifies access level for gift premium features.

### Request Example
```json
{
  "gift_premium_access": "enabled"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## GET /api/aiogram/business/account/gifts

### Description
Fetches the list of gifts owned by a managed business account.

### Method
GET

### Endpoint
/api/aiogram/business/account/gifts

### Parameters
#### Query Parameters
- **offset** (integer) - Optional - Specifies the offset for pagination.
- **limit** (integer) - Optional - Specifies the maximum number of gifts to return.

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.
- **result** (OwnedGifts) - Information about the owned gifts.

#### Response Example
```json
{
  "ok": true,
  "result": {
    "gifts": [
      {
        "gift": {
          "slug": "unique_gift_1",
          "until_date": 1678886400
        },
        "gift_id": "gift_abc123"
      }
    ],
    "total_count": 1
  }
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/gift/convert_to_stars

### Description
Converts gifts received by a managed business account to Telegram Stars.

### Method
POST

### Endpoint
/api/aiogram/gift/convert_to_stars

### Parameters
#### Request Body
- **gift_id** (string) - Required - Identifier of the gift to convert.

### Request Example
```json
{
  "gift_id": "gift_abc123"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.
- **result** (StarAmount) - The amount of stars received after conversion.

#### Response Example
```json
{
  "ok": true,
  "result": {
    "stars_amount": 5
  }
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/gift/upgrade

### Description
Upgrades regular gifts received by a managed business account to unique gifts.

### Method
POST

### Endpoint
/api/aiogram/gift/upgrade

### Parameters
#### Request Body
- **gift_id** (string) - Required - Identifier of the gift to upgrade.

### Request Example
```json
{
  "gift_id": "gift_def456"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/gift/transfer

### Description
Transfers unique gifts owned by a managed business account.

### Method
POST

### Endpoint
/api/aiogram/gift/transfer

### Parameters
#### Request Body
- **recipient_chat_id** (string) - Required - Identifier of the chat to which the gift will be transferred.
- **gift_id** (string) - Required - Identifier of the unique gift to transfer.

### Request Example
```json
{
  "recipient_chat_id": "123456789",
  "gift_id": "unique_gift_1"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

--------------------------------

TITLE: ConvertGiftToStars as Webhook Reply (Python)
DESCRIPTION: Illustrates how to return the ConvertGiftToStars method directly from a handler when operating in a webhook mode. This is useful for immediate responses.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/convert_gift_to_stars.rst#_snippet_2

LANGUAGE: python
CODE:
```
return ConvertGiftToStars(...)
```

--------------------------------

TITLE: Filter Command Using BotCommand Object
DESCRIPTION: Uses a BotCommand object as the command reference. This allows for providing both the command string and its description directly to the filter.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/command.rst#_snippet_4

LANGUAGE: python
CODE:
```
Command(BotCommand(command="command", description="My awesome command"))
```

--------------------------------

TITLE: Construct Media Groups with MediaGroupBuilder in aiogram
DESCRIPTION: Demonstrates the usage of `MediaGroupBuilder` for constructing media groups, a new feature for organizing multiple media items in Telegram messages. This class simplifies the process of creating media groups.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_177

LANGUAGE: python
CODE:
```
from aiogram.utils.input_media import MediaGroupBuilder

media_group = MediaGroupBuilder()
media_group.add_photo(media="attach://photo1.jpg")
media_group.add_video(media="attach://video1.mp4")

# To send, you would typically pass this to a message sending function:
# await bot.send_media_group(chat_id=chat_id, media=media_group.media, caption=media_group.caption)
```

--------------------------------

TITLE: Usage as Bot Method
DESCRIPTION: Demonstrates how to use the save_prepared_inline_message method directly as a bot method. This involves an asynchronous call to the bot object with the method and its parameters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/save_prepared_inline_message.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: PreparedInlineMessage = await bot.save_prepared_inline_message(...)
```

--------------------------------

TITLE: Close Forum Topic as Bot Method
DESCRIPTION: This snippet demonstrates how to use the `close_forum_topic` method directly with a bot instance. It requires the bot object and appropriate parameters for the forum topic.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_forum_topic.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.close_forum_topic(...)
```

--------------------------------

TITLE: Reply with TransferBusinessAccountStars in Webhook
DESCRIPTION: Illustrates how to return the TransferBusinessAccountStars method as a reply when handling Webhook updates. This is essential for bots that are set up to receive updates via a Webhook server, allowing them to respond to incoming requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_business_account_stars.rst#_snippet_2

LANGUAGE: python
CODE:
```
return TransferBusinessAccountStars(...)
```

--------------------------------

TITLE: Adding More Methods for Data Types in aiogram
DESCRIPTION: This entry indicates that more convenience methods have been added to various data types within aiogram (e.g., `message`, `file`). These methods simplify common operations, making bot development more intuitive.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_110

LANGUAGE: python
CODE:
```
# Example of new convenience methods:
# await message.reply_sticker(sticker='CAACAgIAAxkBAAEj...',
# 
# await file.download(destination='/path/to/save/file.txt')

```

--------------------------------

TITLE: Accessing Bot instance in handlers (aiogram 3.0)
DESCRIPTION: To access the current bot instance within handlers in aiogram 3.0, accept the `bot: Bot` argument instead of using `Bot.get_current()`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_2

LANGUAGE: python
CODE:
```
async def my_handler(message: types.Message, bot: Bot):
    await bot.send_message(message.chat.id, "Hello!")
```

--------------------------------

TITLE: Define ShippingQueryHandler in Python
DESCRIPTION: Demonstrates how to define a custom handler by inheriting from the base ShippingQueryHandler class in aiogram. This requires importing the handler and decorating a class that extends it.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/shipping_query.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.handlers import ShippingQueryHandler

@router.shipping_query()
class MyHandler(ShippingQueryHandler):
    async def handle(self) -> Any: ...
```

--------------------------------

TITLE: Return GiftPremiumSubscription in Webhook Handler
DESCRIPTION: Illustrates how to return an instance of GiftPremiumSubscription from a webhook handler. This is useful for directly responding to incoming webhook requests with this specific method.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/gift_premium_subscription.rst#_snippet_2

LANGUAGE: python
CODE:
```
return GiftPremiumSubscription(...)
```

--------------------------------

TITLE: Forward Message using Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to forward a message using the bot object directly. It returns a Message object upon successful execution. No external dependencies are explicitly mentioned for this usage pattern.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_message.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.forward_message(...)
```

--------------------------------

TITLE: Upgrade Gift Reply in Webhook Handler
DESCRIPTION: Illustrates how to return the `UpgradeGift` object directly from a handler when operating within a webhook context. This is a concise way to respond to Telegram updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/upgrade_gift.rst#_snippet_2

LANGUAGE: python
CODE:
```
return UpgradeGift(...)
```

--------------------------------

TITLE: Call getAvailableGifts as Method Object
DESCRIPTION: This snippet shows how to use GetAvailableGifts as a method object, which can be passed to the bot instance. It includes import statements for the GetAvailableGifts class, both directly and via an alias.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_available_gifts.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.get_available_gifts import GetAvailableGifts

result: Gifts = await bot(GetAvailableGifts(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import GetAvailableGifts

result: Gifts = await bot(GetAvailableGifts(...))
```

--------------------------------

TITLE: Send Message as Bot Method
DESCRIPTION: Demonstrates how to use the sendMessage method directly as a bot method. This is a common way to send messages in aiogram applications.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_message.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_message(...)
```

--------------------------------

TITLE: Send Contact as Method Object in aiogram
DESCRIPTION: Shows how to instantiate and use the SendContact method object with a specific bot instance. This approach allows for more explicit control and integration within handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_contact.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_contact import SendContact

result: Message = await bot(SendContact(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendContact

result: Message = await bot(SendContact(...))
```

--------------------------------

TITLE: Synchronize Theme Class with Telegram Web App (JavaScript)
DESCRIPTION: Automatically sets the CSS class on the document element to match the Telegram Web App's color scheme. This ensures the web app's appearance adapts to the user's Telegram theme.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/examples/web_app/demo.html#_snippet_0

LANGUAGE: javascript
CODE:
```
function setThemeClass() { document.documentElement.className = Telegram.WebApp.colorScheme; }
Telegram.WebApp.onEvent('themeChanged', setThemeClass);
setThemeClass();
```

--------------------------------

TITLE: Bot API 8.0 Support
DESCRIPTION: Aiogram now fully supports Bot API 8.0, introducing new parameters for invoice links, subscription management, and message sharing.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_97

LANGUAGE: APIDOC
CODE:
```
## Bot API 8.0 Support

### Description
Full support for Bot API 8.0 has been added, including enhancements for creating periodic invoices, managing business accounts, and sharing messages.

### Method
N/A (Feature update)

### Endpoint
N/A

### Parameters
#### Path Parameters
N/A

#### Query Parameters
N/A

#### Request Body
- **subscription_period** (int) - Added to `aiogram.methods.create_invoice_link.CreateInvoiceLink` for periodic billing.
- **business_connection_id** (str) - Added to `aiogram.methods.create_invoice_link.CreateInvoiceLink` for creating invoice links on behalf of business accounts.
- **subscription_expiration_date** (datetime) - Added to `aiogram.types.successful_payment.SuccessfulPayment`.
- **is_recurring** (bool) - Added to `aiogram.types.successful_payment.SuccessfulPayment`.
- **is_first_recurring** (bool) - Added to `aiogram.types.successful_payment.SuccessfulPayment`.
- **subscription_period** (int) - Added to `aiogram.types.transaction_partner_user.TransactionPartnerUser`.
- **emoji_status** (str) - The emoji status to set for the user, requires user permission.
- **PreparedInlineMessage** (class) - New class for preparing inline messages.
- **SavePreparedInlineMessage** (method) - Method to save prepared inline messages.
- **ShareMessage** (method) - Method to suggest users send a specific message from a Mini App.
- **Gift** (class) - New class for gift information.
- **Gifts** (class) - New class for a list of available gifts.
- **GetAvailableGifts** (method) - Method to retrieve all available gifts.
- **gift** (Gift) - Added to `aiogram.types.transaction_partner_user.TransactionPartnerUser`.

### Request Example
```json
{
  "subscription_period": 30,
  "business_connection_id": "BUSINESS_CONN_ID",
  "url": "https://example.com/invoice",
  "is_recurring": true
}
```

### Response
#### Success Response (200)
N/A (This is a feature update affecting methods and classes)

#### Response Example
N/A
```

--------------------------------

TITLE: Set Chat Menu Button as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the setChatMenuButton method directly as a bot method in aiogram. It requires a bot instance and returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_menu_button.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_chat_menu_button(...)
```

--------------------------------

TITLE: SetChatStickerSet Usage as Object Method in aiogram
DESCRIPTION: Shows how to instantiate and use the SetChatStickerSet method as a distinct object within aiogram. This approach is useful for more complex scenarios or when passing the method as an argument.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_sticker_set.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_chat_sticker_set import SetChatStickerSet
# alias: from aiogram.methods import SetChatStickerSet

result: bool = await bot(SetChatStickerSet(...))
```

--------------------------------

TITLE: ConvertGiftToStars as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the ConvertGiftToStars method directly with a bot object. This is a common way to interact with the Telegram API through aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/convert_gift_to_stars.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.convert_gift_to_stars(...)
```

--------------------------------

TITLE: Handle Updates with Dispatcher
DESCRIPTION: Shows how to define an update handler for the main Dispatcher. This handler will process all incoming updates that are not caught by more specific handlers in included routers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_21

LANGUAGE: python
CODE:
```
@dispatcher.update()
async def message_handler(update: types.Update) -> Any:
    pass
```

--------------------------------

TITLE: Approve Chat Join Request as Bot Method (Python)
DESCRIPTION: This snippet shows how to use the `approve_chat_join_request` method as a direct bot method. It takes necessary parameters (indicated by '...') and returns a boolean indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/approve_chat_join_request.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.approve_chat_join_request(...)
```

--------------------------------

TITLE: Update typing-extensions for FastAPI compatibility (Python)
DESCRIPTION: Updates the 'typing-extensions' package version range to resolve compatibility issues with 'FastAPI'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_172

LANGUAGE: python
CODE:
```
# Dependency update in setup.py or pyproject.toml:
# typing-extensions: updated version range for FastAPI compatibility

# Example of checking installed version:
# import typing_extensions
# print(typing_extensions.__version__)

```

--------------------------------

TITLE: Call getAvailableGifts as Bot Method
DESCRIPTION: This snippet demonstrates how to call the getAvailableGifts method directly using the bot object. It assumes the bot object is already initialized and the method call includes necessary parameters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/get_available_gifts.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Gifts = await bot.get_available_gifts(...)
```

--------------------------------

TITLE: Create Chat Invite Link Reply in Handler
DESCRIPTION: This snippet illustrates how to return a CreateChatInviteLink object as a reply within a webhook handler. This is useful for directly responding to incoming webhook requests with an invite link creation action.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_chat_invite_link.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods import CreateChatInviteLink

return CreateChatInviteLink(...)
```

--------------------------------

TITLE: Updated Keyboard Builders in aiogram
DESCRIPTION: Highlights improvements to aiogram's keyboard builders, including new methods for easier button integration and keyboard creation. This enhances the flexibility and user-friendliness of building Telegram keyboards.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_179

LANGUAGE: python
CODE:
```
# Example of enhanced keyboard building:
# from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
#
# kb = ReplyKeyboardBuilder()
# kb.button(text="Button 1")
# kb.attach(another_builder)
#
# await message.answer("Keyboard:", reply_markup=kb.as_markup())
```

--------------------------------

TITLE: Support for uvloop compatibility in aiogram
DESCRIPTION: Ensured compatibility with uvloop, an alternative high-performance event loop for asyncio. This allows users to leverage uvloop for potential performance gains.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_121

LANGUAGE: python
CODE:
```
# Ensure uvloop is installed and used:
# import uvloop
# import asyncio
# 
# uvloop.install()
# loop = asyncio.get_event_loop()
# loop.run_until_complete(main())
```

--------------------------------

TITLE: Use copyMessage as a bot method in Python
DESCRIPTION: Demonstrates how to use the copy_message method directly with the bot object to copy a message. This is a straightforward way to utilize the functionality.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_message.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: MessageId = await bot.copy_message(...)
```

--------------------------------

TITLE: Registering handlers for OR condition
DESCRIPTION: This Python code illustrates how to achieve an 'OR' condition for handlers in aiogram by registering the same handler multiple times with different filters. In this case, the handler will execute if the text is exactly 'hi' or if a CommandStart() filter is met.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/index.rst#_snippet_2

LANGUAGE: python
CODE:
```
@router.message(F.text == "hi")
@router.message(CommandStart())
```

--------------------------------

TITLE: Add VerifyUser, VerifyChat, RemoveUserVerification, RemoveChatVerification methods
DESCRIPTION: Introduces new methods to manage user and chat verifications on behalf of organizations. These methods (`VerifyUser`, `VerifyChat`, `RemoveUserVerification`, `RemoveChatVerification`) expand the bot's capabilities in handling verification processes.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_76

LANGUAGE: python
CODE:
```
# Example usage (assuming bot instance exists):
# await bot(VerifyUser(user_id=123, ...))
# await bot(VerifyChat(chat_id=456, ...))
# await bot(RemoveUserVerification(user_id=123, ...))
# await bot(RemoveChatVerification(chat_id=456, ...))
```

--------------------------------

TITLE: Delete Webhook using DeleteWebhook Object
DESCRIPTION: This snippet shows how to instantiate and use the DeleteWebhook method as an object. It requires importing the DeleteWebhook class and can be called with a specific bot instance. This method is useful for more explicit control over webhook management.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_webhook.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_webhook import DeleteWebhook

result: bool = await bot(DeleteWebhook(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import DeleteWebhook

result: bool = await bot(DeleteWebhook(...))
```

--------------------------------

TITLE: Leave Chat as Object (Python)
DESCRIPTION: Illustrates using the LeaveChat method as a distinct object, often within a bot's dispatching mechanism or when interacting with the bot instance directly. It requires importing the LeaveChat class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/leave_chat.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.leave_chat import LeaveChat
# or alias: from aiogram.methods import LeaveChat

result: bool = await bot(LeaveChat(...))
```

--------------------------------

TITLE: Edit Chat Subscription Invite Link as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the edit_chat_subscription_invite_link method directly with a bot object. Requires the bot object and relevant parameters for the invite link.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_subscription_invite_link.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: ChatInviteLink = await bot.edit_chat_subscription_invite_link(...)
```

--------------------------------

TITLE: Verify Chat as Webhook Reply
DESCRIPTION: This snippet illustrates how to return VerifyChat directly as a reply when handling Webhooks. This is useful for responding to incoming webhook requests with chat verification.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/verify_chat.rst#_snippet_2

LANGUAGE: python
CODE:
```
return VerifyChat(...)
```

--------------------------------

TITLE: Added business_connection_id to CreateInvoiceLink
DESCRIPTION: The `CreateInvoiceLink` method has been updated to include the `business_connection_id` parameter. This enables the creation of invoice links on behalf of business accounts, facilitating business-specific payment flows.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_86

LANGUAGE: python
CODE:
```
from aiogram.methods import CreateInvoiceLink

# Example usage:
create_link_method = CreateInvoiceLink(
    title='Business Service',
    // ... other parameters
    business_connection_id='abc123xyz'
)
```

--------------------------------

TITLE: Set Sticker Emoji List as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the `set_sticker_emoji_list` method directly with a bot instance. This is a common way to send API requests in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_emoji_list.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_sticker_emoji_list(...)
```

--------------------------------

TITLE: Return SendPhoto from Handler (aiogram)
DESCRIPTION: Illustrates how to return a SendPhoto object directly from a handler function. This is a concise way to send a photo in response to a webhook.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_photo.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendPhoto(...)
```

--------------------------------

TITLE: SetStickerSetThumbnail as Webhook Reply
DESCRIPTION: Illustrates how to return a SetStickerSetThumbnail object as a reply when handling Webhook requests. This allows the bot to respond to incoming updates by setting sticker set thumbnails.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_thumbnail.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetStickerSetThumbnail(...)
```

--------------------------------

TITLE: Reply with Add Sticker to Set in Webhook Handler (aiogram)
DESCRIPTION: Illustrates how to return an `AddStickerToSet` object directly from a Webhook handler. This is useful for processing incoming updates and formulating API responses, such as adding a sticker to a set.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/add_sticker_to_set.rst#_snippet_2

LANGUAGE: python
CODE:
```
return AddStickerToSet(...)
```

--------------------------------

TITLE: Use SetChatPermissions as a Method Object in Aiogram
DESCRIPTION: This snippet shows how to instantiate SetChatPermissions as a method object and use it with the bot. It requires importing the SetChatPermissions class and passing it to the bot instance.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_permissions.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_chat_permissions import SetChatPermissions

result: bool = await bot(SetChatPermissions(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetChatPermissions

result: bool = await bot(SetChatPermissions(...))
```

--------------------------------

TITLE: Use TransferGift as an Object
DESCRIPTION: Shows how to import and use TransferGift as a method object, either directly or with an alias. This provides flexibility in how the method is called.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_gift.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.transfer_gift import TransferGift
```

LANGUAGE: python
CODE:
```
from aiogram.methods import TransferGift
```

LANGUAGE: python
CODE:
```
result: bool = await bot(TransferGift(...))
```

--------------------------------

TITLE: Send Document via Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to send a document using the sendDocument method directly as a bot method. It requires an active bot instance and the necessary parameters for sending a document.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_document.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_document(...)
```

--------------------------------

TITLE: Reply Keyboard Builder
DESCRIPTION: Dynamically generates reply keyboards, offering features similar to inline keyboards but for standard reply buttons. Does not support cross-type attachment.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_10

LANGUAGE: APIDOC
CODE:
```
## Reply Keyboard Builder Usage

### Description
Dynamically generates reply keyboards with customizable button layouts. Offers features similar to inline keyboards but for standard reply buttons. Note that reply keyboard builders cannot be attached to inline keyboard builders and vice versa.

### Method
N/A (This is a class for building markups, not a direct API endpoint)

### Endpoint
N/A

### Parameters
#### Class Initialization
- **`ReplyKeyboardBuilder()`**: Initializes a new ReplyKeyboardBuilder instance.

#### Button Creation (`button` method)
- **`text`** (str) - Required - The text displayed on the button.
- **`request_contact`** (Optional[bool]) - Optional - Request user's contact.
- **`request_location`** (Optional[bool]) - Optional - Request user's location.
- **`request_poll`** (Optional[KeyboardButtonPollType]) - Optional - Request a poll of a specific type.

#### Markup Manipulation
- **`adjust(*args)`**: Adjusts the button layout into a grid. Each argument specifies the number of buttons per row.
- **`attach(builder)`**: Attaches another KeyboardBuilder instance to the current one.
- **`from_markup(markup)`**: Creates a builder from an existing markup.

### Request Example
```python
from aiogram.utils.keyboard import ReplyKeyboardBuilder

builder = ReplyKeyboardBuilder()

builder.button(text="Send Contact", request_contact=True)
builder.button(text="Send Location", request_location=True)
builder.button(text="Request Poll")

builder.adjust(2, 1)

# To attach another builder:
# another_builder = ReplyKeyboardBuilder(...)
# builder.attach(another_builder)

# To export markup:
# markup = builder.as_markup()
```

### Response
#### Success Response
- **`as_markup()`** -> `aiogram.types.reply_keyboard_markup.ReplyKeyboardMarkup`: The constructed reply keyboard markup.
```

--------------------------------

TITLE: Paid Media and Transaction Handling
DESCRIPTION: Features related to sending paid media and handling transactions, including new parameters and fields for paid media and user transactions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_130

LANGUAGE: APIDOC
CODE:
```
## POST /api/media/paid

### Description
This endpoint supports sending paid media to any chat and includes parameters for business accounts. It also covers fields related to transactions involving paid media.

### Method
POST

### Endpoint
/api/media/paid

### Parameters
#### Path Parameters
- **chat_id** (integer) - Required - The ID of the chat to send the paid media to.

#### Query Parameters
- **business_connection_id** (string) - Optional - Identifier of the business connection for sending on behalf of a business account.

#### Request Body
- **paid_media** (object) - The paid media to be sent.
  - **type** (string) - Required - The type of paid media (e.g., 'photo', 'video').
  - **photo_list** (array) - Optional - List of photos if type is 'photo'.
    - **file_id** (string) - Required - The file ID of the photo.
  - **video_list** (array) - Optional - List of videos if type is 'video'.
    - **file_id** (string) - Required - The file ID of the video.
- **transaction_partner_user** (object) - Information about the user in a paid media transaction.
  - **user** (object) - Details of the user.
    - **id** (integer) - Unique identifier for the user.
    - **is_bot** (boolean) - True if the user is a bot.
    - **first_name** (string) - First name of the user.
    - **username** (string) - Username of the user.

### Request Example
```json
{
  "paid_media": {
    "type": "photo",
    "photo_list": [
      {
        "file_id": "AgACAgIAAxkBAAIB_mX8v514Jp05z4P4M4fM3yK8qK26AAICxTEbX5t5S45g9P8c7b21jQADAQAB"
      }
    ]
  },
  "transaction_partner_user": {
    "user": {
      "id": 1234567890,
      "is_bot": false,
      "first_name": "Alice",
      "username": "alice_wonder"
    }
  }
}
```

### Response
#### Success Response (200)
- **message_id** (integer) - The ID of the sent message.
- **chat** (object) - Information about the chat where the message was sent.

#### Response Example
```json
{
  "message_id": 101,
  "chat": {
    "id": 123456789,
    "type": "private"
  }
}
```
```

--------------------------------

TITLE: Request Logging Middleware Implementation - Python
DESCRIPTION: Provides the implementation details for the RequestLogging middleware found within aiogram. It is a class-based middleware designed to log outgoing client requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/middleware.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram import Bot
from aiogram.client.session.base import Response
from aiogram.client.session.middlewares.base import NextRequestMiddlewareType, RequestMiddleware
from aiogram.methods import GetUpdates
from typing import Any, List, Optional, TypeVar


class RequestLogging(RequestMiddleware[Any]):
    def __init__(
        self, ignore_methods: Optional[List[Any]] = None
    ) -> None:
        self.ignore_methods = ignore_methods

    async def __call__(
        self, **kwargs: Any
    ) -> Response[Any]:
        bot: Bot = kwargs.get("bot")
        method = kwargs.get("method")
        if method and self.ignore_methods and type(method) in self.ignore_methods:
            return await super().__call__(**kwargs)

        request = method.to_request()
        response = await super().__call__(**kwargs)

        request_info = f"{request.method} {request.url}"
        if response.ok:
            self.logger.debug("%s response: %s", request_info, response.result)
        else:
            self.logger.error(
                "%s error: %s", request_info, response.error_code
            )
        return response

```

--------------------------------

TITLE: Added EditUserStarSubscription method
DESCRIPTION: A new method, `EditUserStarSubscription`, has been added to manage user star subscriptions. This method allows bots to modify the subscription status or details for users concerning star subscriptions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_88

LANGUAGE: python
CODE:
```
from aiogram.methods import EditUserStarSubscription

# Example usage:
edit_subscription = EditUserStarSubscription(user_id=12345, star_subscription_id='sub_abc', new_period='P3M')
```

--------------------------------

TITLE: Add supports_streaming argument to answer_video
DESCRIPTION: The `answer_video` method now includes the `supports_streaming` argument. This allows developers to specify whether the video supports streaming when sending video messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_28

LANGUAGE: python
CODE:
```
# Added missing "supports_streaming" argument to answer_video method (#462)
```

--------------------------------

TITLE: Message.answer* methods
DESCRIPTION: Introduces `answer*` methods to the Message object, providing convenient ways to reply to messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_82

LANGUAGE: python
CODE:
```
await message.answer('Hello!')
```

LANGUAGE: python
CODE:
```
await message.answer_photo(photo='...') 
```

--------------------------------

TITLE: Process User's Name in FSM (Python)
DESCRIPTION: Processes the user's name input, saves it to the FSM state storage, and transitions the user to the next state ('language').

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_2

LANGUAGE: python
CODE:
```
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message):
    await state.update_data(name=message.text)
    await Form.next()
    await message.reply('Nice to meet you! What is your favorite programming language?')

```

--------------------------------

TITLE: Set Default Parse Mode (HTML) for all Bot Requests
DESCRIPTION: Demonstrates how to initialize a bot with a default parse mode set to HTML. This eliminates the need to specify `parse_mode=ParseMode.HTML` for every `send_message` call.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/defaults.rst#_snippet_0

LANGUAGE: python
CODE:
```
bot = Bot(
    token=...,
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML,
    )
)
```

--------------------------------

TITLE: Python: Fix Dispatcher Instance Creation for Python 3.8-3.9
DESCRIPTION: Addresses an incompatibility issue with Python 3.8-3.9 when creating a Dispatcher instance outside of a coroutine. Provides a corrected code structure using asyncio.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_196

LANGUAGE: python
CODE:
```
.. code-block:: python

    dp = Dispatcher()

    def main():
        ...
        dp.run_polling(...)

    main()

    But if you change it like this it should works as well:

    .. code-block:: python

        router = Router()

        async def main():
            dp = Dispatcher()
            dp.include_router(router)
            ...
            dp.start_polling(...)

        asyncio.run(main())
```

--------------------------------

TITLE: Return SendAudio from Webhook Handler (Python)
DESCRIPTION: Illustrates how to return a SendAudio object directly from a webhook handler to send an audio message. This is a common pattern for processing incoming updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_audio.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendAudio(...)
```

--------------------------------

TITLE: Use CloseGeneralForumTopic as a Bot Object Method
DESCRIPTION: Illustrates using the CloseGeneralForumTopic method as a distinct object passed to the bot instance. This approach requires importing the method first. It returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_general_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.close_general_forum_topic import CloseGeneralForumTopic

result: bool = await bot(CloseGeneralForumTopic(...))
```

--------------------------------

TITLE: Business Account Star Balance
DESCRIPTION: Methods for checking and transferring Telegram Stars for a business account.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_48

LANGUAGE: APIDOC
CODE:
```
## GET /api/aiogram/business/account/star_balance

### Description
Checks the current Telegram Star balance of a managed business account.

### Method
GET

### Endpoint
/api/aiogram/business/account/star_balance

### Parameters
(No parameters required)

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.
- **result** (StarAmount) - The current star balance of the business account.

#### Response Example
```json
{
  "ok": true,
  "result": {
    "stars_amount": 100
  }
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/business/account/stars/transfer

### Description
Transfers Telegram Stars from the balance of a managed business account to the bot's own balance for withdrawal.

### Method
POST

### Endpoint
/api/aiogram/business/account/stars/transfer

### Parameters
#### Request Body
- **stars_amount** (integer) - Required - The number of stars to transfer.

### Request Example
```json
{
  "stars_amount": 50
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

--------------------------------

TITLE: Use TransferGift as Bot Method
DESCRIPTION: Demonstrates how to use the TransferGift method directly with the bot object. This is a common pattern for sending gift transfers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_gift.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.transfer_gift(...)
```

--------------------------------

TITLE: Download File Directly using File ID or Downloadable Object
DESCRIPTION: A convenient method to download files using either a file_id or a Downloadable object (which has a file_id attribute). It supports downloading to disk or a binary I/O object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#_snippet_5

LANGUAGE: python
CODE:
```
document = message.document
await bot.download(document)
```

--------------------------------

TITLE: Send Checklist Reply in Webhook Handler
DESCRIPTION: Illustrates how to return a SendChecklist object directly from a webhook handler. This is a common pattern for responding to incoming webhook updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_checklist.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendChecklist(...)
```

--------------------------------

TITLE: Input Profile Photo for Business Accounts in aiogram
DESCRIPTION: Introduces the `InputProfilePhoto` class, which describes a profile photo to be set for a business account. This class is used in conjunction with profile photo management methods in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_29

LANGUAGE: Python
CODE:
```
from aiogram.types.input_profile_photo import InputProfilePhoto
```

--------------------------------

TITLE: Set Business Account Username as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the setBusinessAccountUsername method directly with a bot instance. This is a common pattern for interacting with the Telegram Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_username.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_business_account_username(...)
```

--------------------------------

TITLE: Delete Bot Commands as Direct Method Call (Python)
DESCRIPTION: Shows how to call the DeleteMyCommands method as a standalone object, often used when interacting with the bot instance directly or within specific handler contexts. Requires importing the DeleteMyCommands class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_my_commands.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_my_commands import DeleteMyCommands
result: bool = await bot(DeleteMyCommands(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import DeleteMyCommands
result: bool = await bot(DeleteMyCommands(...))
```

--------------------------------

TITLE: Set Sticker Position in Set (Bot Method)
DESCRIPTION: Demonstrates how to use the SetStickerPositionInSet method directly with a bot instance. This is a common way to interact with the Telegram Bot API via aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_position_in_set.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_sticker_position_in_set(...)
```

--------------------------------

TITLE: Code Readability Improvement
DESCRIPTION: Changes made to enhance code readability and consistency, such as using `asyncio.to_thread`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_60

LANGUAGE: APIDOC
CODE:
```
## Code Readability Improvement

### Description
Improvements made to the codebase for better readability and consistency.

### Change:
- Replaced `loop.run_in_executor` with `asyncio.to_thread` for improved code clarity.
```

--------------------------------

TITLE: Instantiate and Use DeclineChatJoinRequest Method Object
DESCRIPTION: This section shows how to import and use DeclineChatJoinRequest as a method object. It can be called with a bot instance or returned from a webhook handler. This approach offers more flexibility in how the method is invoked.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/decline_chat_join_request.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.decline_chat_join_request import DeclineChatJoinRequest

# ...

result: bool = await bot(DeclineChatJoinRequest(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import DeclineChatJoinRequest

# ...

return DeclineChatJoinRequest(...)
```

--------------------------------

TITLE: Return createInvoiceLink in Webhook Handler
DESCRIPTION: Illustrates how to return a CreateInvoiceLink object directly from a webhook handler. This is useful when processing incoming updates and responding with specific actions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/create_invoice_link.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.create_invoice_link import CreateInvoiceLink

return CreateInvoiceLink(...)
```

--------------------------------

TITLE: Decline Suggested Post Usage as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the declineSuggestedPost method as a direct bot method. It takes arguments represented by '...' and returns a boolean result.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/decline_suggested_post.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.decline_suggested_post(...)
```

--------------------------------

TITLE: ChosenInlineResultHandler Usage in aiogram
DESCRIPTION: Demonstrates the simple usage of the ChosenInlineResultHandler by subclassing it and defining an asynchronous handle method within a router. It requires importing the handler from aiogram.handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/chosen_inline_result.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.handlers import ChosenInlineResultHandler

@router.chosen_inline_result()
class MyHandler(ChosenInlineResultHandler):
    async def handle(self) -> Any: ...
```

--------------------------------

TITLE: Send Media Group using Bot Method (Python)
DESCRIPTION: Demonstrates how to send a media group using the bot's send_media_group method. This is a common way to send media in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_media_group.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: list[Message] = await bot.send_media_group(...)
```

--------------------------------

TITLE: Collect Commands from Router and Handlers (Python)
DESCRIPTION: A utility function to recursively collect registered commands from a router and its sub-routers. It extracts commands and their associated documentation from handlers that have the 'commands' flag set.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#_snippet_5

LANGUAGE: python
CODE:
```
from typing import Generator, Tuple, Any
from aiogram import Router

def collect_commands(router: Router) -> Generator[Tuple[Command, str], None, None]:
    for handler in router.message.handlers:
        if "commands" not in handler.flags:  # ignore all handler without commands
            continue
        # the Command filter adds the flag with list of commands attached to the handler
        for command in handler.flags["commands"]:
            yield command, handler.callback.__doc__ or ""
    # Recursively extract commands from nested routers
    for sub_router in router.sub_routers:
        yield from collect_commands(sub_router)
```

--------------------------------

TITLE: Using contextvars for Context Management in aiogram
DESCRIPTION: This snippet highlights the shift in aiogram to use Python's built-in `contextvars` for managing context, replacing the older `aiogram.utils.context`. This change aligns with modern Python practices for handling context-local data, especially in asynchronous applications.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_90

LANGUAGE: python
CODE:
```
import contextvars

# Example of using contextvars
# request_id_var = contextvars.ContextVar('request_id', default=None)
# 
# async def process_request():
#     token = request_id_var.set(123)
#     # ... do work ...
#     request_id_var.reset(token)

```

--------------------------------

TITLE: Set Webhook as Webhook Handler Reply (Python)
DESCRIPTION: Illustrates returning the SetWebhook object from a webhook handler. This allows the webhook handler to dynamically configure or reconfigure the webhook.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_webhook.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.set_webhook import SetWebhook

return SetWebhook(...)
```

--------------------------------

TITLE: Set Bot Commands in Webhook Handler (aiogram)
DESCRIPTION: Illustrates returning the SetMyCommands object as a reply within a Webhook handler in aiogram. This is a common pattern for responding to webhook events.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_commands.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetMyCommands(...)
```

--------------------------------

TITLE: Hide General Forum Topic using Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to call the hide_general_forum_topic method directly on a bot instance. It requires an awaitable bot object and the HideGeneralForumTopic method with its parameters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/hide_general_forum_topic.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.hide_general_forum_topic(...)
```

--------------------------------

TITLE: Add PaidMedia classes in aiogram
DESCRIPTION: Introduces three new classes for handling paid media: 'PaidMedia', 'PaidMediaInfo', and 'PaidMediaPreview'. These classes are for managing and displaying paid media content. Requires Bot API 7.6.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_124

LANGUAGE: python
CODE:
```
aiogram.types.paid_media.PaidMedia(...)
```

LANGUAGE: python
CODE:
```
aiogram.types.paid_media_info.PaidMediaInfo(...)
```

LANGUAGE: python
CODE:
```
aiogram.types.paid_media_preview.PaidMediaPreview(...)
```

--------------------------------

TITLE: Injecting Custom Dependencies into Dispatcher (Python)
DESCRIPTION: Illustrates how to inject custom dependencies directly into the Dispatcher during its initialization. These dependencies can then be accessed throughout the application's context. This method is straightforward for providing shared resources or configurations.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dependency_injection.rst#_snippet_1

LANGUAGE: python
CODE:
```
async def main() -> None:
    dp = Dispatcher(..., foo=42)
    return await dp.start_polling(
        bot, bar="Bazz"
    )
```

--------------------------------

TITLE: Implementing CallbackData Factory in aiogram
DESCRIPTION: This snippet showcases the implementation of the CallbackData factory, a feature designed to streamline the creation and parsing of callback data for inline keyboards. It likely involves defining a class that inherits from CallbackData and using it to generate callback data strings.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_84

LANGUAGE: python
CODE:
```
from aiogram.utils.callback_data import CallbackData

post_callback = CallbackData("post", "id", "action")

# Example usage:
# query.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton("Delete", callback_data=post_callback.new(id=100, action="delete")),
#      InlineKeyboardButton("Edit", callback_data=post_callback.new(id=100, action="edit")),
# ]
# ]))

```

--------------------------------

TITLE: Message Copying and Answering in aiogram
DESCRIPTION: Addresses issues with copying and forwarding messages, specifically in the `Message.answer(...)` and `Message.copy_to(...)` methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_210

LANGUAGE: python
CODE:
```
Message.answer()
Message.copy_to()
```

--------------------------------

TITLE: Unpin Chat Message as Object Method (aiogram)
DESCRIPTION: Shows how to instantiate `UnpinChatMessage` as an object and pass it to the bot instance for execution. This approach is useful for more complex scenarios or when working with specific bot instances.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_chat_message.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.unpin_chat_message import UnpinChatMessage

result: bool = await bot(UnpinChatMessage(...))
```

--------------------------------

TITLE: Set Sticker Mask Position Method Object
DESCRIPTION: This snippet shows how to import and use `SetStickerMaskPosition` as a method object. It can be called directly with the bot instance or returned from a webhook handler. It requires importing the class from `aiogram.methods.set_sticker_mask_position` or its alias.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_mask_position.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_sticker_mask_position import SetStickerMaskPosition
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetStickerMaskPosition
```

LANGUAGE: python
CODE:
```
result: bool = await bot(SetStickerMaskPosition(...))
```

LANGUAGE: python
CODE:
```
return SetStickerMaskPosition(...)
```

--------------------------------

TITLE: Define Custom Middleware with Decorator - Python
DESCRIPTION: Shows how to define a custom client session middleware using a decorator. The middleware function receives the next request, bot instance, and method, allowing modification of requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/session/middleware.rst#_snippet_1

LANGUAGE: python
CODE:
```
@bot.session.middleware()
async def my_middleware(
    make_request: NextRequestMiddlewareType[TelegramType],
    bot: "Bot",
    method: TelegramMethod[TelegramType],
) -> Response[TelegramType]:
    # do something with request
    return await make_request(bot, method)
```

--------------------------------

TITLE: TelegramMigrateToChat Error Handling
DESCRIPTION: Correction in passing error messages for TelegramMigrateToChat.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_20

LANGUAGE: APIDOC
CODE:
```
## TelegramMigrateToChat Error Message Fix

### Description
Ensured that error messages are correctly passed in the `TelegramMigrateToChat` context.

### Details
This fix improves the error reporting mechanism for migration events.

### Example
No direct API endpoint for this, but it affects the internal error handling of migration operations.
```

--------------------------------

TITLE: Reopen General Forum Topic as Bot Method
DESCRIPTION: This snippet shows how to use the reopenGeneralForumTopic method directly as a bot method in aiogram. It returns a boolean value indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_general_forum_topic.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.reopen_general_forum_topic(...)
```

--------------------------------

TITLE: Set Game Score as Object Method in aiogram
DESCRIPTION: Shows how to use the SetGameScore method as an object. This involves importing the method and then calling it with a bot instance. This approach offers flexibility in how the method is invoked.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_game_score.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_game_score import SetGameScore

result: Union[Message, bool] = await bot(SetGameScore(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetGameScore

result: Union[Message, bool] = await bot(SetGameScore(...))
```

--------------------------------

TITLE: Aiogram Features and Updates
DESCRIPTION: This section details new functionalities and enhancements in Aiogram, including storage improvements, handler inheritance, and Bot API 7.11 support.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_109

LANGUAGE: APIDOC
CODE:
```
## Aiogram Features and Updates

### Description
This section details new functionalities and enhancements in Aiogram, including storage improvements, handler inheritance, and Bot API 7.11 support.

### Features:

- Added `get_value` function to built-in storage implementations, `FSMContext`, and `SceneWizard`.
- Enhanced handler and action inheritance in `Scenes`, allowing for dynamic rebuilding and overriding.
- Full support for Bot API 7.11, including:
  - `aiogram.types.copy_text_button.CopyTextButton` class and `copy_text` field in `InlineKeyboardButton`.
  - `allow_paid_broadcast` parameter for various message sending methods.
  - `aiogram.types.transaction_partner_telegram_api.TransactionPartnerTelegramApi` class for paid broadcast transactions.
  - `edit_message_media` method for adding media to existing text messages.
  - Support for hashtag and cashtag entities with chat usernames.

### Bugfixes:

- Fixed PytestDeprecationWarning related to pytest-asyncio.
- Corrected customized serialization in `aiogram.filters.callback_data.CallbackData` factory, ensuring UUIDs are 32 bytes without separators.
```

--------------------------------

TITLE: Delete Sticker from Set - Method Object (aiogram)
DESCRIPTION: Shows how to instantiate and use the DeleteStickerFromSet method object with a bot instance. This approach allows for more explicit method calls. Imports are provided for convenience.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_from_set.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_sticker_from_set import DeleteStickerFromSet

result: bool = await bot(DeleteStickerFromSet(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import DeleteStickerFromSet

result: bool = await bot(DeleteStickerFromSet(...))
```

--------------------------------

TITLE: Send Gift - aiogram Method as Object
DESCRIPTION: Using SendGift as an object with a specific bot. This involves importing the SendGift class and calling it with the bot instance. It returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_gift.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_gift import SendGift

result: bool = await bot(SendGift(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendGift

result: bool = await bot(SendGift(...))
```

--------------------------------

TITLE: Pinning and Unpinning Chat Messages
DESCRIPTION: APIs for pinning and unpinning chat messages, with support for business accounts via the 'business_connection_id' parameter.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_133

LANGUAGE: APIDOC
CODE:
```
## POST /api/chat/message/pin

### Description
This endpoint allows bots to pin or unpin messages in a chat. It supports managing pinned messages on behalf of a business account using the `business_connection_id` parameter.

### Method
POST

### Endpoint
/api/chat/message/pin

### Parameters
#### Path Parameters
- **chat_id** (integer) - Required - The ID of the chat containing the message.
- **message_id** (integer) - Required - The ID of the message to pin or unpin.

#### Query Parameters
- **business_connection_id** (string) - Optional - Identifier of the business connection for managing messages on behalf of a business account.
- **action** (string) - Required - Action to perform: 'pin' or 'unpin'.

#### Request Body
None

### Request Example
```
POST /api/chat/message/pin?chat_id=123456789&message_id=101&action=pin&business_connection_id=conn_12345
```

### Response
#### Success Response (200)
- **status** (boolean) - True if the operation was successful.
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "status": true,
  "message": "Message pinned successfully."
}
```
```

--------------------------------

TITLE: Pin Chat Message - Bot Method Usage
DESCRIPTION: Demonstrates how to use the pinChatMessage method directly as a bot method. It returns a boolean value indicating success or failure. This method requires a bot instance and relevant message/chat identifiers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/pin_chat_message.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.pin_chat_message(...)
```

--------------------------------

TITLE: Reopen General Forum Topic as Webhook Reply
DESCRIPTION: This snippet illustrates how to return the ReopenGeneralForumTopic method as a reply within a Webhook handler in aiogram. This is typically used for asynchronous responses.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_general_forum_topic.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.reopen_general_forum_topic import ReopenGeneralForumTopic

return ReopenGeneralForumTopic(...)
```

--------------------------------

TITLE: Method as Object in aiogram
DESCRIPTION: Shows how to import and use EditGeneralForumTopic as a method object in aiogram. This approach allows for more explicit control and is useful when building complex sequences of API calls.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_general_forum_topic.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_general_forum_topic import EditGeneralForumTopic
result: bool = await bot(EditGeneralForumTopic(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import EditGeneralForumTopic
result: bool = await bot(EditGeneralForumTopic(...))
```

--------------------------------

TITLE: User Mention Formatting in aiogram
DESCRIPTION: Adds methods to the `User` class for generating user mentions formatted in Markdown and HTML, useful for creating user-friendly messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_208

LANGUAGE: python
CODE:
```
User.mention_markdown()
User.mention_html()
```

--------------------------------

TITLE: Add get_value to storage, FSMContext, and SceneWizard (Python)
DESCRIPTION: Adds the `get_value` function to built-in storage implementations, FSMContext, and SceneWizard. This enhances data retrieval capabilities within the aiogram framework.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_100

LANGUAGE: python
CODE:
```
def get_value(self, key: str, default: Any = None) -> Any:
    """Get value from storage.
    """
    return self.storage.get_value(key, default=default)
```

--------------------------------

TITLE: Define and Include Routers in Aiogram
DESCRIPTION: Demonstrates how to define routers and include them within another router. This is a fundamental step in structuring Aiogram applications by modularizing handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_20

LANGUAGE: python
CODE:
```
from aiogram import Router, types
from typing import Any

router2 = Router()

@router2.message()
def some_handler_for_router2(message: types.Message):
    pass


router1 = Router()
router1.include_router(router2)
```

--------------------------------

TITLE: Approve Chat Join Request as Method Object (Python)
DESCRIPTION: Demonstrates using `ApproveChatJoinRequest` as a method object, which can be called directly with the bot instance or returned from a webhook handler. It requires importing the method class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/approve_chat_join_request.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.approve_chat_join_request import ApproveChatJoinRequest

result: bool = await bot(ApproveChatJoinRequest(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import ApproveChatJoinRequest

return ApproveChatJoinRequest(...)
```

--------------------------------

TITLE: Message Editing and Forwarding Methods in aiogram
DESCRIPTION: Adds several methods to the `Message` class for editing media, live locations, and forwarding messages. Also includes methods for pinning and unpinning messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_207

LANGUAGE: python
CODE:
```
Message.forward()
Message.edit_media()
Message.edit_live_location()
Message.stop_live_location()
Message.pin()
Message.unpin()
```

--------------------------------

TITLE: Message API Shortcuts Update
DESCRIPTION: The `business_connection_id` attribute has been integrated into various message manipulation API method shortcuts.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_99

LANGUAGE: APIDOC
CODE:
```
## Message API Shortcuts Update

### Description
The `business_connection_id` attribute is now integrated into various message manipulation method shortcuts within the Aiogram library.

### Method
N/A (API shortcut update)

### Endpoint
N/A

### Parameters
N/A

### Request Example
N/A

### Response
#### Success Response (200)
N/A

#### Response Example
N/A
```

--------------------------------

TITLE: Use EditMessageLiveLocation as Method Object in Python
DESCRIPTION: Shows how to instantiate and use EditMessageLiveLocation as a method object. This can be done directly with the bot instance or with a specific bot. The method is imported from aiogram.methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_live_location.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_message_live_location import EditMessageLiveLocation

# With specific bot
result: Union[Message, bool] = await bot(EditMessageLiveLocation(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import EditMessageLiveLocation

result: Union[Message, bool] = await bot(EditMessageLiveLocation(...))
```

--------------------------------

TITLE: Main Button Control and Data Display
DESCRIPTION: Controls the visibility and text of the Telegram Web App Main Button. It also displays initial unsafe data and theme parameters. Includes a toggle function for the main button.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/examples/web_app/demo.html#_snippet_7

LANGUAGE: javascript
CODE:
```
$('#main_btn').toggle(!!initDataUnsafe.query_id);
$('#with_webview_btn').toggle(!!initDataUnsafe.query_id && !initDataUnsafe.receiver);
$('#webview_data').html(JSON.stringify(initDataUnsafe, null, 2));
$('#theme_data').html(JSON.stringify(Telegram.WebApp.themeParams, null, 2));
$('#regular_link').attr('href', $('#regular_link').attr('href') + location.hash);
$('#text_field').focus();

Telegram.WebApp.MainButton
    .setText('CLOSE WEBVIEW')
    .show()
    .onClick(function () {
        webviewClose();
    });

function toggleMainButton(el) {
    var mainButton = Telegram.WebApp.MainButton;
    if (mainButton.isVisible) {
        mainButton.hide();
        el.innerHTML = 'Show Main Button';
    } else {
        mainButton.show();
        el.innerHTML = 'Hide Main Button';
    }
}
```

--------------------------------

TITLE: Filter Command by Regexp Pattern
DESCRIPTION: Handles commands that match a regular expression pattern. This allows for more flexible command matching, such as capturing numerical arguments.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/command.rst#_snippet_1

LANGUAGE: python
CODE:
```
Command(re.compile(r"item_(\d+)"))
```

--------------------------------

TITLE: Giveaway and Chat Boost Features
DESCRIPTION: Updates related to giveaways and chat boosts, including new classes and fields for managing these features.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_126

LANGUAGE: APIDOC
CODE:
```
## POST /api/giveaway

### Description
This endpoint facilitates the management of giveaways and related features, including the ability to check if a giveaway is star-based and retrieve giveaway winners.

### Method
POST

### Endpoint
/api/giveaway

### Parameters
#### Path Parameters
None

#### Query Parameters
None

#### Request Body
- **giveaway** (object) - Represents a giveaway event.
  - **prize_description** (string) - Description of the prize.
  - **user_limit** (integer) - Maximum number of users allowed to participate.
  - **winners_selection_date** (string) - Date when winners will be selected.
  - **is_publiclyVisible** (boolean) - Whether the giveaway is publicly visible.
  - **last_updated_date** (string) - Date when the giveaway was last updated.
  - **creation_date** (string) - Date when the giveaway was created.
  - **winners_count** (integer) - Number of winners for the giveaway.
  - **eligible_chat_count** (integer) - Number of eligible chats for the giveaway.
  - **main_chat_id** (integer) - The main chat ID for the giveaway.
  - **launch_date** (string) - The date when the giveaway was launched.
  - **end_date** (string) - The date when the giveaway ends.
  - **any_user_can_join** (boolean) - Whether any user can join the giveaway.
  - **is_prize_shared** (boolean) - Whether the prize is shared.
  - **is_gift_code** (boolean) - Whether the giveaway involves a gift code.
  - **is_star_giveaway** (boolean) - Whether the giveaway is a star giveaway.
- **giveaway_winners** (object) - Represents the winners of a giveaway.
  - **winners** (array) - List of winners.
    - **user** (object) - Information about a winner.
      - **id** (integer) - Unique identifier for the user.
      - **is_bot** (boolean) - True if the user is a bot.
      - **first_name** (string) - First name of the user.
      - **username** (string) - Username of the user.
- **chat_boost_source_giveaway** (object) - Information about a chat boost source giveaway.
  - **source_type** (string) - The type of the chat boost source.
  - **user** (object) - Information about the user who boosted the chat.
    - **id** (integer) - Unique identifier for the user.
    - **is_bot** (boolean) - True if the user is a bot.
    - **first_name** (string) - First name of the user.
    - **username** (string) - Username of the user.

### Request Example
```json
{
  "giveaway": {
    "prize_description": "1 Month Premium",
    "user_limit": 10,
    "winners_selection_date": "2024-08-20T10:00:00Z",
    "is_publiclyVisible": true,
    "last_updated_date": "2024-08-15T12:00:00Z",
    "creation_date": "2024-08-10T09:00:00Z",
    "winners_count": 5,
    "eligible_chat_count": 100,
    "main_chat_id": 123456789,
    "launch_date": "2024-08-11T09:00:00Z",
    "end_date": "2024-08-18T09:00:00Z",
    "any_user_can_join": true,
    "is_prize_shared": false,
    "is_gift_code": false,
    "is_star_giveaway": true
  },
  "giveaway_winners": {
    "winners": [
      {
        "user": {
          "id": 987654321,
          "is_bot": false,
          "first_name": "Jane",
          "username": "jane_doe"
        }
      }
    ]
  },
  "chat_boost_source_giveaway": {
    "source_type": "premium",
    "user": {
      "id": 112233445,
      "is_bot": false,
      "first_name": "Bob",
      "username": "bob_smith"
    }
  }
}
```

### Response
#### Success Response (200)
- **message** (string) - Confirmation message of the operation.

#### Response Example
```json
{
  "message": "Giveaway details updated successfully."
}
```
```

--------------------------------

TITLE: HTML user mention parser
DESCRIPTION: Fixes the HTML user mention parser, ensuring that user mentions formatted with HTML are correctly processed.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_75

LANGUAGE: python
CODE:
```
from aiogram.utils.text import html_parse_mention
```

--------------------------------

TITLE: Added Gift and Gifts classes, GetAvailableGifts method
DESCRIPTION: New classes `Gift` and `Gifts`, along with the `GetAvailableGifts` method, have been added. These facilitate the retrieval and management of available gifts that bots can send to users.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_92

LANGUAGE: python
CODE:
```
from aiogram.types import Gift, Gifts
from aiogram.methods import GetAvailableGifts

# Example usage for getting available gifts
get_gifts_method = GetAvailableGifts()

# Example of a Gift object (hypothetical)
# gift = Gift(id='gift_1', name='Virtual Rose', ...)
```

--------------------------------

TITLE: Forward Messages as Bot Method - aiogram
DESCRIPTION: This snippet demonstrates how to forward messages using the `forward_messages` method directly on a bot instance in aiogram. It returns a list of MessageIds.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_messages.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: list[MessageId] = await bot.forward_messages(...)
```

--------------------------------

TITLE: Dependency Updates
DESCRIPTION: Information regarding updates to project dependencies, such as Pydantic.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_59

LANGUAGE: APIDOC
CODE:
```
## Dependency Updates

### Description
Details on updates to external dependencies used by the Aiogram library.

### Pydantic Update:
- Upper bound for Pydantic dependency changed from `<2.11` to `<2.12`.
- Upgrading to Pydantic v2.11 reduces resource consumption.
```

--------------------------------

TITLE: Aiogram Chosen Inline Result Handler
DESCRIPTION: Shows how to register a handler for when a user selects an inline query result using @router.chosen_inline_result().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_6

LANGUAGE: python
CODE:
```
@router.chosen_inline_result()
async def chosen_inline_result_handler(chosen_inline_result: types.ChosenInlineResult) -> Any: pass
```

--------------------------------

TITLE: Support Bot API 5.2 and fix command filter args
DESCRIPTION: This version introduces full support for Bot API 5.2 and includes fixes for builtin command filter arguments. It ensures better integration with Telegram's latest features and improves command handling.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_7

LANGUAGE: python
CODE:
```
- Added full support of Bot API 5.2 (`#572 <https://github.com/aiogram/aiogram/issues/572>`_)
- Fixed builtin command filter args (`#556 <https://github.com/aiogram/aiogram/issues/556>`_) (`#558 <https://github.com/aiogram/aiogram/issues/558>`_)
```

--------------------------------

TITLE: Call answer_inline_query as bot method (Python)
DESCRIPTION: Demonstrates how to call the `answer_inline_query` method directly on the bot object. This is a common way to send responses to inline queries. It returns a boolean indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/answer_inline_query.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.answer_inline_query(...)
```

--------------------------------

TITLE: Support Bot API 5.1 and fix FSMContextProxy.setdefault
DESCRIPTION: This version offers full support for Telegram Bot API 5.1 and includes a fix for the FSMContextProxy.setdefault method. It ensures compatibility with the latest API and improves state management functionality.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_14

LANGUAGE: python
CODE:
```
- Full support for Telegram Bot API 5.1 (`#519 <https://github.com/aiogram/aiogram/issues/519>`_)
- Fixed :code:`FSMContextProxy.setdefault` method (`#491 <https://github.com/aiogram/aiogram/issues/491>`_)
```

--------------------------------

TITLE: Update Translation Files (PO) using pybabel
DESCRIPTION: This command updates existing .po translation files based on a .pot template file, which is generated from the source code. It helps in incorporating new translatable strings or changes to existing ones into the translation files.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_9

LANGUAGE: bash
CODE:
```
pybabel update -d locales -D messages -i locales/messages.pot
```

--------------------------------

TITLE: Use SetChatPermissions as Bot Method in Aiogram
DESCRIPTION: This snippet demonstrates how to use the SetChatPermissions method directly with the bot object. It requires the bot instance and the necessary parameters for SetChatPermissions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_permissions.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_chat_permissions(...)
```

--------------------------------

TITLE: Using MagicData Filter for User ID Comparison
DESCRIPTION: Demonstrates how to use the MagicData filter to compare the event's 'from_user.id' with a configuration value, such as an admin ID. The 'config' object is expected to be provided by middleware.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_data.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram import F
from aiogram.filters import MagicData

# Assuming 'config' is available, e.g., from middleware
# Example: MagicData(F.event.from_user.id == F.config.admin_id)

```

--------------------------------

TITLE: Deserialize Telegram Message Object to Python Dictionary (aiogram)
DESCRIPTION: Demonstrates how to convert a Telegram message object into a Python dictionary in aiogram, with separate methods for versions 2.x and 3.x. Version 2.x uses message.to_python(), while 3.x uses deserialize_telegram_object_to_python.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_9

LANGUAGE: python
CODE:
```
async def handler(message: Message) -> None:
    # Version 2.x
    message_dict = message.to_python()
    print(message_dict)
    # {"id": 42, ...}
    print(type(message_dict))
    # <class 'dict'>
```

LANGUAGE: python
CODE:
```
async def handler(message: Message) -> None:
    # Version 3.x
    message_dict = deserialize_telegram_object_to_python(message)
    print(message_dict)
    # {"id": 42, ...}
    print(type(message_dict))
    # <class 'dict'>
```

--------------------------------

TITLE: Edit Chat Invite Link as Method Object (Python)
DESCRIPTION: This snippet demonstrates using EditChatInviteLink as a method object, which can be passed to the bot instance. It requires importing the EditChatInviteLink class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_invite_link.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_chat_invite_link import EditChatInviteLink

# Or alias:
# from aiogram.methods import EditChatInviteLink

result: ChatInviteLink = await bot(EditChatInviteLink(...))
```

--------------------------------

TITLE: Direct Messages in Channels Support (Python)
DESCRIPTION: Adds support for direct messages within channels, including new fields in Chat and ChatFullInfo classes, and a new DirectMessagesTopic class to represent these topics.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from aiogram.types import Chat, ChatFullInfo, DirectMessagesTopic, Message

# Example usage of new fields
# chat: Chat
# if chat.is_direct_messages:
#     print("This is a direct messages chat.")

# chat_full_info: ChatFullInfo
# if chat_full_info.parent_chat:
#     print(f"Parent chat: {chat_full_info.parent_chat.title}")

# message: Message
# if message.direct_messages_topic:
#     print(f"Direct messages topic: {message.direct_messages_topic.name}")
```

--------------------------------

TITLE: Check Data AJAX POST Request
DESCRIPTION: Performs an AJAX POST request to '/demo/checkData' to validate data using the provided init data. It updates a status indicator based on the server's response.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/examples/web_app/demo.html#_snippet_8

LANGUAGE: javascript
CODE:
```
if (initDataUnsafe.query_id && initData) {
    $('#webview_data_status').show();
    $.ajax('/demo/checkData', {
        type: 'POST',
        data: {"_auth": initData},
        dataType: 'json',
        success: function (result) {
            if (result.ok) {
                $('#webview_data_status').html('Hash is correct').addClass('ok');
            } else {
                $('#webview_data_status').html(result.error).addClass('err');
            }
        },
        error: function (xhr) {
            $('#webview_data_status').html('Server error').addClass('err');
        }
    });
}
```

--------------------------------

TITLE: Fix LinkPreviewOptions JSON Serialization in aiogram
DESCRIPTION: Resolves an issue with JSON serialization for the LinkPreviewOptions class when it's used as default bot-wide options. Ensures correct data handling for link previews.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_164

LANGUAGE: python
CODE:
```
LinkPreviewOptions
```

--------------------------------

TITLE: Magic Filter: Regular Expression Matching
DESCRIPTION: Illustrates how to use regular expressions to filter string attributes with the `regexp` method. This enables complex pattern matching for text content.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#_snippet_5

LANGUAGE: python
CODE:
```
F.text.regexp(r'Hello, .+')  # lambda message: re.match(r'Hello, .+', message.text)
```

--------------------------------

TITLE: SetChatStickerSet Usage as Bot Method in aiogram
DESCRIPTION: Demonstrates how to use the SetChatStickerSet method directly with a bot object. This is a common way to interact with the Telegram Bot API using aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_sticker_set.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_chat_sticker_set(...)
```

--------------------------------

TITLE: Combining filters using aiogram.filters functions
DESCRIPTION: This Python snippet showcases alternative methods for combining filters in aiogram using dedicated functions like `and_f`, `or_f`, and `invert_f` from the `aiogram.filters` module. These functions provide a programmatic way to construct complex filter logic.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/index.rst#_snippet_4

LANGUAGE: python
CODE:
```
and_f(F.text.startswith("show"), F.text.endswith("example"))
or_f(F.text(text="hi"), CommandStart())
invert_f(IsAdmin())
and_f(<A>, or_f(<B>, <C>))
```

--------------------------------

TITLE: SetChatStickerSet Reply in Webhook Handler in aiogram
DESCRIPTION: Illustrates how to return the SetChatStickerSet method directly from a webhook handler. This allows the bot to set a sticker set in response to an incoming webhook update.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_sticker_set.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetChatStickerSet(...)
```

--------------------------------

TITLE: Use RemoveUserVerification as an Object Method
DESCRIPTION: Shows how to import and use `RemoveUserVerification` as a standalone method object. This approach allows for more explicit control and can be used with a specific bot instance.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_user_verification.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.remove_user_verification import RemoveUserVerification

# Or alias:
# from aiogram.methods import RemoveUserVerification

result: bool = await bot(RemoveUserVerification(...))
```

--------------------------------

TITLE: Reopen Forum Topic in Webhook Handler (Python)
DESCRIPTION: Illustrates how to return a ReopenForumTopic object from a webhook handler in aiogram. This is used to signal the reopening of a forum topic.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/reopen_forum_topic.rst#_snippet_2

LANGUAGE: python
CODE:
```
return ReopenForumTopic(...)
```

--------------------------------

TITLE: Add pay_for_upgrade parameter to SendGift method
DESCRIPTION: Introduces the `pay_for_upgrade` parameter to the `SendGift` method. This allows bots to specify whether a gift includes a paid upgrade.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_78

LANGUAGE: python
CODE:
```
from aiogram.methods.send_gift import SendGift

# Example usage (assuming bot instance exists)
# await bot(SendGift(chat_id=chat_id, gift_id='some_gift', pay_for_upgrade=True, ...))
```

--------------------------------

TITLE: PaidMediaPurchased and purchased_paid_media field (Python)
DESCRIPTION: Introduces `PaidMediaPurchased` class and `purchased_paid_media` field in `Update`. This facilitates handling updates related to purchased paid media and associated payloads.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_106

LANGUAGE: python
CODE:
```
class PaidMediaPurchased(BaseModel):
    """This object represents a message about purchased paid media.

    See also: https://core.telegram.org/bots/api#paidmediapurchased
    """
    paid_media: PaidMedia


class Update:
    # ... other fields
    purchased_paid_media: Optional[PaidMediaPurchased] = None
```

--------------------------------

TITLE: Download File to Disk
DESCRIPTION: Saves a file to the local disk using its file_path. The function does not return any value when downloading to disk.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/download_file.rst#_snippet_2

LANGUAGE: python
CODE:
```
await bot.download_file(file_path, "text.txt")
```

--------------------------------

TITLE: Resolve ChatMember Object Status (aiogram)
DESCRIPTION: Illustrates the updated method for resolving a ChatMember object with its appropriate status in aiogram. Version 2.x uses ChatMember.resolve(), while version 3.x utilizes ChatMemberAdapter.validate_python() for this purpose.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_10

LANGUAGE: python
CODE:
```
# Version 2.x
from aiogram.types import ChatMember

chat_member = ChatMember.resolve(**dict_data)
```

LANGUAGE: python
CODE:
```
# Version 3.x
from aiogram.utils.chat_member import ChatMemberAdapter

chat_member = ChatMemberAdapter.validate_python(dict_data)
```

--------------------------------

TITLE: Send Document as Webhook Reply (Python)
DESCRIPTION: This snippet illustrates how to return a SendDocument object as a reply when handling webhooks. This is typically used in asynchronous handlers to send a document in response to an incoming update.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_document.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendDocument(...)
```

--------------------------------

TITLE: Delete Business Messages as Method Object (Python)
DESCRIPTION: This shows how to use DeleteBusinessMessages as a method object, which can be instantiated and then called with the bot instance. This approach is useful for passing the method around or using it in different contexts. It requires importing the DeleteBusinessMessages class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_business_messages.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_business_messages import DeleteBusinessMessages

# Or using an alias:
# from aiogram.methods import DeleteBusinessMessages

result: bool = await bot(DeleteBusinessMessages(...))
```

--------------------------------

TITLE: Calling deleteMessage as a method object
DESCRIPTION: Shows how to instantiate and use the DeleteMessage class as a method object. This approach requires importing the DeleteMessage class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_message.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_message import DeleteMessage

result: bool = await bot(DeleteMessage(...))
```

--------------------------------

TITLE: Delete Sticker Set as Method Object (Python)
DESCRIPTION: Shows how to use the `DeleteStickerSet` method as a distinct object, which can be passed to the bot for execution. This approach offers flexibility in how API calls are structured.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_set.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_sticker_set import DeleteStickerSet
```

LANGUAGE: python
CODE:
```
from aiogram.methods import DeleteStickerSet
```

LANGUAGE: python
CODE:
```
result: bool = await bot(DeleteStickerSet(...))
```

LANGUAGE: python
CODE:
```
return DeleteStickerSet(...)
```

--------------------------------

TITLE: Restore Old Handler Ordering in aiogram.fsm.scene.Scene
DESCRIPTION: Restores the previous behavior of handler registration order in aiogram's Scene objects, which relied on `inspect.getmembers`. This is useful for backward compatibility if specific ordering logic was dependent on the sorted output of `inspect.getmembers`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_64

LANGUAGE: python
CODE:
```
from aiogram.utils.class_attrs_resolver import inspect_members_resolver


class MyScene(Scene, attrs_resolver=inspect_members_resolver):
    pass
```

--------------------------------

TITLE: Forward Messages in Webhook Handler - aiogram
DESCRIPTION: This snippet illustrates how to return a `ForwardMessages` object from a webhook handler in aiogram. This is a common pattern for handling incoming updates and preparing responses.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_messages.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.forward_messages import ForwardMessages

return ForwardMessages(...)
```

--------------------------------

TITLE: Aiogram Message Reaction Count Handler
DESCRIPTION: Demonstrates handling updates for message reaction counts, which includes the total count of reactions, using @router.message_reaction_count().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_16

LANGUAGE: python
CODE:
```
@router.message_reaction_count()
async def message_reaction_count_handler(message_reaction_count: types.MessageReactionCountUpdated) -> Any: pass
```

--------------------------------

TITLE: Set Game Score as Bot Method in aiogram
DESCRIPTION: Demonstrates how to use the setGameScore method directly as a bot method. This is a common way to interact with the Telegram Bot API through the aiogram library. It requires a bot instance and the necessary parameters for setting the game score.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_game_score.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Union[Message, bool] = await bot.set_game_score(...)
```

--------------------------------

TITLE: Handle Updates with Dispatcher
DESCRIPTION: Illustrates how to propagate updates to the Dispatcher using the `feed_update` method. This is a core mechanism for processing incoming Telegram updates within the aiogram framework.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/dispatcher.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram import Bot, Dispatcher

async def update_handler(update: Update, bot: Bot, dispatcher: Dispatcher):
  result = await dp.feed_update(bot, update)
```

--------------------------------

TITLE: Apply Rate Limit Flag to Handler (Python)
DESCRIPTION: Applies a rate-limiting flag to a handler using a decorator. This allows specifying the rate and a key for limiting requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram import flags

@flags.rate_limit(rate=2, key="something")
async def my_handler(message: Message)
```

--------------------------------

TITLE: Invoice Sending Methods in aiogram
DESCRIPTION: Fixes `Message.send_invoice` and `Message.reply_invoice` methods, adding missing arguments for complete invoice functionality.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_209

LANGUAGE: python
CODE:
```
Message.send_invoice()
Message.reply_invoice()
```

--------------------------------

TITLE: Make correct User and Chat get_mention methods (Python)
DESCRIPTION: Ensures that the `get_mention` methods for `User` and `Chat` objects in aiogram version 2.7 produce correct mentions. This improves how user and chat mentions are generated for messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_68

LANGUAGE: python
CODE:
```
from aiogram.types import User, Chat

user = User(id=123, first_name='Test')
chat = Chat(id=-456, type='group', title='Test Group')

user_mention = user.get_mention(mention_type='tg') # Or 'html', 'markdown'
chat_mention = chat.get_mention(mention_type='tg')
```

--------------------------------

TITLE: SendChecklist method for Bot API 9.1
DESCRIPTION: Allows bots to send checklists on behalf of a business account using the SendChecklist method. Requires Bot API 9.1.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_10

LANGUAGE: python
CODE:
```
from aiogram.methods.send_checklist import SendChecklist

# Example usage:
# await bot(SendChecklist(chat_id=chat_id, ...))
```

--------------------------------

TITLE: Telegram Object to JSON String Conversion (aiogram 2.x vs 3.x)
DESCRIPTION: Illustrates the change in converting a Telegram object to a JSON string. In aiogram 2.x, `message.as_json()` was used, while in aiogram 3.x, it involves deserializing the object to a Python dictionary and then using `json.dumps()`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_8

LANGUAGE: Python
CODE:
```
# Version 2.x
async def handler(message: Message) -> None:
    message_json = message.as_json()
    print(message_json)
    # {"id": 42, ...}
    print(type(message_json))
    # <class 'str'>
```

LANGUAGE: Python
CODE:
```
# Version 3.x
import json
from aiogram.utils.serialization import deserialize_telegram_object_to_python

async def handler(message: Message) -> None:
    message_json = json.dumps(deserialize_telegram_object_to_python(message))
    print(message_json)
    # {"id": 42, ...}
    print(type(message_json))
    # <class 'str'>
```

--------------------------------

TITLE: Implementing Filters Factory in aiogram
DESCRIPTION: This code refers to the creation of a filters factory within aiogram. A filters factory simplifies the process of creating and managing various types of message filters (e.g., text, commands, content types), making handler registration more organized and reusable.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_91

LANGUAGE: python
CODE:
```
# This is a conceptual representation of a filters factory.
# from aiogram.filters import Filter
# 
# class MyCustomFilter(Filter):
#     async def __call__(self, message: types.Message) -> bool:
#         return 'keyword' in message.text
# 
# # Usage might involve a factory function:
# # def create_filters():
# #     return {'custom': MyCustomFilter()}

```

--------------------------------

TITLE: Set Sticker Emoji List in Webhook Handler (Python)
DESCRIPTION: Illustrates how to return a `SetStickerEmojiList` object directly from a webhook handler. This is a concise way to reply to incoming updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_emoji_list.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods import SetStickerEmojiList

return SetStickerEmojiList(...)
```

--------------------------------

TITLE: Send local files with types.InputFile in aiogram
DESCRIPTION: Introduced `types.InputFile` for simplified sending of local files. This enhancement aims to make file uploads more user-friendly.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_116

LANGUAGE: python
CODE:
```
from aiogram import types

# Example usage:
# file_path = "path/to/your/local/file.txt"
# await message.reply_document(types.InputFile(file_path))
```

--------------------------------

TITLE: Create Custom ErrorHandler in Python
DESCRIPTION: Demonstrates how to create a custom error handler by subclassing the base ErrorHandler class. It logs exceptions using the provided exception name and message.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/error.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.handlers import ErrorHandler

@router.errors()
class MyHandler(ErrorHandler):
    async def handle(self) -> Any:
        log.exception(
            "Cause unexpected exception %s: %s",
            self.exception_name,
            self.exception_message
        )
```

--------------------------------

TITLE: Use TransferBusinessAccountStars as Bot Method
DESCRIPTION: Demonstrates how to call the transferBusinessAccountStars method directly using the bot object. This is a common pattern for interacting with the Telegram API through the aiogram library. The method returns a boolean value indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_business_account_stars.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.transfer_business_account_stars(...)
```

--------------------------------

TITLE: Send Voice using Bot Method (Python)
DESCRIPTION: Demonstrates how to send a voice message using the `send_voice` method directly on the bot object. This is a common way to interact with the Telegram Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_voice.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_voice(...)
```

--------------------------------

TITLE: Extract Messages with Plural Forms and Lazy Strings
DESCRIPTION: Demonstrates advanced Pybabel extraction options, including flags for singular and plural strings (`-k _:1,1t -k _:1,2`) and lazy strings (`-k __`). This ensures all types of translatable strings are captured.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_6

LANGUAGE: bash
CODE:
```
pybabel extract -k _:1,1t -k _:1,2 -k __ --input-dirs=. -o locales/messages.pot
```

--------------------------------

TITLE: Delete Messages as Method Object
DESCRIPTION: This shows how to instantiate and use the DeleteMessages method as an object, either directly with the bot instance or as a return value in a webhook handler. It requires importing the DeleteMessages class from aiogram.methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_messages.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_messages import DeleteMessages

result: bool = await bot(DeleteMessages(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import DeleteMessages

return DeleteMessages(...)
```

--------------------------------

TITLE: Fix return type of Bot.*_chat_invite_link() and deep-linking util
DESCRIPTION: This fix corrects the return type of Bot.*_chat_invite_link() methods and also addresses issues with the deep-linking utility. It ensures accurate return values for invite link operations and improves deep linking functionality.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_9

LANGUAGE: python
CODE:
```
- Fixed returning type of :code:`Bot.*_chat_invite_link()` methods `#548 <https://github.com/aiogram/aiogram/issues/548>`_ (`#549 <https://github.com/aiogram/aiogram/issues/549>`_)
- Fixed deep-linking util (`#569 <https://github.com/aiogram/aiogram/issues/569>`_)
```

--------------------------------

TITLE: Use copyMessages as Bot Method
DESCRIPTION: Demonstrates how to use the copyMessages method directly as a bot method in aiogram. This is a common way to interact with the Telegram Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_messages.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: list[MessageId] = await bot.copy_messages(...)
```

--------------------------------

TITLE: Forward Messages as Method Object - aiogram
DESCRIPTION: This snippet shows how to use `ForwardMessages` as a method object in aiogram. It requires importing the `ForwardMessages` class and can be called with a bot instance. It returns a list of MessageIds.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/forward_messages.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.forward_messages import ForwardMessages
result: list[MessageId] = await bot(ForwardMessages(...))
```

--------------------------------

TITLE: Return SendSticker from aiogram handler
DESCRIPTION: Illustrates returning a SendSticker object directly from an aiogram handler, typically used when handling webhooks.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_sticker.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendSticker(...)
```

--------------------------------

TITLE: Send Gift - aiogram Bot Method
DESCRIPTION: Usage of the sendGift method directly as a bot method. It takes arguments represented by '...' and returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_gift.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.send_gift(...)
```

--------------------------------

TITLE: Make Downloadable protocol non-writable
DESCRIPTION: Modifies the `Downloadable` protocol to be non-writable. This change addresses type-checking warnings that occur when using the `bot.download(...)` method, improving type safety.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_72

LANGUAGE: python
CODE:
```
# No specific code snippet provided, implies internal protocol definition change.
```

--------------------------------

TITLE: Set Custom Emoji Sticker Set Thumbnail (Object Method)
DESCRIPTION: This snippet illustrates using the SetCustomEmojiStickerSetThumbnail method as an object, which can be called with a bot instance or returned as a reply in a webhook handler. It includes import aliases for convenience.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_custom_emoji_sticker_set_thumbnail.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_custom_emoji_sticker_set_thumbnail import SetCustomEmojiStickerSetThumbnail
from aiogram.methods import SetCustomEmojiStickerSetThumbnail

result: bool = await bot(SetCustomEmojiStickerSetThumbnail(...))
```

LANGUAGE: python
CODE:
```
return SetCustomEmojiStickerSetThumbnail(...)
```

--------------------------------

TITLE: Return Set Business Account Username in Webhook Handler (Python)
DESCRIPTION: Shows how to return the SetBusinessAccountUsername method object as a reply within a webhook handler. This is useful for asynchronous event processing.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_username.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetBusinessAccountUsername(...)
```

--------------------------------

TITLE: State filter in aiogram 3.0
DESCRIPTION: The state filter behavior has changed. If no state was specified in v2, you need to specify it in v3. If `state="*"` was used in v2, no state filter is needed in v3.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_6

LANGUAGE: python
CODE:
```
# Previously (v2):
# @dp.message_handler(state='*')
# async def handler_with_any_state(message: types.Message):
#     pass

# Now (v3):
# No state filter needed if any state is allowed
async def handler_with_any_state(message: types.Message):
    pass

# To filter for a specific state (v3):
# @router.message(StateFilter(MyState.some_state))
# async def handler_with_specific_state(message: types.Message):
#     pass
```

--------------------------------

TITLE: Stop Poll as Object (aiogram)
DESCRIPTION: This snippet shows how to use the StopPoll class from aiogram.methods.stop_poll. It illustrates instantiation and calling it with a bot instance, including an alias for importing.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/stop_poll.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.stop_poll import StopPoll

result: Poll = await bot(StopPoll(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import StopPoll

result: Poll = await bot(StopPoll(...))
```

--------------------------------

TITLE: Copying Paid Media Limitations in aiogram
DESCRIPTION: Highlights that the CopyMessage and CopyMessages methods cannot be used to copy paid media.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_146

LANGUAGE: python
CODE:
```
# from aiogram.methods.copy_message import CopyMessage
# from aiogram.methods.copy_messages import CopyMessages
# Note: These methods do not support copying paid media.

```

--------------------------------

TITLE: User and Bot API Features
DESCRIPTION: Updates related to user information, including the 'has_main_web_app' field, and general Bot API enhancements.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_132

LANGUAGE: APIDOC
CODE:
```
## GET /api/user/bot-info

### Description
This endpoint provides information about users and bot capabilities, including whether a user has a main web app configured. It reflects updates from Bot API versions.

### Method
GET

### Endpoint
/api/user/bot-info

### Parameters
#### Path Parameters
None

#### Query Parameters
- **user_id** (integer) - Required - The ID of the user to retrieve information for.

#### Request Body
None

### Request Example
```
GET /api/user/bot-info?user_id=1234567890
```

### Response
#### Success Response (200)
- **user** (object) - Information about the user.
  - **id** (integer) - Unique identifier for the user.
  - **is_bot** (boolean) - True if the user is a bot.
  - **first_name** (string) - First name of the user.
  - **username** (string) - Username of the user.
  - **has_main_web_app** (boolean) - True if the user has a main web app.

#### Response Example
```json
{
  "user": {
    "id": 1234567890,
    "is_bot": false,
    "first_name": "Diana",
    "username": "diana_prince",
    "has_main_web_app": true
  }
}
```
```

--------------------------------

TITLE: Send Poll as Object
DESCRIPTION: Shows how to instantiate and use the SendPoll method as a distinct object, either directly with the bot or within a handler context.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_poll.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.send_poll import SendPoll
result: Message = await bot(SendPoll(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SendPoll
return SendPoll(...)
```

--------------------------------

TITLE: Add Inline Button
DESCRIPTION: Adds a new inline button to the keyboard builder with various configuration options like text, URL, callback data, and inline query parameters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_5

LANGUAGE: python
CODE:
```
builder.button(text: str, url: Optional[str] = None, login_url: Optional[LoginUrl] = None, callback_data: Optional[Union[str, CallbackData]] = None, switch_inline_query: Optional[str] = None, switch_inline_query_current_chat: Optional[str] = None, callback_game: Optional[CallbackGame] = None, pay: Optional[bool] = None, **kwargs: Any) -> aiogram.utils.keyboard.InlineKeyboardBuilder
```

--------------------------------

TITLE: Handle Telegram Ads Platform Transactions in aiogram
DESCRIPTION: Introduces TransactionPartnerTelegramAds for information on Telegram Star transactions involving the Telegram Ads Platform.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_149

LANGUAGE: python
CODE:
```
from aiogram.types.transaction_partner_telegram_ads import TransactionPartnerTelegramAds
```

--------------------------------

TITLE: Reply with Media Group in Webhook Handler (Python)
DESCRIPTION: Illustrates how to return a SendMediaGroup object from a webhook handler to send a media group as a reply. This is useful for direct responses.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_media_group.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendMediaGroup(...)
```

--------------------------------

TITLE: Validate Init Data with Bot ID (Python)
DESCRIPTION: Enables validation of initialization data using only the bot's ID. This simplifies the validation process by removing the need for additional secret keys.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from aiogram.utils.web_app import validate_web_app_init_data

async def validate_data(bot_id: int, init_data: str):
    return validate_web_app_init_data(bot_id=bot_id, init_data=init_data)
```

--------------------------------

TITLE: Mini Apps Persistent Storage in aiogram
DESCRIPTION: Introduces `DeviceStorage` and `SecureStorage` fields, enabling Mini Apps to utilize persistent local storage on the user's device for data persistence. This is a key feature for Mini App development within aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_41

LANGUAGE: Python
CODE:
```
# Usage of DeviceStorage and SecureStorage within Mini Apps context.
```

--------------------------------

TITLE: Class-based Middleware Implementation in Python
DESCRIPTION: Defines a class-based middleware for aiogram that counts incoming messages and adds the count to the event data. It requires importing BaseMiddleware from aiogram and Message type.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/middlewares.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram import BaseMiddleware
from aiogram.types import Message


class CounterMiddleware(BaseMiddleware):
    def __init__(self) -> None:
        self.counter = 0

    async def __call__(
        self, 
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]], 
        event: Message, 
        data: Dict[str, Any]
    ) -> Any:
        self.counter += 1
        data['counter'] = self.counter
        return await handler(event, data)
```

--------------------------------

TITLE: Make BaseStorage.close awaitable in aiogram
DESCRIPTION: The `BaseStorage.close()` method is now awaitable, which is a breaking change for applications using the FSM (Finite State Machine) component. Ensure proper async handling for storage closure.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_119

LANGUAGE: python
CODE:
```
# Before:
# storage.close()

# After:
# await storage.close()
```

--------------------------------

TITLE: Add Reply Button
DESCRIPTION: Adds a new button to the reply keyboard builder, with options to request contact, location, or a poll type.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_7

LANGUAGE: python
CODE:
```
builder.button(text: str, request_contact: Optional[bool] = None, request_location: Optional[bool] = None, request_poll: Optional[KeyboardButtonPollType] = None, **kwargs: Any) -> aiogram.utils.keyboard.ReplyKeyboardBuilder
```

--------------------------------

TITLE: Instantiate and Use RemoveChatVerification Object
DESCRIPTION: This snippet shows how to import and instantiate the RemoveChatVerification class. It can then be called with a bot instance, returning a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_chat_verification.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.remove_chat_verification import RemoveChatVerification

# or
# from aiogram.methods import RemoveChatVerification

result: bool = await bot(RemoveChatVerification(...))
```

--------------------------------

TITLE: Set Sticker Set Title - Webhook Reply
DESCRIPTION: This snippet illustrates how to return a SetStickerSetTitle object as a reply in a Webhook handler. This is useful for sending sticker set title updates asynchronously.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_title.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.set_sticker_set_title import SetStickerSetTitle

return SetStickerSetTitle(...)
```

--------------------------------

TITLE: Generate Inline Keyboard Buttons
DESCRIPTION: Dynamically creates an inline keyboard with a specified number of buttons, each with custom text and callback data. This is useful for creating interactive elements in chat applications.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_0

LANGUAGE: python
CODE:
```
builder = InlineKeyboardBuilder()

for index in range(1, 11):
    builder.button(text=f"Set {index}", callback_data=f"set:{index}")
```

--------------------------------

TITLE: Unpin All General Forum Topic Messages (aiogram)
DESCRIPTION: This snippet demonstrates how to unpin all messages in a general forum topic using the aiogram library. It shows usage as a bot method, as a method object, and as a reply in a handler.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_general_forum_topic_messages.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.unpin_all_general_forum_topic_messages(...)
```

LANGUAGE: python
CODE:
```
from aiogram.methods.unpin_all_general_forum_topic_messages import UnpinAllGeneralForumTopicMessages

result: bool = await bot(UnpinAllGeneralForumTopicMessages(...))
```

LANGUAGE: python
CODE:
```
return UnpinAllGeneralForumTopicMessages(...)
```

--------------------------------

TITLE: Aiogram Version 3.13.1 Changes
DESCRIPTION: Details the changes introduced in Aiogram version 3.13.1, including Python 3.8 EOL warning, dependency updates, and Pydantic integration.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_110

LANGUAGE: APIDOC
CODE:
```
## Aiogram Version 3.13.1 Changes

### Description
Details the changes introduced in Aiogram version 3.13.1, including Python 3.8 EOL warning, dependency updates, and Pydantic integration.

### Important Notes:

- **Python 3.8 End of Life**: Python 3.8 will soon be EOL and will not be supported by future Aiogram releases.

### Misc Updates:

- Increased max Pydantic version support to `<2.10` (for Python >=3.9).
- Bumped aiofiles version upper bound to `<24.2`.

### Bugfixes:

- Fixed `Default` object annotation resolution using Pydantic.
```

--------------------------------

TITLE: Approve Suggested Post (Bot Method)
DESCRIPTION: This snippet demonstrates how to use the `approveSuggestedPost` method directly with a bot instance. It is a common way to interact with the Telegram Bot API asynchronously. The method requires specific parameters not shown here and returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/approve_suggested_post.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.approve_suggested_post(...)
```

--------------------------------

TITLE: Unban Chat Sender Chat as Method Object
DESCRIPTION: Shows how to instantiate and use the UnbanChatSenderChat method as an object, which can be passed to the bot. This approach offers more flexibility and is useful when managing methods as distinct entities. It requires importing the UnbanChatSenderChat class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_sender_chat.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.unban_chat_sender_chat import UnbanChatSenderChat

result: bool = await bot(UnbanChatSenderChat(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import UnbanChatSenderChat

result: bool = await bot(UnbanChatSenderChat(...))
```

--------------------------------

TITLE: Combine and Invert Filters in aiogram
DESCRIPTION: Demonstrates how to combine multiple filters using logical AND and OR operators, and how to invert a filter's result in aiogram. This allows for more complex message handling logic.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_213

LANGUAGE: python
CODE:
```
from aiogram.filters import Text, Command, StateFilter
from magic_filter import F

# Combining filters with OR
Text(text="demo") | Command(commands=["demo"])

# Combining filters with AND
MyFilter() & AnotherFilter()

# Inverting a filter
~StateFilter(state='my-state')
```

--------------------------------

TITLE: Remove Business Account Profile Photo - Method Object Usage
DESCRIPTION: Illustrates using `RemoveBusinessAccountProfilePhoto` as a method object with a specific bot instance. This approach requires importing the method class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_business_account_profile_photo.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.remove_business_account_profile_photo import RemoveBusinessAccountProfilePhoto
from aiogram.methods import RemoveBusinessAccountProfilePhoto

result: bool = await bot(RemoveBusinessAccountProfilePhoto(...))
```

--------------------------------

TITLE: Edit Checklist Message as Method Object (Python)
DESCRIPTION: This code shows how to instantiate and use the EditMessageChecklist method as an object in aiogram. It can be called with the bot instance and is also shown as a return value for webhook handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_checklist.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_message_checklist import EditMessageChecklist

# Usage as a method object
result: Message = await bot(EditMessageChecklist(...))

# Usage as a reply in a webhook handler
return EditMessageChecklist(...)
```

--------------------------------

TITLE: Chat Management Methods in aiogram
DESCRIPTION: Provides methods for managing chat settings and members, such as pinning/unpinning messages, setting administrator titles, permissions, descriptions, and photos. Also includes methods for restricting, unbanning, and banning users.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_197

LANGUAGE: python
CODE:
```
chat.unpin_all_messages()
chat.unpin_message()
chat.pin_message()
chat.set_administrator_custom_title()
chat.set_permissions()
chat.promote()
chat.restrict()
chat.unban()
chat.ban()
chat.set_description()
chat.set_title()
chat.delete_photo()
chat.set_photo()
```

--------------------------------

TITLE: SetStickerSetThumbnail Usage with Bot Method
DESCRIPTION: Demonstrates how to use the SetStickerSetThumbnail method directly with a bot instance. This method is used to set a thumbnail for a sticker set. It returns a boolean value indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_set_thumbnail.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_sticker_set_thumbnail(...)
```

--------------------------------

TITLE: Return Set Business Account Name in Webhook Handler (Python)
DESCRIPTION: This snippet illustrates how to return a SetBusinessAccountName object from a webhook handler. This is used to send the method as a reply to a webhook. The handler should return an instance of SetBusinessAccountName.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_business_account_name.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods import SetBusinessAccountName

return SetBusinessAccountName(...)
```

--------------------------------

TITLE: Add Message.as_reply_parameters method in aiogram
DESCRIPTION: Introduces the 'as_reply_parameters' method to the 'Message' class. This method simplifies the process of creating reply parameters, replacing the direct use of 'reply_to_message_id' in message reply methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_122

LANGUAGE: python
CODE:
```
message.as_reply_parameters()
```

--------------------------------

TITLE: Define FSM States in Python
DESCRIPTION: Defines the states for a Finite State Machine (FSM) using Python's enum. This is the first step in implementing conversational flows in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_0

LANGUAGE: python
CODE:
```
class Form(StatesGroup):
    name = State()
    language = State()
```

--------------------------------

TITLE: Delete Chat Sticker Set as Method Object
DESCRIPTION: Demonstrates using DeleteChatStickerSet as a method object, which can be called with a bot instance. Imports for the method are also shown.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_chat_sticker_set.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_chat_sticker_set import DeleteChatStickerSet
from aiogram.methods import DeleteChatStickerSet

result: bool = await bot(DeleteChatStickerSet(...))
```

--------------------------------

TITLE: payload parameter in SendPaidMedia (Python)
DESCRIPTION: Allows specifying a payload in `SendPaidMedia`, which is then returned to the bot in `TransactionPartnerUser` and `purchased_paid_media` updates. This enables better tracking and management of paid media transactions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_107

LANGUAGE: python
CODE:
```
class SendPaidMedia(TelegramMethod):
    # ... other fields
    payload: Optional[str] = None

class TransactionPartnerUser(BaseModel):
    # ... other fields
    payload: Optional[str] = None

class Update:
    # ... other fields
    purchased_paid_media: Optional[PaidMediaPurchased] = None
```

--------------------------------

TITLE: InlineQueryResultArticle Update
DESCRIPTION: The 'hide_url' field has been removed from the InlineQueryResultArticle class. Developers should now pass an empty string as the 'url' parameter.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_95

LANGUAGE: APIDOC
CODE:
```
## Removed Field: hide_url in InlineQueryResultArticle

### Description
The `hide_url` field has been removed from the `aiogram.types.inline_query_result_article.InlineQueryResultArticle` class. To achieve similar functionality, pass an empty string as the `url` parameter.

### Method
N/A (This is a class modification)

### Endpoint
N/A

### Parameters
#### Path Parameters
N/A

#### Query Parameters
N/A

#### Request Body
- **url** (str) - Required - The URL of the article. Pass an empty string if `hide_url` functionality was previously used.

### Request Example
```json
{
  "url": ""
}
```

### Response
#### Success Response (200)
N/A (This is a class modification)

#### Response Example
N/A
```

--------------------------------

TITLE: Added subscription fields to SuccessfulPayment
DESCRIPTION: The `SuccessfulPayment` class now includes `subscription_expiration_date`, `is_recurring`, and `is_first_recurring` fields. These fields provide detailed information about subscription payments, enhancing the handling of recurring billing and subscription status.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_87

LANGUAGE: python
CODE:
```
from aiogram.types import SuccessfulPayment

# Example usage:
payment = SuccessfulPayment(
    currency='USD',
    total_amount=500,
    invoice_payload='sub_123',
    shipping_option_id='UPS',
    order_info=None,
    subscription_expiration_date='2025-01-01T10:00:00Z', # New field
    is_recurring=True, # New field
    is_first_recurring=False # New field
)
```

--------------------------------

TITLE: Fix HTML text decorations for 'pre' tag and Message.get_full_command
DESCRIPTION: This fix addresses issues with HTML text decorations for the 'pre' tag, resolving problems with code block formatting. Additionally, it corrects the Message.get_full_command method for messages containing captions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_5

LANGUAGE: python
CODE:
```
- Fixed HTML text decorations for tag :code:`pre` (`#597 <https://github.com/aiogram/aiogram/issues/597>`_ fixes issues `#596 <https://github.com/aiogram/aiogram/issues/596>`_ and `#481 <https://github.com/aiogram/aiogram/issues/481>`_)
- Fixed :code:`Message.get_full_command` method for messages with caption (`#576 <https://github.com/aiogram/aiogram/issues/576>`_)
```

--------------------------------

TITLE: Filter Command by Multiple Variants
DESCRIPTION: Matches a command that can be one of several specified variants. This is useful when a command can be invoked in slightly different ways.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/command.rst#_snippet_2

LANGUAGE: python
CODE:
```
Command("item", re.compile(r"item_(\d+)"))
```

--------------------------------

TITLE: Message handler filtering in aiogram 3.0
DESCRIPTION: In aiogram 3.0, you must explicitly specify content types using filters, such as Magic Filters, instead of the `content_types` argument in `message_handler`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/migration_2_to_3.rst#_snippet_5

LANGUAGE: python
CODE:
```
@router.message(F.photo)
async def handle_photo(message: types.Message):
    await message.answer("Nice photo!")
```

--------------------------------

TITLE: Usage as Bot Method in aiogram
DESCRIPTION: Demonstrates how to use the editGeneralForumTopic method directly with an aiogram bot instance. This is a common way to interact with the Telegram API through the aiogram framework.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_general_forum_topic.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.edit_general_forum_topic(...)
```

--------------------------------

TITLE: Added subscription_period to TransactionPartnerUser
DESCRIPTION: The `TransactionPartnerUser` class now includes the `subscription_period` field. This field provides information about the duration of a subscription associated with a user transaction, useful for tracking subscription lifecycles.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_89

LANGUAGE: python
CODE:
```
from aiogram.types import TransactionPartnerUser

# Example usage:
user_partner = TransactionPartnerUser(
    user_id=67890,
    subscription_period='P1M' # Added field for monthly subscription
)
```

--------------------------------

TITLE: Export Chat Invite Link in Webhook Handler
DESCRIPTION: This snippet illustrates how to return an ExportChatInviteLink object directly from a webhook handler in aiogram. This is a convenient way to respond to incoming webhook requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/export_chat_invite_link.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.export_chat_invite_link import ExportChatInviteLink

return ExportChatInviteLink(...)
```

--------------------------------

TITLE: CopyTextButton and copy_text field in InlineKeyboardButton (Python)
DESCRIPTION: Introduces the `CopyTextButton` class and the `copy_text` field in `InlineKeyboardButton`. This allows bots to send and receive inline buttons that copy arbitrary text, enhancing interactive features.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_101

LANGUAGE: python
CODE:
```
class CopyTextButton(BaseInlineKeyboardButton):
    """Represents an inline button that copies text to the user's input field.

    See also: https://core.telegram.org/bots/api#inlinekeyboardbutton
    """

    text: str
    copy_text: str

    parse_mode: Optional[str] = None

    def __init__(
        self, *, text: str, copy_text: str, parse_mode: Optional[str] = None, **kwargs: Any
    ):
        super().__init__(text=text, **kwargs)
        self.copy_text = copy_text
        self.parse_mode = parse_mode


class InlineKeyboardButton(BaseInlineKeyboardButton):
    # ... other fields
    copy_text_button: Optional[CopyTextButton] = None
```

--------------------------------

TITLE: Update Handler Flags with Commands Filter (Python)
DESCRIPTION: Demonstrates how a custom filter can update handler flags by adding a list of commands. This is useful for command-based routing.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#_snippet_3

LANGUAGE: python
CODE:
```
from typing import Dict, Any
from aiogram.filters import Filter

class Command(Filter):
    ...

    def update_handler_flags(self, flags: Dict[str, Any]) -> None:
        commands = flags.setdefault("commands", [])
        commands.append(self)
```

--------------------------------

TITLE: Marking Strings for Translation in Python
DESCRIPTION: Demonstrates how to use the gettext function '_' to mark strings for translation in your Python handlers. It shows how to format translated strings with variables, ensuring dynamic parts are correctly placed after translation. f-strings are explicitly discouraged for translation strings.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram import html
from aiogram.utils.i18n import gettext as _

async def my_handler(message: Message) -> None:
    await message.answer(
        _("Hello, {name}!").format(
            name=html.quote(message.from_user.full_name)
        )
    )
```

--------------------------------

TITLE: Improved Documentation Fixes
DESCRIPTION: Corrections made to improve the clarity and formatting of the library's documentation.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_58

LANGUAGE: APIDOC
CODE:
```
## Improved Documentation Fixes

### Description
Fixes related to documentation, specifically addressing code block formatting issues.

### Details:
- Corrected broken code block formatting in `router.rst` due to incorrect indentation.
```

--------------------------------

TITLE: Fixing Message.send_copy for Stickers and Stories in aiogram
DESCRIPTION: Details bugfixes for the `Message.send_copy` method, specifically addressing issues with sending stickers and forwarding stories. This restores full functionality for copying various message types.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_186

LANGUAGE: python
CODE:
```
# Corrected method usage:
# await message.send_copy(chat_id=target_chat_id, message_id=original_message_id)
```

--------------------------------

TITLE: Leave Chat as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the leaveChat method directly as a bot method. This is the most common way to make a bot leave a chat. It returns a boolean value indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/leave_chat.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.leave_chat(...)
```

--------------------------------

TITLE: Star Balance API
DESCRIPTION: Endpoint to retrieve the bot's current balance of Telegram Stars.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_16

LANGUAGE: APIDOC
CODE:
```
## GET /api/get_my_star_balance

### Description
Allows bots to get their current balance of Telegram Stars.

### Method
GET

### Endpoint
/api/get_my_star_balance

### Parameters
#### Path Parameters
None

#### Query Parameters
None

#### Request Body
None

### Request Example
```json
{}
```

### Response
#### Success Response (200)
- **star_balance** (integer) - The current balance of Telegram Stars.

#### Response Example
```json
{
  "star_balance": 100
}
```
```

--------------------------------

TITLE: Aiogram Version 3.13.0 Features
DESCRIPTION: Highlights the new features in Aiogram version 3.13.0, focusing on paid media updates and transaction partner information.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_111

LANGUAGE: APIDOC
CODE:
```
## Aiogram Version 3.13.0 Features

### Description
Highlights the new features in Aiogram version 3.13.0, focusing on paid media updates and transaction partner information.

### Features:

- Added updates for purchased paid media via `aiogram.types.paid_media_purchased.PaidMediaPurchased` and the `purchased_paid_media` field in `aiogram.types.update.Update`.
- Introduced the ability to specify a payload in `aiogram.methods.send_paid_media.SendPaidMedia`, which is returned in `aiogram.types.transaction_partner_user.TransactionPartnerUser` and `purchased_paid_media` updates.
- Added the `prize_star_count` field to `aiogram.types.giveaway_created.GiveawayCreated`.
```

--------------------------------

TITLE: Return Set Chat Menu Button in Webhook Handler (Python)
DESCRIPTION: This snippet illustrates how to return a SetChatMenuButton object directly from a webhook handler in aiogram. This is useful for processing incoming webhook updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_menu_button.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetChatMenuButton(...)
```

--------------------------------

TITLE: Implementing Connection Pool in RethinkDB driver for aiogram
DESCRIPTION: This relates to the RethinkDB storage for aiogram, specifically the implementation of a connection pool. Connection pooling is a technique that improves performance by reusing database connections, reducing the overhead of establishing new connections frequently.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_109

LANGUAGE: python
CODE:
```
# Conceptual representation of connection pooling for RethinkDB:
# from aiogram.contrib.fsm_storage.rethinkdb import RethinkDBStorage
# 
# # Storage initialization would internally manage a connection pool
# # storage = RethinkDBStorage(host='localhost', port=28015, db='aiogram', pool_size=5)

```

--------------------------------

TITLE: Support for pydantic v2.5 (Python)
DESCRIPTION: Adds support for 'pydantic' version 2.5. This ensures compatibility with the latest features and changes in the 'pydantic' library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_173

LANGUAGE: python
CODE:
```
# Dependency update in setup.py or pyproject.toml:
# pydantic: added support for v2.5

# Example of checking installed version:
# import pydantic
# print(pydantic.VERSION)

```

--------------------------------

TITLE: Manage Stories in aiogram
DESCRIPTION: Adds `PostStory`, `EditStory`, and `DeleteStory` methods for bots to manage stories on behalf of a business account. These methods integrate with story content and area types.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_40

LANGUAGE: Python
CODE:
```
from aiogram.methods.post_story import PostStory
from aiogram.methods.edit_story import EditStory
from aiogram.methods.delete_story import DeleteStory
```

--------------------------------

TITLE: Edit Message Text as Method Object
DESCRIPTION: Shows how to use the EditMessageText method as an object, which can be useful for more complex scenarios or when passing the method as an argument. It requires importing the EditMessageText class. This usage pattern allows for more explicit control over the method call.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_text.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_message_text import EditMessageText
```

LANGUAGE: python
CODE:
```
from aiogram.methods import EditMessageText
```

LANGUAGE: python
CODE:
```
result: Union[Message, bool] = await bot(EditMessageText(...))
```

--------------------------------

TITLE: RedisStorage2 bucket typo fix
DESCRIPTION: Corrects a typo in RedisStorage2's `update_bucket` method, changing 'data' to 'bucket' for accurate variable referencing.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_80

LANGUAGE: python
CODE:
```
from aiogram.contrib.fsm_storage.redis import RedisStorage2
```

--------------------------------

TITLE: Use read_business_message as a Bot Method
DESCRIPTION: Demonstrates how to call the `read_business_message` method directly using the bot object. This is the primary way to interact with the method for sending requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/read_business_message.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.read_business_message(...)
```

--------------------------------

TITLE: Aiogram My Chat Member Handler
DESCRIPTION: Demonstrates handling updates related to the bot's own chat member status changes (e.g., being added or removed from a chat) using @router.my_chat_member().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_12

LANGUAGE: python
CODE:
```
@router.my_chat_member()
async def my_chat_member_handler(my_chat_member: types.ChatMemberUpdated) -> Any: pass
```

--------------------------------

TITLE: Logging Middleware in aiogram
DESCRIPTION: This code shows the usage of the `LoggingMiddleware` from `aiogram.contrib.middlewares.logging`. This middleware is designed to log incoming and outgoing updates, providing valuable insights into the bot's activity and aiding in debugging. It's an essential tool for monitoring bot operations.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_87

LANGUAGE: python
CODE:
```
from aiogram import Bot, Dispatcher
from aiogram.contrib.middlewares.logging import LoggingMiddleware

# api_token = "YOUR_BOT_TOKEN"
# bot = Bot(token=api_token)
# dp = Dispatcher(bot)

# dp.middleware.setup(LoggingMiddleware())

```

--------------------------------

TITLE: Add answer_chat_action to Message object
DESCRIPTION: The `Message` object now includes the `answer_chat_action` method. This allows bots to directly respond to users by setting a chat action, such as 'typing' or 'uploading_photo'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_22

LANGUAGE: python
CODE:
```
# Added answer_chat_action to the Message object (#501)
```

--------------------------------

TITLE: Leave Chat as Webhook Reply (Python)
DESCRIPTION: Shows how to return a LeaveChat object as a reply to a webhook in a handler. This pattern is used when a handler needs to signal an action to be performed by the bot, such as leaving a chat.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/leave_chat.rst#_snippet_2

LANGUAGE: python
CODE:
```
return LeaveChat(...)
```

--------------------------------

TITLE: Approve Suggested Post (Webhook Reply)
DESCRIPTION: This snippet illustrates how to return `ApproveSuggestedPost` from a handler when responding to a webhook. This allows the bot to directly signal approval of a suggested post in response to incoming updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/approve_suggested_post.rst#_snippet_2

LANGUAGE: python
CODE:
```
return ApproveSuggestedPost(...)
```

--------------------------------

TITLE: Send Paid Media API
DESCRIPTION: Supports sending paid media via the SendPaidMedia method and related classes for inputting paid media details.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_150

LANGUAGE: APIDOC
CODE:
```
## POST /sendPaidMedia

### Description
Allows bots to send paid media content, such as photos or videos, that users must pay to access.

### Method
POST

### Endpoint
/sendPaidMedia

### Parameters
#### Path Parameters
None

#### Query Parameters
None

#### Request Body
- **chat_id** (int | str) - Required - Unique identifier for the target chat or username of the target channel (in the format `@channelusername`).
- **paid_media** (InputPaidMedia) - Required - Object describing the paid media to be sent.

### Request Example
```json
{
  "chat_id": "@channelusername",
  "paid_media": {
    "type": "photo",
    "media": "attach://photo.jpg",
    "title": "Premium Photo",
    "description": "Access exclusive content!"
  }
}
```

### Response
#### Success Response (200)
- **message_id** (int) - Unique message identifier.
- **chat** (Chat) - Conversation the message belongs to.
- **date** (DateTime) - Date the message was sent in Unix time.

#### Response Example
```json
{
  "ok": true,
  "result": {
    "message_id": 12345,
    "chat": {
      "id": 123456789,
      "type": "private",
      "first_name": "John"
    },
    "date": 1678886400
  }
}
```
```

--------------------------------

TITLE: Magic Filter: Combining Filters with Logical Operators
DESCRIPTION: Shows how to combine multiple magic filters using bitwise AND (`&`) and OR (`|`) operators. This allows for the creation of complex, multi-condition filters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#_snippet_8

LANGUAGE: python
CODE:
```
(F.from_user.id == 42) & (F.text == 'admin')
F.text.startswith('a') | F.text.endswith('b')
(F.from_user.id.in_({42, 777, 911})) & (F.text.startswith('!') | F.text.startswith('/')) & F.text.contains('ban')
```

--------------------------------

TITLE: Gifts Improvements (Python)
DESCRIPTION: Enhances the Gift and UniqueGift classes by adding a `publisher_chat` field to describe the chat that published the gift.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from aiogram.types import Gift, UniqueGift, Chat

# Example usage of publisher_chat
# gift: Gift
# if gift.publisher_chat:
#     print(f"Gift published by: {gift.publisher_chat.title}")
```

--------------------------------

TITLE: aiogram: Passing Filter Results as Handler Arguments
DESCRIPTION: Shows how to use the `.as_()` method with magic filters in aiogram handlers to capture the filter's matched result and pass it as a named argument to the handler function. This requires importing `F` from `aiogram`.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#_snippet_10

LANGUAGE: python
CODE:
```
from aiogram import F

...

@router.message(F.text.regexp(r"^(\d+)$").as_("digits"))
async def any_digits_handler(message: Message, digits: Match[str]):
    await message.answer(html.quote(str(digits)))
```

--------------------------------

TITLE: Hide General Forum Topic as Reply in Handler (Python)
DESCRIPTION: This snippet demonstrates returning the HideGeneralForumTopic object directly from a handler, typically used when responding to webhooks. It simplifies the process of sending the method as a reply.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/hide_general_forum_topic.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.hide_general_forum_topic import HideGeneralForumTopic

return HideGeneralForumTopic(...)
```

--------------------------------

TITLE: Fix MediaGroup attach methods
DESCRIPTION: This fix addresses issues with the attach methods for MediaGroup, ensuring that media groups are handled correctly. It resolves problems related to attaching multiple media files to a single message.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_17

LANGUAGE: python
CODE:
```
- Fixed :code:`MediaGroup` attach methods (`#514 <https://github.com/aiogram/aiogram/issues/514>`_)
```

--------------------------------

TITLE: Convert Gift to Stars in aiogram
DESCRIPTION: Introduces the `ConvertGiftToStars` method, allowing bots to convert received gifts from a business account into Telegram Stars. This adds flexibility to gift monetization within aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_35

LANGUAGE: Python
CODE:
```
from aiogram.methods.convert_gift_to_stars import ConvertGiftToStars
```

--------------------------------

TITLE: Message Features and Updates
DESCRIPTION: Details on new message-related features and updates in Aiogram, including message thread ID for get_url and handling of paid media.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_125

LANGUAGE: APIDOC
CODE:
```
## POST /api/message

### Description
This endpoint covers updates related to message functionalities, including new parameters and support for advanced features like paid media.

### Method
POST

### Endpoint
/api/message

### Parameters
#### Path Parameters
None

#### Query Parameters
None

#### Request Body
- **message_thread_id** (integer) - Optional - The ID of the message thread to which the URL belongs.
- **paid_media** (object) - Optional - Information about paid media associated with a transaction.

### Request Example
```json
{
  "message_thread_id": 123,
  "paid_media": {
    "type": "photo",
    "photo_list": [
      {
        "file_id": "AgACAgIAAxkBAAIB_mX8v514Jp05z4P4M4fM3yK8qK26AAICxTEbX5t5S45g9P8c7b21jQADAQAB"
      }
    ]
  }
}
```

### Response
#### Success Response (200)
- **url** (string) - The URL of the message.
- **transaction_partner** (object) - Information about the partner involved in the transaction.
  - **type** (string) - The type of the transaction partner.
  - **user** (object) - Details of the user involved in the transaction.
    - **id** (integer) - Unique identifier for the user.
    - **is_bot** (boolean) - True if the user is a bot.
    - **first_name** (string) - First name of the user.
    - **username** (string) - Username of the user.
    - **has_main_web_app** (boolean) - True if the user has a main web app.

#### Response Example
```json
{
  "url": "https://t.me/c/123456789/100",
  "transaction_partner": {
    "type": "user",
    "user": {
      "id": 1234567890,
      "is_bot": false,
      "first_name": "John",
      "username": "john_doe",
      "has_main_web_app": true
    }
  }
}
```
```

--------------------------------

TITLE: Read Business Message in aiogram
DESCRIPTION: Adds the `ReadBusinessMessage` method to allow bots to mark incoming messages as read on behalf of a business account. No specific dependencies are mentioned beyond the core aiogram library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_24

LANGUAGE: Python
CODE:
```
from aiogram.methods.read_business_message import ReadBusinessMessage
```

--------------------------------

TITLE: Return Send Animation in Webhook Handler (Python)
DESCRIPTION: Illustrates how to return a SendAnimation object from a webhook handler to send an animation as a reply. This is useful for asynchronous processing of incoming updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_animation.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendAnimation(...)
```

--------------------------------

TITLE: Add missing vcard argument to InputContactMessageContent
DESCRIPTION: This change introduces the missing `vcard` argument to the `InputContactMessageContent` constructor. This enables the correct creation of contact message content objects that include vCard information.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_20

LANGUAGE: python
CODE:
```
# Added missing vcard argument to InputContactMessageContent constructor (#473)
```

--------------------------------

TITLE: Delete Chat Photo as Method Object (Python)
DESCRIPTION: Shows how to use `DeleteChatPhoto` as a method object, either directly with the bot instance or as a reply within a handler. This approach requires importing the `DeleteChatPhoto` class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_chat_photo.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_chat_photo import DeleteChatPhoto

result: bool = await bot(DeleteChatPhoto(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import DeleteChatPhoto

return DeleteChatPhoto(...)
```

--------------------------------

TITLE: Filter Command by String
DESCRIPTION: Filters for a single, specific command string. This is the most basic usage of the Command filter.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/command.rst#_snippet_0

LANGUAGE: python
CODE:
```
Command("start")
```

--------------------------------

TITLE: Send Contact as Bot Method in aiogram
DESCRIPTION: Demonstrates how to send a contact using the send_contact method directly with the bot object. This is a common way to interact with the Telegram Bot API for sending contacts.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_contact.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_contact(...)
```

--------------------------------

TITLE: Handle Empty Webhook Response with JSON
DESCRIPTION: Fixes an issue where empty responses in webhook mode were not correctly handled by Telegram servers. This change ensures an empty JSON object is returned, which is a valid empty response format.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_50

LANGUAGE: python
CODE:
```
    The fix replaces empty response with empty JSON response:

    ::

       {}

```

--------------------------------

TITLE: Add missing exceptions for chat administration
DESCRIPTION: This update adds several missing exceptions related to chat administration: `MessageIdInvalid`, `CantRestrictChatOwner`, and `UserIsAnAdministratorOfTheChat`. These exceptions improve error handling for administrative actions within chats.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_21

LANGUAGE: python
CODE:
```
# Add missing exceptions: MessageIdInvalid, CantRestrictChatOwner and UserIsAnAdministratorOfTheChat (#474, #512)
```

--------------------------------

TITLE: Stop Live Location - Method Object
DESCRIPTION: This snippet shows how to use the StopMessageLiveLocation class as a method object, which can be called with a bot instance. This approach is useful for organizing bot methods or when working with specific bot instances.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/stop_message_live_location.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.stop_message_live_location import StopMessageLiveLocation
result: Union[Message, bool] = await bot(StopMessageLiveLocation(...))
```

--------------------------------

TITLE: Sticker Set Position and Deletion Methods in aiogram
DESCRIPTION: Includes methods for sticker management within a set, specifically for setting a sticker's position and deleting it from a set.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_198

LANGUAGE: python
CODE:
```
sticker.set_position_in_set()
sticker.delete_from_set()
```

--------------------------------

TITLE: SetMyName Reply in Webhook Handler
DESCRIPTION: This snippet shows how to return the SetMyName method object as a reply within a webhook handler. This is a common pattern for processing incoming webhook requests and sending back specific bot actions. The '...' represents the method's parameters.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_name.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetMyName(...)
```

--------------------------------

TITLE: Delete Story as an Object in aiogram
DESCRIPTION: Shows how to instantiate and use the DeleteStory method as an object. This approach is useful for more complex scenarios or when passing methods around. Imports for the DeleteStory class are also provided.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_story.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.delete_story import DeleteStory
```

LANGUAGE: python
CODE:
```
from aiogram.methods import DeleteStory
```

LANGUAGE: python
CODE:
```
result: bool = await bot(DeleteStory(...))
```

LANGUAGE: python
CODE:
```
return DeleteStory(...)
```

--------------------------------

TITLE: Decode Deep Link Payload in Aiogram Bot (Python)
DESCRIPTION: Handles incoming deep links in an aiogram bot and decodes the payload. It uses the `CommandStart` filter with `deep_link=True` and the `decode_payload` utility to extract the original arguments passed in the link.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/deep_linking.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.utils.deep_linking import decode_payload
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message

@router.message(CommandStart(deep_link=True))
async def handler(message: Message, command: CommandObject):
    args = command.args
    payload = decode_payload(args)
    await message.answer(f"Your payload: {payload}")
```

--------------------------------

TITLE: Aiogram Edited Channel Post Handler
DESCRIPTION: Demonstrates registering a handler for edited messages in channels using @router.edited_channel_post().

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_4

LANGUAGE: python
CODE:
```
@router.edited_channel_post()
async def edited_channel_post_handler(edited_channel_post: types.Message) -> Any: pass
```

--------------------------------

TITLE: Aiogram Poll Handler
DESCRIPTION: Shows how to register a handler for incoming polls using the @router.poll() decorator.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_10

LANGUAGE: python
CODE:
```
@router.poll()
async def poll_handler(poll: types.Poll) -> Any: pass
```

--------------------------------

TITLE: Add missing fields to WebApp classes in aiogram
DESCRIPTION: Adds missing fields like 'is_premium', 'added_to_attachment_menu', and 'allows_write_to_pm' to WebAppUser, and introduces the WebAppChat class with all its fields. Also includes omitted fields in WebAppInitData for complete Web Apps support.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_158

LANGUAGE: python
CODE:
```
WebAppUser
WebAppChat
WebAppInitData
```

--------------------------------

TITLE: Return CopyMessages in Webhook Handler
DESCRIPTION: Illustrates how to return a CopyMessages object from a webhook handler. This is a typical pattern for responding to Telegram updates received via webhook.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_messages.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.copy_messages import CopyMessages

return CopyMessages(...)
```

--------------------------------

TITLE: Global Filters Check Placement in aiogram Routers
DESCRIPTION: Explains the refactoring of global filters check placement into routers. This change allows context from global filters to be passed into handlers more effectively.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_189

LANGUAGE: python
CODE:
```
# Router configuration example:
# from aiogram import Router
#
# router = Router()
# @router.message()
# async def handle_message(message: types.Message):
#     # Access context from global filters here
```

--------------------------------

TITLE: Unpin All Forum Topic Messages as Bot Method
DESCRIPTION: This snippet demonstrates how to use the unpin_all_forum_topic_messages method directly on a bot instance. It returns a boolean value indicating the success of the operation. No specific dependencies are mentioned other than the bot instance itself.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_forum_topic_messages.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.unpin_all_forum_topic_messages(...)
```

--------------------------------

TITLE: Python 3.13 Compatibility and Dependency Updates
DESCRIPTION: Aiogram is now compatible with Python 3.13 and has dropped support for Python 3.8. Dependency version constraints have also been updated.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_98

LANGUAGE: APIDOC
CODE:
```
## Python 3.13 Compatibility and Dependency Updates

### Description
Aiogram has been tested and confirmed compatible with Python 3.13. Support for Python 3.8 has been dropped as it is End-of-Life. Additionally, version compatibility for `pydantic` and `aiohttp` has been updated.

### Method
N/A (Compatibility update)

### Endpoint
N/A

### Parameters
N/A

### Request Example
N/A

### Response
#### Success Response (200)
N/A

#### Response Example
N/A
```

--------------------------------

TITLE: IP Filtering Middleware for aiohttp (aiogram)
DESCRIPTION: This function provides an IP filtering middleware for aiohttp, allowing you to restrict incoming webhook requests to specific IP addresses.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/webhook.rst#_snippet_4

LANGUAGE: python
CODE:
```
from aiogram.webhook.aiohttp_server import ip_filter_middleware
```

--------------------------------

TITLE: Set Sticker Mask Position as Bot Method
DESCRIPTION: This snippet demonstrates how to use the `setStickerMaskPosition` method directly with a bot instance. It returns a boolean value indicating success or failure.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_sticker_mask_position.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_sticker_mask_position(...)
```

--------------------------------

TITLE: Send Dice as Method Object
DESCRIPTION: This snippet shows how to use SendDice as a method object. It can be called directly with the bot instance. Imports required are 'from aiogram.methods.send_dice import SendDice' or 'from aiogram.methods import SendDice'. The output is a Message object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_dice.rst#_snippet_1

LANGUAGE: python
CODE:
```
result: Message = await bot(SendDice(...))
```

--------------------------------

TITLE: Set Custom Emoji Sticker Set Thumbnail (Bot Method)
DESCRIPTION: This snippet demonstrates how to use the setCustomEmojiStickerSetThumbnail method directly with an aiogram bot instance. It shows the asynchronous call and the expected boolean return type.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_custom_emoji_sticker_set_thumbnail.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_custom_emoji_sticker_set_thumbnail(...)
```

--------------------------------

TITLE: Refactoring Executor Utility in aiogram
DESCRIPTION: This indicates a refactoring of the `aiogram.utils.executor` module. This module is responsible for running the bot's event loop and handling updates. Refactoring likely aims to improve performance, stability, or code organization within this core component.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_101

LANGUAGE: python
CODE:
```
# No specific code change shown, but implies internal improvements to:
# from aiogram.utils import executor
# 
# if __name__ == '__main__';
#     executor.start_polling(dp, skip_updates=True)

```

--------------------------------

TITLE: Using deleteMessage as a bot method
DESCRIPTION: Demonstrates how to call the deleteMessage method directly on a bot instance. This is a common way to send messages in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_message.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.delete_message(...)
```

--------------------------------

TITLE: Filter Callback Queries by CallbackData Fields
DESCRIPTION: Illustrates how to filter incoming callback queries in a router using the CallbackData filter. This allows handling specific callback types and values, such as filtering by the 'foo' field.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/callback_data.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.filters.callback_data import CallbackData
from aiogram.routing import Router

# ... (MyCallback definition)

router = Router()

# Filter callback by type and value of field :code:`foo`
@router.callback_query(MyCallback.filter(F.foo == "demo"))
async def my_callback_foo(query: CallbackQuery, callback_data: MyCallback):
    await query.answer(...)
    ...
    print("bar =", callback_data.bar)
```

--------------------------------

TITLE: Using Regexp Filter with Callback Query Data in aiogram
DESCRIPTION: This snippet enables the use of regular expressions (`regexp`) for filtering callback query data. This provides a powerful way to match specific patterns within the callback data strings sent from inline keyboards.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_106

LANGUAGE: python
CODE:
```
from aiogram.filters import Regexp

# @dp.callback_query_handler(Regexp('^item_\d+_details$'))
# async def process_item_details(call: types.CallbackQuery):
#     # Handler will be called if callback_data matches the regex

```

--------------------------------

TITLE: Return Edit Chat Subscription Invite Link in Webhook Handler (Python)
DESCRIPTION: Illustrates how to return an EditChatSubscriptionInviteLink object from a webhook handler. This is used for processing incoming webhook requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_subscription_invite_link.rst#_snippet_2

LANGUAGE: python
CODE:
```
return EditChatSubscriptionInviteLink(...)
```

--------------------------------

TITLE: Message.send_copy method
DESCRIPTION: Adds the Message.send_copy method, which enables forwarding messages without the 'forwarded from' label. This is useful for sharing content in a cleaner way.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_73

LANGUAGE: python
CODE:
```
await message.send_copy(chat_id=update.effective_chat.id)
```

--------------------------------

TITLE: Combining Filters with AND/OR in aiogram
DESCRIPTION: Introduces the ability to combine filters using logical AND and OR operations, providing more flexibility in defining message routing logic.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_206

LANGUAGE: python
CODE:
```
# Combining filters with an *and*/*or* operations
```

--------------------------------

TITLE: Update KeyboardBuilder Utility (Python)
DESCRIPTION: Updates the KeyboardBuilder utility by fixing type-hints for the button method and adjusting markup limits to real-world values. This improves the usability and accuracy of the keyboard building process.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_166

LANGUAGE: python
CODE:
```
from aiogram.utils.keyboard import KeyboardBuilder

# Example usage (assuming KeyboardBuilder class definition exists)
builder = KeyboardBuilder()
# ... methods to build keyboard ...

# Hypothetical fix for type-hints and limits
# builder.button.type_hint = 'NewType'
# builder.adjust(2, 2, ...)
# builder.max_row_limit = 8
```

--------------------------------

TITLE: Mandatory Certifi Dependency in aiogram
DESCRIPTION: Adds `certifi` as a mandatory dependency to resolve potential SSL certificate verification errors when making requests to the Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_212

LANGUAGE: python
CODE:
```
import certifi
# ...
# requests.get(..., verify=certifi.where())
```

--------------------------------

TITLE: Rework Bot-wide Globals in aiogram
DESCRIPTION: Refactors bot-wide global properties such as parse_mode and disable_web_page_preview for increased flexibility. The old methods for setting these properties are deprecated and will be removed in future versions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_161

LANGUAGE: python
CODE:
```
parse_mode
disable_web_page_preview
```

--------------------------------

TITLE: Customizing Command Prefix in aiogram
DESCRIPTION: This snippet demonstrates how to customize the command prefix in aiogram's `CommandsFilter`. By default, commands are triggered by a leading '/'. This feature allows developers to use different prefixes (e.g., '!') for commands, offering flexibility in command design.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_88

LANGUAGE: python
CODE:
```
from aiogram import Bot, Dispatcher
from aiogram.filters import Command

# bot = Bot(token="YOUR_BOT_TOKEN")
# dp = Dispatcher(bot)

# @dp.message_handler(Command("start", prefix="!"))
# async def cmd_start(message: types.Message):
#     await message.reply("Hello!")

```

--------------------------------

TITLE: Use DeclineChatJoinRequest as Bot Method
DESCRIPTION: This snippet demonstrates how to decline a chat join request by directly calling the decline_chat_join_request method on the bot object. It's a straightforward way to handle join requests asynchronously.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/decline_chat_join_request.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.decline_chat_join_request(...)
```

--------------------------------

TITLE: Type Hint Fixes for Message Methods in aiogram
DESCRIPTION: Corrects type hints for `Message` methods such as `reply_media_group` and `answer_media_group`, improving code clarity and static analysis.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_211

LANGUAGE: python
CODE:
```
# Fix typehints for Message, reply_media_group and answer_media_group methods
```

--------------------------------

TITLE: Reply into Webhook in Handler in aiogram
DESCRIPTION: Illustrates how to return an EditGeneralForumTopic object as a reply within a Webhook handler in aiogram. This is essential for processing incoming updates and sending appropriate responses back to Telegram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_general_forum_topic.rst#_snippet_2

LANGUAGE: python
CODE:
```
return EditGeneralForumTopic(...)
```

--------------------------------

TITLE: Use EditForumTopic as Bot Method
DESCRIPTION: Demonstrates how to call the edit_forum_topic method directly on a bot instance. This method is used to edit the name of a forum topic.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_forum_topic.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.edit_forum_topic(...)
```

--------------------------------

TITLE: Add full support for Telegram Bot API 5.0
DESCRIPTION: This version introduces full support for Telegram Bot API version 5.0. It incorporates all the latest features and changes from the official API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_33

LANGUAGE: python
CODE:
```
# Added full support of Telegram Bot API 5.0 (#454)
```

--------------------------------

TITLE: Edit Chat Invite Link as Bot Method (Python)
DESCRIPTION: This snippet shows how to use the editChatInviteLink method directly as a bot method in aiogram. It requires the 'bot' object and relevant parameters for the invite link.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_invite_link.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: ChatInviteLink = await bot.edit_chat_invite_link(...)
```

--------------------------------

TITLE: Updating Requirements List in aiogram
DESCRIPTION: This notes that the list of required packages for aiogram has been updated. This could involve adding new dependencies, updating existing ones to newer versions, or removing unused dependencies, ensuring compatibility and access to the latest features.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_102

LANGUAGE: text
CODE:
```
# requirements.txt
# - Updated dependencies (e.g., aiogram[speed] or specific versions)
# - Potentially added new optional dependencies for features like 'aiohttp_socks'

```

--------------------------------

TITLE: Use editMessageLiveLocation as Bot Method in Python
DESCRIPTION: Demonstrates how to call the editMessageLiveLocation method directly using a bot instance. The method is asynchronous and returns either a Message object or a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_live_location.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Union[Message, bool] = await bot.edit_message_live_location(...)
```

--------------------------------

TITLE: Bugfix: Webhook Empty Response
DESCRIPTION: Fixes an issue where webhooks might return an empty or invalid response to Telegram servers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_57

LANGUAGE: APIDOC
CODE:
```
## Bugfix: Webhook Empty Response

### Description
Resolves an issue with empty responses in webhook mode, ensuring a valid response format for Telegram servers.

### Details:
- Previously, empty responses caused issues with Telegram servers.
- The fix replaces empty responses with an empty JSON response (`{}`).
```

--------------------------------

TITLE: Handle User Leave/Join Events with ChatMemberUpdatedFilter
DESCRIPTION: This snippet demonstrates how to use ChatMemberUpdatedFilter to detect when a user leaves or joins a chat. It utilizes predefined transitions like IS_MEMBER >> IS_NOT_MEMBER for user leaves and IS_NOT_MEMBER >> IS_MEMBER for user joins.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/chat_member_updated.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.filters import IS_MEMBER, IS_NOT_MEMBER

@router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))
async def on_user_leave(event: ChatMemberUpdated): ...

@router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def on_user_join(event: ChatMemberUpdated): ...
```

--------------------------------

TITLE: Use SetPassportDataErrors as Bot Object Method
DESCRIPTION: Shows how to use `SetPassportDataErrors` as an object method when interacting with a specific bot. This involves importing the method and then passing an instance of it to the bot. It's useful for cleaner code organization.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_passport_data_errors.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_passport_data_errors import SetPassportDataErrors

result: bool = await bot(SetPassportDataErrors(...))
```

--------------------------------

TITLE: Story Content Types in aiogram
DESCRIPTION: Adds `InputStoryContentPhoto` and `InputStoryContentVideo` classes to represent the content of stories that can be posted. These are essential for story creation workflows in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_38

LANGUAGE: Python
CODE:
```
from aiogram.types.input_story_content_photo import InputStoryContentPhoto
from aiogram.types.input_story_content_video import InputStoryContentVideo
```

--------------------------------

TITLE: Add Chat Boosts and Story Fields to Message and Story Classes (Python)
DESCRIPTION: Introduces new fields to the Message and Story classes to support chat boosts and story-related information. Includes fields like 'boost_added', 'sender_boost_count', 'reply_to_story', 'chat', 'id', 'unrestrict_boost_count', and 'custom_emoji_sticker_set_name'.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_165

LANGUAGE: python
CODE:
```
class ChatBoostAdded:
    pass

class Message:
    boost_added: ChatBoostAdded
    sender_boost_count: int
    reply_to_story: bool

class Story:
    chat: 'Chat'
    id: int

class Chat:
    unrestrict_boost_count: int
    custom_emoji_sticker_set_name: str
```

--------------------------------

TITLE: Handling Plural Forms in Translations
DESCRIPTION: Illustrates how to use the gettext function '_' with plural forms in Python. The function accepts a singular string, a plural string, and a count, allowing for correct grammatical agreement based on the number of items.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_3

LANGUAGE: python
CODE:
```
from aiogram import html
from aiogram.utils.i18n import gettext as _

async def my_handler(message: Message) -> None:
    try:
        n = int(message.text)
    except ValueError:
        n = 1
    await message.answer(
        _("You ordered {n} piece.", "You ordered {n} pieces.",n).format(n)
        )
```

--------------------------------

TITLE: State Type Support in Scenes
DESCRIPTION: Addition of support for the `State` type in various scene methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_18

LANGUAGE: APIDOC
CODE:
```
## State Type Support in Scenes

### Description
Enhanced support for the `State` type in scene-related methods, including `goto`, `enter`, and `get`.

### Affected Methods
- `goto`
- `enter`
- `get` (within the context of scenes)

### Details
This update allows for more flexible state management within the scene functionality.

### Example
No direct API endpoint for this, but it affects the internal implementation of scene management.
```

--------------------------------

TITLE: Log Out as Method Object (Python)
DESCRIPTION: Logs out the bot using the LogOut method object. This can be used with a specific bot instance or returned in a webhook handler.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/log_out.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.log_out import LogOut

result: bool = await bot(LogOut(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import LogOut

return LogOut(...)
```

--------------------------------

TITLE: Story Management
DESCRIPTION: Methods for posting, editing, and deleting stories on behalf of a managed business account.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_49

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/story/post

### Description
Posts a story on behalf of a managed business account.

### Method
POST

### Endpoint
/api/aiogram/story/post

### Parameters
#### Request Body
- **story_content** (InputStoryContentPhoto | InputStoryContentVideo) - Required - The content of the story to post.
- **caption** (string) - Optional - Caption for the story.
- **caption_entities** (array of MessageEntity) - Optional - List of special entities that appear in the caption.
- **parse_mode** (string) - Optional - Mode for parsing entities in the caption (e.g., 'MarkdownV2', 'HTML').
- **disable_notification** (boolean) - Optional - Send the message silently.
- **protect_content** (boolean) - Optional - Protect the contents of the sent message from forwarding and saving.
- **reply_markup** (InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply) - Optional - Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
- **chat_id** (string) - Optional - If the bot is an inline bot, use this parameter to specify the chat ID for which the story is posted.
- **areas** (array of StoryArea) - Optional - A list of clickable active areas on the story.

### Request Example
```json
{
  "story_content": {
    "type": "photo",
    "media": "attach://story.jpg"
  },
  "caption": "Check out our new story!",
  "areas": [
    {
      "type": "link",
      "url": "https://example.com",
      "x_position": 50,
      "y_position": 50,
      "is_external": true
    }
  ]
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.
- **result** (Story) - Information about the posted story.

#### Response Example
```json
{
  "ok": true,
  "result": {
    "id": 1,
    "chat": {
      "id": "@business_account",
      "type": "private",
      "first_name": "Business Account"
    },
    "date": 1678886400,
    "is_deleted": false
  }
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/story/edit

### Description
Edits a story on behalf of a managed business account.

### Method
POST

### Endpoint
/api/aiogram/story/edit

### Parameters
#### Request Body
- **story_id** (integer) - Required - Identifier of the story to edit.
- **caption** (string) - Optional - New caption for the story.
- **caption_entities** (array of MessageEntity) - Optional - New list of special entities that appear in the caption.
- **parse_mode** (string) - Optional - New mode for parsing entities in the caption.
- **reply_markup** (InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply) - Optional - Additional interface options for the story.
- **areas** (array of StoryArea) - Optional - A new list of clickable active areas on the story.

### Request Example
```json
{
  "story_id": 1,
  "caption": "Updated story caption!"
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/story/delete

### Description
Deletes a story on behalf of a managed business account.

### Method
POST

### Endpoint
/api/aiogram/story/delete

### Parameters
#### Request Body
- **story_id** (integer) - Required - Identifier of the story to delete.

### Request Example
```json
{
  "story_id": 1
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

--------------------------------

TITLE: Unpin All Forum Topic Messages as Method Object
DESCRIPTION: This snippet shows how to use UnpinAllForumTopicMessages as a method object, which can be called with a bot instance. It requires importing the UnpinAllForumTopicMessages class from aiogram.methods.unpin_all_forum_topic_messages. The output is a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_forum_topic_messages.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.unpin_all_forum_topic_messages import UnpinAllForumTopicMessages
result: bool = await bot(UnpinAllForumTopicMessages(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import UnpinAllForumTopicMessages
result: bool = await bot(UnpinAllForumTopicMessages(...))
```

--------------------------------

TITLE: Using rapidjson for JSON Parsing in aiogram
DESCRIPTION: This snippet indicates the ability to use `rapidjson` as an alternative JSON parser in aiogram, alongside `ujson` and the standard `json`. `rapidjson` is known for its speed, potentially offering performance benefits for JSON-heavy operations within the bot.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_94

LANGUAGE: python
CODE:
```
# Configuration might look like this:
# from aiogram import Bot
# import rapidjson
# 
# bot = Bot(token='YOUR_BOT_TOKEN', json_dumps=rapidjson.dumps, json_loads=rapidjson.loads)

```

--------------------------------

TITLE: Return EditForumTopic in Webhook Handler
DESCRIPTION: Illustrates how to return an EditForumTopic object directly from a webhook handler. This is a common pattern for responding to Telegram API requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_forum_topic.rst#_snippet_2

LANGUAGE: python
CODE:
```
return EditForumTopic(...)
```

--------------------------------

TITLE: Add reply_parameters to message.send_copy (Python)
DESCRIPTION: Adds the 'reply_parameters' argument to the 'message.send_copy' method. This allows for more flexible handling of message replies, ensuring this parameter is correctly included.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_167

LANGUAGE: python
CODE:
```
from aiogram.types import Message, ReplyParameters

async def send_message_with_reply_params(message: Message):
    # Assuming 'reply_to_message_id' and 'allow_sending_without_reply'
    # are part of ReplyParameters and are correctly populated.
    reply_params = ReplyParameters(
        message_id=message.message_id,
        allow_sending_without_reply=True
    )
    await message.send_copy(chat_id=message.chat.id, reply_parameters=reply_params)
```

--------------------------------

TITLE: TransactionPartnerTelegramApi class (Python)
DESCRIPTION: Introduces the `TransactionPartnerTelegramApi` class. This class is used for managing transactions related to paid broadcasted messages within the aiogram framework.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_103

LANGUAGE: python
CODE:
```
class TransactionPartnerTelegramApi(BaseModel):
    """Represents a transaction partner when the payment is made via Telegram API.

    See also: https://core.telegram.org/bots/api#transactionpartnertelegramapi
    """
    pass
```

--------------------------------

TITLE: Return CopyMessage object in a Webhook handler in Python
DESCRIPTION: Illustrates how to return a CopyMessage object from a webhook handler. This is useful when processing incoming updates and needing to send a copied message back.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/copy_message.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.copy_message import CopyMessage

return CopyMessage(...)
```

--------------------------------

TITLE: Added business_connection_id to Message API shortcuts
DESCRIPTION: The `business_connection_id` attribute has been integrated into various message manipulation method shortcuts within the `aiogram.types.message.Message` class. This streamlines the process of sending messages on behalf of business accounts.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_94

LANGUAGE: python
CODE:
```
from aiogram.types import Message

# Example (conceptual, assumes Message object is obtained):
# message: Message = ...
# message.send_copy(chat_id=..., business_connection_id='conn_123') # Hypothetical shortcut usage
```

--------------------------------

TITLE: Use edit_story as Bot Method
DESCRIPTION: Demonstrates how to call the `edit_story` method directly using the bot object. This is a common way to interact with Telegram's API through aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_story.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Story = await bot.edit_story(...)
```

--------------------------------

TITLE: Set Business Account Gift Settings in aiogram
DESCRIPTION: Introduces the `SetBusinessAccountGiftSettings` method, allowing bots to configure privacy settings for incoming gifts in a business account. This method is part of aiogram's gift management features.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_31

LANGUAGE: Python
CODE:
```
from aiogram.methods.set_business_account_gift_settings import SetBusinessAccountGiftSettings
```

--------------------------------

TITLE: Set Chat Administrator Custom Title - Bot Method
DESCRIPTION: Demonstrates how to use the `set_chat_administrator_custom_title` method directly with a bot instance. This is the primary way to interact with the method for setting custom titles for administrators in a chat.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_administrator_custom_title.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_chat_administrator_custom_title(...)
```

--------------------------------

TITLE: Set Chat Title using Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the setChatTitle method as a direct bot method. It requires the bot object and the chat title parameters. The method returns a boolean indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_title.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_chat_title(...)
```

--------------------------------

TITLE: Using Currency Enum for Invoice Payments in aiogram
DESCRIPTION: Illustrates how to use the `Currency` enum provided by aiogram to specify the currency for sending invoices. This ensures correct currency codes are used, enhancing payment integration.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_178

LANGUAGE: python
CODE:
```
from aiogram.enums import Currency

# Example usage within a bot's send_invoice method:
# await bot.send_invoice(
#     ...,
#     currency=Currency.USD,
#     ...
# )
```

--------------------------------

TITLE: Corrected exception text in TelegramMethod.__await__
DESCRIPTION: The exception text for the `aiogram.methods.base.TelegramMethod.__await__` method has been corrected. This is a bugfix aimed at improving the clarity and accuracy of error messages during asynchronous method execution.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_83

LANGUAGE: python
CODE:
```
# No direct code example for a corrected exception text, but it relates to internal method implementation.
# The change improves error reporting when the __await__ method is called.
```

--------------------------------

TITLE: Check Paid Media Sending Capability in aiogram
DESCRIPTION: Adds the 'can_send_paid_media' field to ChatFullInfo to indicate if a chat supports sending paid media.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_147

LANGUAGE: python
CODE:
```
from aiogram.types.chat_full_info import ChatFullInfo

# Example:
# if chat_info.can_send_paid_media:
#     print('This chat supports paid media.')

```

--------------------------------

TITLE: Decline Suggested Post as Webhook Reply (Python)
DESCRIPTION: This snippet illustrates how to return the DeclineSuggestedPost method directly as a reply in a Webhook handler. This is useful for responding to incoming requests. The method returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/decline_suggested_post.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.decline_suggested_post import DeclineSuggestedPost

return DeclineSuggestedPost(...)
```

--------------------------------

TITLE: Send Paid Media with aiogram
DESCRIPTION: Supports sending paid media through the SendPaidMedia method and related input classes. This functionality requires specific input media types like photos and videos.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_136

LANGUAGE: python
CODE:
```
from aiogram.methods.send_paid_media import SendPaidMedia
from aiogram.types.input_paid_media import InputPaidMediaPhoto, InputPaidMediaVideo
```

--------------------------------

TITLE: Telegram Premium Subscription Gifting
DESCRIPTION: Information on the new method for gifting Telegram Premium subscriptions using Telegram Stars and related transaction fields.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_54

LANGUAGE: APIDOC
CODE:
```
## Telegram Premium Subscription Gifting

### Description
This section covers the functionality for bots to gift Telegram Premium subscriptions using Telegram Stars.

### New Method:
- `aiogram.methods.gift_premium_subscription.GiftPremiumSubscription`: Allows gifting premium subscriptions.

### Field Updates:
- `:code:`premium_subscription_duration` added to `TransactionPartnerUser`.
- `:code:`transaction_type` added to `TransactionPartnerUser` for better transaction differentiation.
```

--------------------------------

TITLE: Magic Filter: Custom Function Filtering
DESCRIPTION: Demonstrates how to use custom lambda functions for filtering logic with the `func` method. This allows for more complex, arbitrary checks on object attributes.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#_snippet_6

LANGUAGE: python
CODE:
```
F.chat.func(lambda chat: chat.id == -42)  # lambda message: (lambda chat: chat.id == -42)(message.chat)
```

--------------------------------

TITLE: Fix Message.answer_location and reply_location for live location
DESCRIPTION: This fix addresses issues with Message.answer_location and Message.reply_location methods, specifically concerning their ability to send live locations. It ensures that live location sharing functions correctly.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_15

LANGUAGE: python
CODE:
```
- Fixed :code:`Message.answer_location` and :code:`Message.reply_location` unable to send live location (`#497 <https://github.com/aiogram/aiogram/issues/497>`_)
```

--------------------------------

TITLE: GetMyStarBalance method for Bot API 9.1
DESCRIPTION: Provides functionality to retrieve the current balance of Telegram Stars for a bot using the GetMyStarBalance method. Requires Bot API 9.1.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_12

LANGUAGE: python
CODE:
```
from aiogram.methods.get_my_star_balance import GetMyStarBalance

# Example usage:
# star_balance = await bot(GetMyStarBalance())
```

--------------------------------

TITLE: UnhideGeneralForumTopic Usage as Bot Method
DESCRIPTION: Demonstrates how to use the UnhideGeneralForumTopic method directly with a bot instance. This method is used to unhide a general forum topic. It returns a boolean value indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unhide_general_forum_topic.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.unhide_general_forum_topic(...)
```

--------------------------------

TITLE: Enhanced Checklists Support (Python)
DESCRIPTION: Improves checklist functionality by adding `checklist_task_id` to ReplyParameters and `reply_to_checklist_task_id` to Message, enabling replies to specific checklist tasks.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from aiogram.types import Message, ReplyParameters

# Example: Replying to a checklist task
# await message.reply("This is a reply to task X.", reply_parameters=ReplyParameters(message_id=message.message_id, // This needs to be the actual task ID
#                                                                                                                        reply_to_message_id=message.message_id, # Assuming message_id refers to the task
#                                                                                                                        allow_sending_without_reply=True))
```

--------------------------------

TITLE: Set User Emoji Status as Method Object (Python)
DESCRIPTION: Shows how to use the SetUserEmojiStatus class as a method object, which can be passed to the bot instance. This approach allows for more explicit control and is useful when managing multiple methods or when a method needs to be constructed separately before execution. It requires importing the SetUserEmojiStatus class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_user_emoji_status.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_user_emoji_status import SetUserEmojiStatus

result: bool = await bot(SetUserEmojiStatus(...))
```

--------------------------------

TITLE: Set Chat Administrator Custom Title - Method Object
DESCRIPTION: Shows how to import and use `SetChatAdministratorCustomTitle` as a method object. This approach is useful when passing the method call as an argument or when working with the method in a more object-oriented manner. It can be called directly with a bot instance or returned from a webhook handler.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_administrator_custom_title.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_chat_administrator_custom_title import SetChatAdministratorCustomTitle

# Usage with a specific bot
result: bool = await bot(SetChatAdministratorCustomTitle(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetChatAdministratorCustomTitle

# As reply into Webhook in handler
return SetChatAdministratorCustomTitle(...)
```

--------------------------------

TITLE: Add EditChatSubscriptionInviteLink method in aiogram
DESCRIPTION: Adds the 'EditChatSubscriptionInviteLink' method, enabling bots to modify the names of existing subscription invite links. This functionality is available with Bot API 7.8.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_116

LANGUAGE: python
CODE:
```
aiogram.methods.edit_chat_subscription_invite_link.EditChatSubscriptionInviteLink(...)
```

--------------------------------

TITLE: Use BanChatMember as Method Object
DESCRIPTION: This snippet shows how to use BanChatMember as a method object, which can be passed to the bot instance. It requires importing the BanChatMember class.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_member.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.ban_chat_member import BanChatMember

# ...

result: bool = await bot(BanChatMember(...))
```

--------------------------------

TITLE: Set Business Account Bio in aiogram
DESCRIPTION: Adds the `SetBusinessAccountBio` method, enabling bots to update the biography of a managed business account. This feature enhances business account customization via aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_28

LANGUAGE: Python
CODE:
```
from aiogram.methods.set_business_account_bio import SetBusinessAccountBio
```

--------------------------------

TITLE: Use CloseGeneralForumTopic as Bot Method
DESCRIPTION: Demonstrates how to call the closeGeneralForumTopic method directly on a bot instance. This method is used to close a general forum topic. It returns a boolean value indicating success or failure.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_general_forum_topic.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.close_general_forum_topic(...)
```

--------------------------------

TITLE: Using DateTime Type Wrapper for JSON Compatibility in aiogram
DESCRIPTION: Explains the replacement of `datetime.datetime` with a `DateTime` type wrapper across aiogram. This change aims to improve the compatibility of dumped JSONs with data sent by Telegram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_184

LANGUAGE: python
CODE:
```
# Internal change example:
# from aiogram.utils.datetime import DateTime
#
# class SomeData:
#     timestamp: DateTime
#
# # Dumping to JSON will now use the DateTime wrapper for better compatibility.
```

--------------------------------

TITLE: Dispatcher.throttle method argument change
DESCRIPTION: Renames 'user' and 'chat' arguments to 'user_id' and 'chat_id' in the Dispatcher.throttle method for clarity and consistency.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_74

LANGUAGE: python
CODE:
```
dp.throttle(user_id=user.id, chat_id=chat.id)
```

--------------------------------

TITLE: Checklists API
DESCRIPTION: Endpoints related to the management and sending of checklists via the Telegram Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_15

LANGUAGE: APIDOC
CODE:
```
## POST /api/send_checklist

### Description
Allows bots to send a checklist on behalf of a business account.

### Method
POST

### Endpoint
/api/send_checklist

### Parameters
#### Path Parameters
None

#### Query Parameters
None

#### Request Body
- **checklist_task** (ChecklistTask) - Required - Represents a task in a checklist.
- **checklist** (Checklist) - Required - Represents a checklist.
- **input_checklist_task** (InputChecklistTask) - Required - Represents a task to add to a checklist.
- **input_checklist** (InputChecklist) - Required - Represents a checklist to create.

### Request Example
```json
{
  "checklist_task": {
    "text": "Example Task",
    "checked": false
  },
  "checklist": {
    "items": [
      {
        "text": "Task 1",
        "checked": false
      },
      {
        "text": "Task 2",
        "checked": true
      }
    ]
  }
}
```

### Response
#### Success Response (200)
- **message_id** (integer) - The unique identifier of the sent message.
- **chat** (Chat) - Information about the chat.
- **date** (string) - The date the message was sent.

#### Response Example
```json
{
  "message_id": 12345,
  "chat": {
    "id": 123456789,
    "type": "private",
    "username": "example_user"
  },
  "date": "2024-07-03T10:00:00Z"
}
```
```

LANGUAGE: APIDOC
CODE:
```
## PUT /api/edit_message_checklist

### Description
Allows bots to edit a checklist on behalf of a business account.

### Method
PUT

### Endpoint
/api/edit_message_checklist

### Parameters
#### Path Parameters
None

#### Query Parameters
None

#### Request Body
- **chat_id** (integer | string) - Required - Unique identifier for the target chat or username of the target channel.
- **message_id** (integer) - Required - Identifier of the message to edit.
- **checklist** (InputChecklist) - Optional - A new object for the checklist. If empty, the checklist will be removed.

### Request Example
```json
{
  "chat_id": 123456789,
  "message_id": 12345,
  "checklist": {
    "items": [
      {
        "text": "Updated Task 1",
        "checked": true
      }
    ]
  }
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the message was edited successfully.

#### Response Example
```json
{
  "ok": true
}
```
```

--------------------------------

TITLE: Magic Filter: Equality and Inequality Checks
DESCRIPTION: Shows how to perform equality (==) and inequality (!=) checks on object attributes using magic-filter. This is useful for filtering based on specific attribute values.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/filters/magic_filters.rst#_snippet_1

LANGUAGE: python
CODE:
```
F.text == 'hello'  # lambda message: message.text == 'hello'
F.from_user.id == 42  # lambda message: message.from_user.id == 42
F.text != 'spam'  # lambda message: message.text != 'spam'
```

--------------------------------

TITLE: Replace aiomongo with motor
DESCRIPTION: aiogram has transitioned from using `aiomongo` to `motor` for MongoDB interactions. This change is intended to improve performance and compatibility with the asynchronous ecosystem.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_39

LANGUAGE: python
CODE:
```
# Breaking change: Replaced aiomongo with motor (#368, #380)
```

--------------------------------

TITLE: Cancel FSM Conversation Handler (Python)
DESCRIPTION: Provides a handler to cancel the current FSM conversation using a command or specific text input.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/finite_state_machine/index.rst#_snippet_8

LANGUAGE: python
CODE:
```
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('Cancelled.')

```

--------------------------------

TITLE: File Download Status Check in aiogram
DESCRIPTION: Implements a check for the status code when downloading files, ensuring successful file transfers and providing better error handling.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_202

LANGUAGE: python
CODE:
```
# Check status code when downloading file
```

--------------------------------

TITLE: Validate WebApp Data Security (Python)
DESCRIPTION: Implements `hmac.compare_digest` for validating WebApp data, mitigating timing attacks and enhancing security.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_6

LANGUAGE: Python
CODE:
```
import hmac
from aiogram.utils.web_app import validate_web_app_init_data

async def secure_validate_data(bot_token: str, init_data: str):
    # This function internally uses hmac.compare_digest for security.
    # You would typically pass the bot_token to validate_web_app_init_data
    # if you were validating with the bot token, but the change focuses on the internal comparison method.
    # Example assuming validate_web_app_init_data internally uses compare_digest:
    return validate_web_app_init_data(bot_token=bot_token, init_data=init_data)
```

--------------------------------

TITLE: Upgrade Gift in aiogram
DESCRIPTION: Adds the `UpgradeGift` method, enabling bots to upgrade regular gifts received by a business account to unique gifts. This feature enhances the value and presentation of gifts in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_36

LANGUAGE: Python
CODE:
```
from aiogram.methods.upgrade_gift import UpgradeGift
```

--------------------------------

TITLE: Send Invoice Reply in Webhook Handler (Python)
DESCRIPTION: Shows how to return a SendInvoice object as a reply within a webhook handler. This is common for processing incoming requests and sending asynchronous responses.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_invoice.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendInvoice(...)
```

--------------------------------

TITLE: Unban Chat Sender Chat as Bot Method
DESCRIPTION: Demonstrates how to use the unban_chat_sender_chat method directly with a bot instance. This is the primary way to interact with the method for unbanning a sender chat. It requires the bot object and appropriate arguments to be passed.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_sender_chat.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.unban_chat_sender_chat(...)
```

--------------------------------

TITLE: Reply TransferGift in Webhook Handler
DESCRIPTION: Illustrates how to return a TransferGift object from a webhook handler. This is used when a webhook needs to respond with a gift transfer action.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/transfer_gift.rst#_snippet_2

LANGUAGE: python
CODE:
```
return TransferGift(...)
```

--------------------------------

TITLE: Adding Support for Bot API Versions in aiogram
DESCRIPTION: Highlights the addition of support for specific Bot API versions, namely 6.9 and 6.8. This ensures compatibility with the latest Telegram features.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_191

LANGUAGE: python
CODE:
```
# No direct code snippet, but implies internal updates to handle API changes.
# Developers benefit from using the latest API features seamlessly.
```

--------------------------------

TITLE: Send Poll as Bot Method
DESCRIPTION: Demonstrates how to send a poll using the bot object directly. This is a common pattern for initiating actions with the Telegram bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_poll.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_poll(...)
```

--------------------------------

TITLE: Set Chat Photo as Bot Method (Python)
DESCRIPTION: Usage of the set_chat_photo method directly through the bot object. This method requires a photo argument, typically a file ID or a file-like object, and returns a boolean indicating the operation's success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_photo.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_chat_photo(...)
```

--------------------------------

TITLE: Add error handling for _background_feed_update in aiogram
DESCRIPTION: Implements missing error handling for the '_background_feed_update' function, particularly when operating in 'handle_in_background=True' webhook mode. This prevents unexpected crashes.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_160

LANGUAGE: python
CODE:
```
_background_feed_update
handle_in_background=True
```

--------------------------------

TITLE: Fix context getters in Dispatcher and Chat.update_chat method
DESCRIPTION: This update fixes the user_id and chat_id getters from the context within Dispatcher's check_key, release_key, and throttle methods. It also corrects the Chat.update_chat method and similar operations, ensuring accurate context retrieval and chat updates.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_16

LANGUAGE: python
CODE:
```
- Fixed :code:`user_id` and :code:`chat_id` getters from the context at Dispatcher :code:`check_key`, :code:`release_key` and :code:`throttle` methods (`#520 <https://github.com/aiogram/aiogram/issues/520>`_)
- Fixed :code:`Chat.update_chat` method and all similar situations (`#516 <https://github.com/aiogram/aiogram/issues/516>`_)
```

--------------------------------

TITLE: Edit Message Media - Webhook Handler Return (Python)
DESCRIPTION: Illustrates how to return an EditMessageMedia object from a webhook handler. This is a concise way to send a response directly from a handler function. The Telegram API will process this returned object.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_media.rst#_snippet_2

LANGUAGE: python
CODE:
```
return EditMessageMedia(...)
```

--------------------------------

TITLE: Unpin Chat Message as Bot Method (aiogram)
DESCRIPTION: Demonstrates how to use the `unpinChatMessage` method directly with a bot instance. This is the most common way to unpin a message programmatically.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_chat_message.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.unpin_chat_message(...)
```

--------------------------------

TITLE: Serialize Python Object to Telegram Message
DESCRIPTION: Demonstrates how to serialize a Python dictionary into a Telegram Message object using Pydantic's model_validate. The serialization can optionally be bound to a Bot instance using a context dictionary.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/serialization.rst#_snippet_0

LANGUAGE: python
CODE:
```
message_data = { ... }  # Some message data as dict
message = Message.model_validate(message_data)
```

LANGUAGE: python
CODE:
```
message_data = { ... }  # Some message data as dict
message = Message.model_validate(message_data, context={"bot": bot})
```

--------------------------------

TITLE: EditMessageMedia method (Python)
DESCRIPTION: Adds support for adding media to existing text messages using the `edit_message_media` method. This allows dynamic updates of message content with new media attachments.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_104

LANGUAGE: python
CODE:
```
class EditMessageMedia(TelegramMethod):
    """Use this method to edit live location and venue messages.

    See also: https://core.telegram.org/bots/api#editmessagemedia
    """
    chat_id: Union[int, str]
    message_id: int
    media: InputMedia
    reply_markup: Optional[InlineKeyboardMarkup] = None
    inline_message_id: Optional[str] = None
    protect_content: Optional[bool] = None
    message_thread_id: Optional[int] = None
```

--------------------------------

TITLE: Enhancing Dispatcher Warning Messages in aiogram
DESCRIPTION: Improves dispatcher warning messages by including a JSON dump of the update when the update type is unknown. This aids in debugging unidentified update issues.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_190

LANGUAGE: python
CODE:
```
# Enhanced warning log:
# logger.warning("Unknown update type: %s. Update: %s", update_type, update.model_dump_json(indent=2))
```

--------------------------------

TITLE: Customized serialization in CallbackData factory (Python)
DESCRIPTION: Fixes customized serialization in the `CallbackData` factory. Specifically, UUIDs are now represented with 32 bytes (without hyphens) in callback data, improving data efficiency.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_105

LANGUAGE: python
CODE:
```
class CallbackDataFactory:
    ...
    def serialize(self, data: dict) -> str:
        # ... existing serialization logic ...
        if 'uuid' in data and isinstance(data['uuid'], uuid.UUID):
            data['uuid'] = str(data['uuid']).replace('-', '')
        # ... rest of serialization ...
        return serialized_data
```

--------------------------------

TITLE: Manage Business Account Profile Photo in aiogram
DESCRIPTION: Adds `SetBusinessAccountProfilePhoto` and `RemoveBusinessAccountProfilePhoto` methods for bots to manage the profile photo of a business account. These methods interact with the `InputProfilePhoto` type.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_30

LANGUAGE: Python
CODE:
```
from aiogram.methods.set_business_account_profile_photo import SetBusinessAccountProfilePhoto
from aiogram.methods.remove_business_account_profile_photo import RemoveBusinessAccountProfilePhoto
```

--------------------------------

TITLE: Full Support for Telegram Bot API 3.6 in aiogram
DESCRIPTION: This signifies that aiogram now fully supports all features and methods available in Telegram Bot API version 3.6. This ensures that developers can leverage the latest capabilities offered by Telegram's platform.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_108

LANGUAGE: python
CODE:
```
# No specific code, but means all API 3.6 methods are available.
# For example, using newly introduced message types or parameters.

```

--------------------------------

TITLE: Update GroupDeactivated exception pattern and add caption_entities
DESCRIPTION: This change updates the exception pattern for GroupDeactivated and adds the caption_entities field to the InputMedia base class. These updates improve error handling and extend media message capabilities.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_4

LANGUAGE: python
CODE:
```
- Updated pattern for :code:`GroupDeactivated` exception (`#549 <https://github.com/aiogram/aiogram/issues/549>`_
- Added :code:`caption_entities` field in :code:`InputMedia` base class (`#583 <https://github.com/aiogram/aiogram/issues/583>`_)
```

--------------------------------

TITLE: Set My Default Administrator Rights
DESCRIPTION: Sets the default administrator rights for the bot in all chats. These rights will be granted to the bot in new chats if it is added as an administrator.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_my_default_administrator_rights.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
## POST /setMyDefaultAdministratorRights

### Description
Sets the default administrator rights for the bot in all chats. These rights will be granted to the bot in new chats if it is added as an administrator.

### Method
POST

### Endpoint
/setMyDefaultAdministratorRights

### Parameters
#### Request Body
- **rights** (ChatAdministratorRights) - Required - Rights that will be assigned to the bot in all chats, or None if the bot needs to be able to see the list of administrators in all chats. 
- **for_channels** (bool) - Optional - Pass True to set the default administrator rights for all the channels to which a particular bot is an administrator.

### Request Example
{
  "rights": {
    "is_anonymous": false,
    "can_manage_chat": true,
    "can_delete_messages": true,
    "can_manage_video_chats": true,
    "can_restrict_members": true,
    "can_promote_members": true,
    "can_change_info": true,
    "can_invite_users": true,
    "can_pin_messages": true,
    "can_manage_topics": true
  },
  "for_channels": false
}

### Response
#### Success Response (200)
- **ok** (bool) - True if the request was successful.
- **result** (bool) - True if the rights were updated successfully, False otherwise.

#### Response Example
{
  "ok": true,
  "result": true
}
```

--------------------------------

TITLE: Add business_connection_id to PinChatMessage in aiogram
DESCRIPTION: The 'PinChatMessage' method now accepts the 'business_connection_id' parameter, allowing bots to pin messages on behalf of a business account. This functionality is supported by Bot API 7.8.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_120

LANGUAGE: python
CODE:
```
aiogram.methods.pin_chat_message.PinChatMessage(..., business_connection_id=...)
```

--------------------------------

TITLE: Unpin All Forum Topic Messages as Webhook Reply
DESCRIPTION: This snippet illustrates how to return an UnpinAllForumTopicMessages object as a reply in a webhook handler. This is useful for processing incoming updates and responding accordingly. The method is imported from the aiogram library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_forum_topic_messages.rst#_snippet_2

LANGUAGE: python
CODE:
```
return UnpinAllForumTopicMessages(...)
```

--------------------------------

TITLE: Set Business Account Username in aiogram
DESCRIPTION: Introduces the `SetBusinessAccountUsername` method, allowing bots to change the username of a business account. This is part of the business account management tools in aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_27

LANGUAGE: Python
CODE:
```
from aiogram.methods.set_business_account_username import SetBusinessAccountUsername
```

--------------------------------

TITLE: EditMessageChecklist method for Bot API 9.1
DESCRIPTION: Enables bots to edit checklists on behalf of a business account via the EditMessageChecklist method. Requires Bot API 9.1.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_11

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_message_checklist import EditMessageChecklist

# Example usage:
# await bot(EditMessageChecklist(chat_id=chat_id, message_id=message_id, ...))
```

--------------------------------

TITLE: Stop Live Location - Bot Method
DESCRIPTION: This snippet demonstrates how to use the stop_message_live_location method as a direct bot method to stop live location sharing. It requires a bot instance and appropriate parameters for the method.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/stop_message_live_location.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Union[Message, bool] = await bot.stop_message_live_location(...)
```

--------------------------------

TITLE: Edit Chat Invite Link Reply in Webhook Handler (Python)
DESCRIPTION: This snippet illustrates how to return an EditChatInviteLink object as a reply from a webhook handler in aiogram. This is useful for responding to incoming webhook requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_chat_invite_link.rst#_snippet_2

LANGUAGE: python
CODE:
```
return EditChatInviteLink(...)
```

--------------------------------

TITLE: Aiogram Removed Chat Boost Handler
DESCRIPTION: Shows how to register a handler for when a chat boost is removed, using the @router.removed_chat_boost() decorator.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/router.rst#_snippet_18

LANGUAGE: python
CODE:
```
@router.removed_chat_boost()
async def removed_chat_boost_handler(removed_chat_boost: types.ChatBoostRemoved) -> Any: pass
```

--------------------------------

TITLE: Ban Chat Sender Chat as Bot Method
DESCRIPTION: This code snippet demonstrates how to use the ban_chat_sender_chat method as a direct method of the bot object. It requires an await call and expects a boolean result. The specific parameters for BanChatSenderChat(...) are not detailed here.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_sender_chat.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.ban_chat_sender_chat(...)
```

--------------------------------

TITLE: Adding More Error Types in aiogram
DESCRIPTION: Similar to previous mentions, this indicates an expansion of the error handling capabilities by introducing more specific exception types. This allows for more granular error catching and management within bot logic.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_104

LANGUAGE: python
CODE:
```
# Potential addition of new exception classes like:
# class AnotherErrorType(AiogramError):
#     pass
# 
# try:
#     # operation that might raise the new error
# except AnotherErrorType as e:
#     print(f"Caught a specific error: {e}")

```

--------------------------------

TITLE: Fix Message.get_full_command() (Python)
DESCRIPTION: Corrects the functionality of the `Message.get_full_command()` method in aiogram version 2.9.2. This resolves issues related to retrieving the full command and its arguments from messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_61

LANGUAGE: python
CODE:
```
async def handler(message: Message):
    full_command = message.get_full_command()
    if full_command:
        command, args = full_command
        print(f"Command: {command}, Args: {args}")
```

--------------------------------

TITLE: Add business_connection_id to SendPaidMedia in aiogram
DESCRIPTION: Adds the 'business_connection_id' parameter to the 'SendPaidMedia' method. This enables bots to send paid media on behalf of a business account, expanding e-commerce capabilities. Requires Bot API 7.8.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_113

LANGUAGE: python
CODE:
```
aiogram.methods.send_paid_media.SendPaidMedia(..., business_connection_id=...)
```

--------------------------------

TITLE: Support custom encoders/decoders for payload and deep-linking (Python)
DESCRIPTION: Introduces the ability to use custom encoders and decoders for both payload data and deep-linking functionalities. This allows for greater flexibility in data serialization and handling.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_176

LANGUAGE: python
CODE:
```
from aiogram.utils.payload import PayloadEncoder, PayloadDecoder

class CustomEncoder(PayloadEncoder):
    def encode(self, data: dict) -> str:
        # Custom encoding logic
        return str(data)

class CustomDecoder(PayloadDecoder):
    def decode(self, payload: str) -> dict:
        # Custom decoding logic
        return {'decoded': payload}

# Usage would involve configuring these encoders/decoders within aiogram.
```

--------------------------------

TITLE: Configure Handler-Specific Callback Answer (Python)
DESCRIPTION: Modify callback answer behavior for specific handlers using flags, like setting custom text or cache time, or disabling the answer.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/callback_answer.rst#_snippet_2

LANGUAGE: python
CODE:
```
@router.callback_query(<filters>)
@flags.callback_answer(text="Thanks", cache_time=30)
async def my_handler(query: CallbackQuery):
    ...
```

--------------------------------

TITLE: Set User Emoji Status as Bot Method (Python)
DESCRIPTION: Demonstrates calling the setUserEmojiStatus method directly on a bot instance. This is the primary way to invoke the method to set a user's emoji status. It expects a bot object and the necessary parameters for the method.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_user_emoji_status.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_user_emoji_status(...)
```

--------------------------------

TITLE: Python: Define ChatMemberHandler for Chat Member Updates
DESCRIPTION: This snippet demonstrates how to define a custom handler class that inherits from aiogram's ChatMemberHandler. It's designed to process chat member update events, including when a user joins or leaves a chat. The handler is registered using decorators for both general chat member updates and specific 'my_chat_member' events.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/chat_member.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.handlers import ChatMemberHandler

@router.chat_member()
@router.my_chat_member()
class MyHandler(ChatMemberHandler):
    async def handle(self) -> Any: ...

```

--------------------------------

TITLE: Fix Reply KeyboardButton initializer with request_poll (Python)
DESCRIPTION: Corrects the initializer for `KeyboardButton` when using the `request_poll` argument. This ensures proper handling of poll-related button requests in aiogram version 2.6.1.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_56

LANGUAGE: python
CODE:
```
from aiogram.types import KeyboardButton

# Example usage:
button_poll = KeyboardButton("Send me a poll", request_poll={"type": "regular"})
```

--------------------------------

TITLE: Renaming Bot/Dispatcher .current() to .get_current() in aiogram
DESCRIPTION: This change involves renaming the `.current()` method on bot and dispatcher objects to `.get_current()`. This is a minor API refinement aimed at improving clarity and consistency, making it more explicit that the method retrieves the current instance.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_95

LANGUAGE: python
CODE:
```
# Old way:
# current_bot = Bot.current()
# 
# New way:
# current_bot = Bot.get_current()

```

--------------------------------

TITLE: Return Delete Bot Commands in Webhook Handler (Python)
DESCRIPTION: Illustrates returning the DeleteMyCommands object as a reply from a webhook handler. This allows the bot to process the command deletion request when receiving updates via a webhook.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_my_commands.rst#_snippet_2

LANGUAGE: python
CODE:
```
return DeleteMyCommands(...)
```

--------------------------------

TITLE: Mark Handler with Chat Action Flag (Python)
DESCRIPTION: Adds a 'chat_action' flag to a handler using a decorator. This flag can be used to indicate the type of action the bot should perform in the chat.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/flags.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram import flags

@flags.chat_action
async def my_handler(message: Message)
```

--------------------------------

TITLE: Send Dice using Bot Method
DESCRIPTION: This snippet demonstrates how to send a dice emoji using the bot's send_dice method. It returns a Message object upon successful execution. No specific dependencies are mentioned beyond the aiogram library.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_dice.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.send_dice(...)
```

--------------------------------

TITLE: Use SetPassportDataErrors as Bot Method
DESCRIPTION: Demonstrates how to call the `setPassportDataErrors` method directly on a bot instance. This is a common way to interact with the Telegram Bot API methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_passport_data_errors.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.set_passport_data_errors(...)
```

--------------------------------

TITLE: Fix TypeError with User instance and add Chat.delete_message shortcut
DESCRIPTION: This fix resolves a TypeError related to User instances and adds a convenient delete_message shortcut to the Chat object. It improves error handling for user-related operations and simplifies message deletion within chats.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_11

LANGUAGE: python
CODE:
```
- Fixed :code:`TypeError: Value should be instance of 'User' not 'NoneType'` (`#527 <https://github.com/aiogram/aiogram/issues/527>`_)
- Added missing :code:`Chat.message_auto_delete_time` field (`#535 <https://github.com/aiogram/aiogram/issues/535>`_)
- Added :code:`Chat.delete_message` shortcut (`#526 <https://github.com/aiogram/aiogram/issues/526>`_)
```

--------------------------------

TITLE: Update aiogram dependencies (Python)
DESCRIPTION: Updates various dependencies including 'magic-filter', 'pydantic', and 'aiodns'. It also includes compatibility fixes and adds 'aiodns' to the 'fast' extras.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_171

LANGUAGE: python
CODE:
```
# Dependency updates in setup.py or pyproject.toml:
# magic-filter: fixed .resolve operation
# pydantic: fixed compatibility (broken in 2.4)
# aiodns: added to 'fast' extras

# Installation example with extras:
# pip install aiogram[fast]

# Example of checking pydantic compatibility:
# import pydantic
# print(pydantic.VERSION)

```

--------------------------------

TITLE: Use EditMessageReplyMarkup as a Bot Method
DESCRIPTION: Demonstrates how to call the `editMessageReplyMarkup` method directly on a bot instance. This is a common way to interact with the Telegram Bot API to modify message reply markups.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_reply_markup.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Union[Message, bool] = await bot.edit_message_reply_markup(...)
```

--------------------------------

TITLE: Set Chat Title as Method Object (Python)
DESCRIPTION: This snippet shows how to use SetChatTitle as a method object. It can be called with a specific bot instance or used as a reply in a webhook handler. Imports for SetChatTitle are also provided.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_title.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.set_chat_title import SetChatTitle
result: bool = await bot(SetChatTitle(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import SetChatTitle
return SetChatTitle(...)
```

--------------------------------

TITLE: Return SetChatPermissions from Webhook Handler in Aiogram
DESCRIPTION: This snippet illustrates how to return a SetChatPermissions object directly from a webhook handler. This is useful for responding to incoming webhook updates with chat permission modifications.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_chat_permissions.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetChatPermissions(...)
```

--------------------------------

TITLE: Edit Message Caption as Object (Python)
DESCRIPTION: Shows how to use the EditMessageCaption method as a standalone object, which can be passed to the bot instance. This approach allows for more explicit control and instantiation.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_caption.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.edit_message_caption import EditMessageCaption
result: Union[Message, bool] = await bot(EditMessageCaption(...))
```

LANGUAGE: python
CODE:
```
from aiogram.methods import EditMessageCaption
result: Union[Message, bool] = await bot(EditMessageCaption(...))
```

--------------------------------

TITLE: UnhideGeneralForumTopic as Reply in Webhook Handler
DESCRIPTION: Illustrates how to return the UnhideGeneralForumTopic method directly as a reply within a webhook handler. This is a concise way to handle the method call in asynchronous webhooks. The method unhides a general forum topic and returns a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unhide_general_forum_topic.rst#_snippet_2

LANGUAGE: python
CODE:
```
return UnhideGeneralForumTopic(...)
```

--------------------------------

TITLE: Unban Chat Member as Aiogram Method Object
DESCRIPTION: This section shows how to use `UnbanChatMember` as a method object in aiogram. This approach involves importing the `UnbanChatMember` class and passing an instance of it to the bot. It offers flexibility for more complex scenarios or when managing methods as distinct objects.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unban_chat_member.rst#_snippet_1

LANGUAGE: python
CODE:
```
from aiogram.methods.unban_chat_member import UnbanChatMember

# Or using an alias:
# from aiogram.methods import UnbanChatMember

result: bool = await bot(UnbanChatMember(...))
```

--------------------------------

TITLE: Adding More API Exceptions in aiogram
DESCRIPTION: This indicates that several new exception classes have been added to aiogram to handle a wider range of potential API errors returned by Telegram. This improves the robustness of the library by allowing developers to catch and manage specific error conditions.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_98

LANGUAGE: python
CODE:
```
# Example of potential new exceptions:
# from aiogram.exceptions import SomeNewApiException
# 
# try:
#     # Some API call
# except SomeNewApiException as e:
#     # Handle the specific new error

```

--------------------------------

TITLE: Add setting current context of Telegram types
DESCRIPTION: Introduces functionality to set the current context for `Telegram` types. This allows for easier management and access to contextual information within bot handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_41

LANGUAGE: python
CODE:
```
# Add setting current context of Telegram types (#369)
```

--------------------------------

TITLE: Delete Sticker from Set - Webhook Reply (aiogram)
DESCRIPTION: Illustrates returning the DeleteStickerFromSet method object directly as a reply when handling webhooks. This is a concise way to respond to incoming requests.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_from_set.rst#_snippet_2

LANGUAGE: python
CODE:
```
return DeleteStickerFromSet(...)
```

--------------------------------

TITLE: InaccessibleMessage Updates
DESCRIPTION: Details on the addition of missing method aliases to InaccessibleMessage for improved consistency and usability.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_127

LANGUAGE: APIDOC
CODE:
```
## POST /api/message/inaccessible

### Description
This endpoint reflects updates to the `InaccessibleMessage` class, specifically the addition of method aliases such as `.answer()` and `.reply()` to align its functionality with the `Message` type.

### Method
POST

### Endpoint
/api/message/inaccessible

### Parameters
#### Path Parameters
None

#### Query Parameters
None

#### Request Body
- **message_id** (string) - The identifier of the inaccessible message.
- **chat_id** (integer) - The ID of the chat where the message is located.
- **text** (string) - The text content of the inaccessible message.

### Request Example
```json
{
  "message_id": "12345abcde",
  "chat_id": 987654321,
  "text": "This is an inaccessible message."
}
```

### Response
#### Success Response (200)
- **status** (string) - Indicates the success of the operation.
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "status": "success",
  "message": "InaccessibleMessage updated with new aliases."
}
```
```

--------------------------------

TITLE: allow_paid_broadcast parameter in Send methods (Python)
DESCRIPTION: Adds the `allow_paid_broadcast` parameter to various `aiogram.methods.send_*` classes. This enables bots to control whether paid content can be broadcasted through these methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_102

LANGUAGE: python
CODE:
```
class SendMessage(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendPhoto(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendVideo(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendAnimation(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendAudio(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendDocument(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendPaidMedia(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendSticker(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendVideoNote(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendVoice(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendLocation(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendVenue(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendContact(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendPoll(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendDice(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendInvoice(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendGame(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class SendMediaGroup(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None

class CopyMessage(TelegramMethod):
    ...
    allow_paid_broadcast: Optional[bool] = None
```

--------------------------------

TITLE: Alias Message.copy_to and deprecate Message.send_copy
DESCRIPTION: Introduces `Message.copy_to` as an alias for `Message.send_copy`. The `send_copy` method is now deprecated, encouraging the use of the new, more descriptive alias.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_35

LANGUAGE: python
CODE:
```
# Added alias to Message object Message.copy_to with deprecation of Message.send_copy
```

--------------------------------

TITLE: Delete Sticker from Set - Bot Method (aiogram)
DESCRIPTION: Demonstrates how to use the delete_sticker_from_set method as a direct bot method. Requires an active bot instance and appropriate parameters for the sticker set.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_from_set.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.delete_sticker_from_set(...)
```

--------------------------------

TITLE: Error Handling in aiogram Handlers
DESCRIPTION: This update specifies that aiogram error handlers should now accept only two arguments: the current update and the exception. This simplifies the signature for error handling functions, making them more focused and easier to implement correctly.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_96

LANGUAGE: python
CODE:
```
# Old handler signature (conceptual):
# async def handle_error(update, exception, dispatcher):
#     ...
# 
# New handler signature:
# async def handle_error(update, exception):
#     ...

```

--------------------------------

TITLE: Send Contact as Webhook Reply in aiogram
DESCRIPTION: Illustrates how to return a SendContact object as a reply within a webhook handler. This is useful for directly responding to incoming webhook updates with a contact message.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_contact.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendContact(...)
```

--------------------------------

TITLE: Log Out Bot Method (Python)
DESCRIPTION: Logs out the bot from the Telegram API. This method returns a boolean indicating success.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/log_out.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.log_out(...)
```

--------------------------------

TITLE: Added gift field to TransactionPartnerUser
DESCRIPTION: The `TransactionPartnerUser` class now features a `gift` field. This allows bots to associate specific gift information with user transactions, useful for tracking gift-related activity.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_93

LANGUAGE: python
CODE:
```
from aiogram.types import TransactionPartnerUser, Gift

# Example usage:
user_partner = TransactionPartnerUser(
    user_id=67890,
    gift=Gift(id='gift_premium', name='Premium Access') # New gift field
)
```

--------------------------------

TITLE: Gift Handling Updates
DESCRIPTION: Updates related to how gifts are handled, including changes to accepted gift types and new message types for gift notifications.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_53

LANGUAGE: APIDOC
CODE:
```
## Gift Handling Updates

### Description
This section details changes in how gifts are described and handled within the Aiogram library.

### Key Changes:
- Replaced `:code:`can_send_gift` with `:code:`accepted_gift_types` in `ChatFullInfo`.
- Added `GiftInfo` and `UniqueGiftInfo` classes to `Message` for service messages about gifts.
```

--------------------------------

TITLE: Return EditStory in Webhook Handler
DESCRIPTION: Illustrates how to return an `EditStory` object as a response from a webhook handler. This is essential for processing incoming updates and sending replies efficiently.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_story.rst#_snippet_2

LANGUAGE: python
CODE:
```
return EditStory(...)
```

--------------------------------

TITLE: Delete Sticker Set using Bot Method (Python)
DESCRIPTION: Demonstrates how to delete a sticker set using the `delete_sticker_set` method directly with the bot object. This is a common way to interact with Telegram bot API methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_sticker_set.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.delete_sticker_set(...)
```

--------------------------------

TITLE: Transfer Gift in aiogram
DESCRIPTION: Introduces the `TransferGift` method, allowing bots to transfer unique gifts owned by a business account. This facilitates gift management and sharing within aiogram applications.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_37

LANGUAGE: Python
CODE:
```
from aiogram.methods.transfer_gift import TransferGift
```

--------------------------------

TITLE: Setting Default Parse Mode for Messages in aiogram
DESCRIPTION: This feature allows developers to set a default `parse_mode` (like 'HTML' or 'Markdown') when initializing the `Bot` object. This eliminates the need to specify `parse_mode` repeatedly for every message sent.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_111

LANGUAGE: python
CODE:
```
from aiogram import Bot

# bot = Bot(token='YOUR_BOT_TOKEN', parse_mode='HTML')
# 
# # Now, messages sent without explicit parse_mode will use HTML
# # await bot.send_message(chat_id=..., text='<b>Bold</b> text')

```

--------------------------------

TITLE: User Profile Photos Retrieval in aiogram
DESCRIPTION: A method to retrieve a user's profile photos.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_199

LANGUAGE: python
CODE:
```
user.get_profile_photos()
```

--------------------------------

TITLE: Add Admin Rights for Stories in aiogram
DESCRIPTION: Includes support for administrator rights related to stories ('can_post_stories', 'can_edit_stories', 'can_delete_stories') in supergroups, aligning with Bot API 7.1.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_163

LANGUAGE: python
CODE:
```
can_post_stories
can_edit_stories
can_delete_stories
```

--------------------------------

TITLE: Remove Business Account Profile Photo - Webhook Handler Reply
DESCRIPTION: Shows how to return `RemoveBusinessAccountProfilePhoto` as a reply when handling webhooks. This allows the bot to respond to incoming updates with this specific action.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_business_account_profile_photo.rst#_snippet_2

LANGUAGE: python
CODE:
```
return RemoveBusinessAccountProfilePhoto(...)
```

--------------------------------

TITLE: Unpin All General Forum Topic Messages
DESCRIPTION: Unpins all messages in the general forum topic. This method can be invoked using the bot object directly, as a method of the bot, or as a reply to a webhook.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_all_general_forum_topic_messages.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
## POST /bot<token>/unpinAllGeneralForumTopicMessages

### Description
Unpins all messages in the general forum topic.

### Method
POST

### Endpoint
/bot<token>/unpinAllGeneralForumTopicMessages

### Parameters
#### Query Parameters
- **chat_id** (ChatId) - Required - Unique identifier for the target chat or username of the target channel (in the format @channelusername). For your bot's chats, use the identifier of the corresponding chat.

### Request Example
```json
{
  "chat_id": "12345"
}
```

### Response
#### Success Response (200)
- **ok** (bool) - True if the request was successful
- **result** (bool) - True if the messages were successfully unpinned

#### Response Example
```json
{
  "ok": true,
  "result": true
}
```
```

--------------------------------

TITLE: Return EditMessageReplyMarkup in a Handler
DESCRIPTION: Illustrates how to return an `EditMessageReplyMarkup` object from a webhook handler. This is useful for updating the reply markup of a message in response to an incoming update.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_reply_markup.rst#_snippet_2

LANGUAGE: python
CODE:
```
return EditMessageReplyMarkup(...)
```

--------------------------------

TITLE: Set Game Score Reply in Webhook Handler aiogram
DESCRIPTION: Illustrates how to return the SetGameScore object as a reply within a webhook handler. This is useful for responding to incoming webhook requests from Telegram with a game score update.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/set_game_score.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SetGameScore(...)
```

--------------------------------

TITLE: Edit Checklist Message as Bot Method (Python)
DESCRIPTION: This snippet demonstrates how to use the editMessageChecklist functionality directly as a method of the bot object in aiogram. It requires a Message object as a return type and accepts arguments defined by EditMessageChecklist.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_checklist.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Message = await bot.edit_message_checklist(...)
```

--------------------------------

TITLE: Close Forum Topic in Webhook Handler
DESCRIPTION: This snippet illustrates how to return the `CloseForumTopic` object from a webhook handler. This allows the bot to close a forum topic as a response to an incoming webhook.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_forum_topic.rst#_snippet_2

LANGUAGE: python
CODE:
```
return CloseForumTopic(...)
```

--------------------------------

TITLE: CallbackData Filter Fix
DESCRIPTION: Fixes an issue related to handling default empty strings in the CallbackData filter.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_63

LANGUAGE: APIDOC
CODE:
```
## CallbackData Filter Fix

### Description
Corrects the handling of default empty strings within the CallbackData filter.

### Details:
- Addresses an issue with how empty strings were processed by the filter.
```

--------------------------------

TITLE: Implementing States Group Feature in aiogram
DESCRIPTION: This code relates to the implementation of the States Group feature in aiogram. This feature allows bots to manage conversational states for users, enabling multi-step interactions and complex workflows. It's a core component for building interactive bots.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_93

LANGUAGE: python
CODE:
```
from aiogram.dispatcher.filters.state import StatesGroup, State

# class MyStates(StatesGroup):
#     waiting_for_name = State()
#     waiting_for_email = State()

```

--------------------------------

TITLE: Adjust Keyboard Layout
DESCRIPTION: Organizes the previously added buttons into a grid layout. This allows for controlling the number of buttons per row, making the keyboard more organized and user-friendly.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/keyboard.rst#_snippet_1

LANGUAGE: python
CODE:
```
builder.adjust(3, 2)
```

--------------------------------

TITLE: Define a Poll Handler in Python
DESCRIPTION: Demonstrates how to define a custom poll handler by inheriting from the base PollHandler class and implementing the handle method. This is a fundamental pattern for processing incoming polls within the aiogram framework.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/dispatcher/class_based_handlers/poll.rst#_snippet_0

LANGUAGE: python
CODE:
```
from aiogram.handlers import PollHandler


@router.poll()
class MyHandler(PollHandler):
    async def handle(self) -> Any: ...
```

--------------------------------

TITLE: Add has_main_web_app field to User class in aiogram
DESCRIPTION: The 'User' class now includes the 'has_main_web_app' field, returned in 'GetMe' responses. This indicates whether a user has a main Web App associated with their account. Requires Bot API 7.8.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_119

LANGUAGE: python
CODE:
```
aiogram.types.user.User(..., has_main_web_app=...)
```

--------------------------------

TITLE: Delete Bot Commands as Bot Method (Python)
DESCRIPTION: Demonstrates how to use the delete_my_commands method directly via the bot object to remove the bot's command list. This is a common way to manage bot commands dynamically.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_my_commands.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.delete_my_commands(...)
```

--------------------------------

TITLE: Using Lazy Gettext for Filters in Python
DESCRIPTION: Explains and shows the usage of lazy_gettext (__) for strings used in filters where the language might not be known at the time of definition. It highlights that lazy gettext calls should not be used for API method arguments or Telegram objects.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/utils/i18n.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram import F
from aiogram.utils.i18n import lazy_gettext as __

@router.message(F.text == __("My menu entry"))
...
```

--------------------------------

TITLE: Fix ChatMember type detection with customizable serialization
DESCRIPTION: This change addresses an issue with detecting ChatMember types by introducing a customizable object serialization mechanism. It resolves bugs related to type detection and ensures proper handling of ChatMember objects.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_0

LANGUAGE: python
CODE:
```
Fixed :code:`ChatMember` type detection via adding customizable object serialization mechanism (`#624 <https://github.com/aiogram/aiogram/issues/624>`_, `#623 <https://github.com/aiogram/aiogram/issues/623>`_)
```

--------------------------------

TITLE: Close Method Usage in aiogram
DESCRIPTION: Demonstrates how to use the Close method in aiogram. It shows invocation as a bot method, as an object with specific bot, and as a reply into Webhook in a handler. This method is expected to return a boolean.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.close(...)
```

LANGUAGE: python
CODE:
```
from aiogram.methods.close import Close

result: bool = await bot(Close(...))
```

LANGUAGE: python
CODE:
```
return Close(...)
```

--------------------------------

TITLE: Returning deleteMessage in a Webhook handler
DESCRIPTION: Illustrates how to return a DeleteMessage object when handling Webhook requests. This allows the library to process the delete action.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/delete_message.rst#_snippet_2

LANGUAGE: python
CODE:
```
return DeleteMessage(...)
```

--------------------------------

TITLE: Message Reply Parameter Update
DESCRIPTION: Details on the update to Message reply methods, replacing 'reply_to_message_id' with 'reply_parameters' for enhanced functionality.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_134

LANGUAGE: APIDOC
CODE:
```
## POST /api/message/reply

### Description
This endpoint reflects an update in message reply handling. The `reply_to_message_id` argument has been replaced with `reply_parameters` in all Message reply methods for improved flexibility and consistency.

### Method
POST

### Endpoint
/api/message/reply

### Parameters
#### Path Parameters
- **chat_id** (integer) - Required - The ID of the chat to send the reply to.
- **message_id_to_reply_to** (integer) - Required - The ID of the message to which this message is a reply.

#### Query Parameters
None

#### Request Body
- **reply_parameters** (object) - Parameters for the reply.
  - **message_id** (integer) - Required - The ID of the message that the new message is a reply to.
  - **allow_sending_without_reply** (boolean) - Optional - Pass True if the message should be sent even if the referenced message is not found.
  - **quote** (string) - Optional - Text that will be repeated in the reference message.
- **text** (string) - Required - The text of the reply message.

### Request Example
```json
{
  "reply_parameters": {
    "message_id": 202,
    "allow_sending_without_reply": false,
    "quote": "This is a great point!"
  },
  "text": "I agree."
}
```

### Response
#### Success Response (200)
- **message_id** (integer) - The ID of the sent reply message.
- **chat** (object) - Information about the chat where the reply was sent.

#### Response Example
```json
{
  "message_id": 203,
  "chat": {
    "id": 987654321,
    "type": "private"
  }
}
```
```

--------------------------------

TITLE: Business Account Message Management
DESCRIPTION: Methods for managing messages within a business account, including marking messages as read and deleting them.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_45

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/business/message/read

### Description
Marks an incoming business message as read on behalf of a business account.

### Method
POST

### Endpoint
/api/aiogram/business/message/read

### Parameters
#### Request Body
- **chat_id** (string) - Required - Unique identifier for the target chat or username of the target channel.
- **message_id** (integer) - Required - Identifier of the message to mark as read.

### Request Example
```json
{
  "chat_id": "@business_account",
  "message_id": 12345
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

LANGUAGE: APIDOC
CODE:
```
## POST /api/aiogram/business/message/delete

### Description
Deletes messages on behalf of a business account.

### Method
POST

### Endpoint
/api/aiogram/business/message/delete

### Parameters
#### Request Body
- **chat_id** (string) - Required - Unique identifier for the target chat or username of the target channel.
- **message_ids** (array of integers) - Required - Identifiers of the messages to delete.

### Request Example
```json
{
  "chat_id": "@business_account",
  "message_ids": [12345, 12346]
}
```

### Response
#### Success Response (200)
- **ok** (boolean) - True if the request was successful.

#### Response Example
```json
{
  "ok": true
}
```
```

--------------------------------

TITLE: Send Gift - aiogram Reply in Webhook Handler
DESCRIPTION: Returning the SendGift object directly as a reply within a Webhook handler. This method is used for handling incoming webhook requests and sending a gift.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/send_gift.rst#_snippet_2

LANGUAGE: python
CODE:
```
return SendGift(...)
```

--------------------------------

TITLE: Use BanChatMember as Bot Method
DESCRIPTION: This snippet demonstrates how to use the BanChatMember method directly with a bot instance. It's a straightforward way to ban a user from a chat.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/ban_chat_member.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.ban_chat_member(...)
```

--------------------------------

TITLE: Return CloseGeneralForumTopic in Webhook Handler
DESCRIPTION: Shows how to return the CloseGeneralForumTopic object directly from a webhook handler. This is useful for processing incoming updates and responding with the method call. The return value is the method.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/close_general_forum_topic.rst#_snippet_2

LANGUAGE: python
CODE:
```
from aiogram.methods.close_general_forum_topic import CloseGeneralForumTopic

return CloseGeneralForumTopic(...)
```

--------------------------------

TITLE: Passing Filter Results as Handler Arguments in aiogram
DESCRIPTION: This snippet describes a mechanism in aiogram where results from filters can be passed as keyword arguments (kwargs) directly into handlers. This is similar to how fixtures work in pytest, allowing for cleaner data flow and reducing boilerplate code in handlers.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_92

LANGUAGE: python
CODE:
```
# Conceptual example:
# async def filter_user_data(message: types.Message) -> dict:
#     return {'user_id': message.from_user.id, 'username': message.from_user.username}
# 
# @dp.message_handler(some_filter_that_returns_data=True)
# async def process_message(message: types.Message, user_id: int, username: str):
#     # 'user_id' and 'username' are passed from the filter result

```

--------------------------------

TITLE: Update thumbnail fields to InputFile (Python)
DESCRIPTION: Modifies the 'thumbnail' fields to exclusively accept the 'InputFile' type. This standardizes the handling of thumbnail uploads.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_174

LANGUAGE: python
CODE:
```
from aiogram.types import InputFile

# Example of a class that might have thumbnail fields updated
# class SendPhotoPayload:
#     thumbnail: InputFile | None = None

# The change ensures that only InputFile objects are accepted for thumbnails.
```

--------------------------------

TITLE: Support Bot API 5.3 and fix Message.send_copy for polls
DESCRIPTION: This version provides full support for Bot API 5.3 and includes a fix for the Message.send_copy method when used with polls. It ensures compatibility with the latest Telegram Bot API features and corrects behavior for poll messages.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_3

LANGUAGE: python
CODE:
```
Full support of Bot API 5.3 (`#610 <https://github.com/aiogram/aiogram/issues/610>`_, `#614 <https://github.com/aiogram/aiogram/issues/614>`_)
- Fixed :code:`Message.send_copy` method for polls (`#603 <https://github.com/aiogram/aiogram/issues/603>`_)
```

--------------------------------

TITLE: Edit Message Text as Webhook Reply
DESCRIPTION: Illustrates how to return an EditMessageText object as a reply when handling webhooks. This is a typical pattern for bots that receive updates via webhooks, allowing them to respond by editing messages. The returned object is then processed by the aiogram framework.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_text.rst#_snippet_2

LANGUAGE: python
CODE:
```
return EditMessageText(...)
```

--------------------------------

TITLE: Transfer Business Account Stars in aiogram
DESCRIPTION: Introduces the `TransferBusinessAccountStars` method, enabling bots to transfer Telegram Stars from a business account balance to their own for withdrawal. This is a key financial operation within aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_33

LANGUAGE: Python
CODE:
```
from aiogram.methods.transfer_business_account_stars import TransferBusinessAccountStars
```

--------------------------------

TITLE: Refunded Payment Information
DESCRIPTION: Details on the RefundedPayment class and its integration into the Message type for service messages about refunded payments.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_135

LANGUAGE: APIDOC
CODE:
```
## POST /api/payment/refunded

### Description
This endpoint covers the `RefundedPayment` class, which provides information about a refunded payment. This data is included in service messages within the `Message` type.

### Method
POST

### Endpoint
/api/payment/refunded

### Parameters
#### Path Parameters
- **chat_id** (integer) - Required - The ID of the chat where the refund notification occurred.
- **message_id** (integer) - Required - The ID of the service message related to the refund.

#### Query Parameters
None

#### Request Body
- **refunded_payment** (object) - Information about the refunded payment.
  - **currency** (string) - Required - The currency of the payment.
  - **total_amount** (integer) - Required - The total amount that was refunded.
  - **invoice_payload** (string) - Required - The payload of the invoice associated with the payment.
  - **shipping_option_id** (string) - Optional - Identifier for the shipping option, if any.
  - **order_info** (object) - Optional - Information about the order.
    - **name** (string) - Name of the customer.
    - **phone_number** (string) - Phone number of the customer.
    - **shipping_address** (object) - Shipping address details.

### Request Example
```json
{
  "refunded_payment": {
    "currency": "USD",
    "total_amount": 1000,
    "invoice_payload": "order_12345_refund",
    "shipping_option_id": "standard_shipping",
    "order_info": {
      "name": "Customer Name",
      "phone_number": "+1234567890",
      "shipping_address": {
        "street_line1": "123 Main St",
        "city": "Anytown"
      }
    }
  }
}
```

### Response
#### Success Response (200)
- **status** (string) - Indicates the success of the operation.
- **message** (string) - A confirmation message.

#### Response Example
```json
{
  "status": "success",
  "message": "Refunded payment notification processed."
}
```
```

--------------------------------

TITLE: Fix Chat.set_description (Python)
DESCRIPTION: Addresses a bug in the `Chat.set_description` method in aiogram version 2.9. This ensures that the method correctly updates the chat's description as per the Telegram Bot API.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_62

LANGUAGE: python
CODE:
```
async def set_chat_description(chat_id: int, description: str):
    # Assuming 'bot' is an instance of aiogram.Bot
    await bot.set_chat_description(chat_id=chat_id, description=description)
```

--------------------------------

TITLE: Prevent TelegramObject destruction after update handling
DESCRIPTION: Ensures that `TelegramObject` instances are not destroyed prematurely after handling updates. This fix prevents potential data loss or errors related to object lifecycles.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_40

LANGUAGE: python
CODE:
```
# Fixed: TelegramObject's aren't destroyed after update handling (#307) (#371)
```

--------------------------------

TITLE: Fix type hints of callback_data (Python)
DESCRIPTION: Improves the type hinting for `callback_data` in aiogram version 2.5.3. This enhances code analysis and developer experience by providing more accurate type information for callback data structures.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_70

LANGUAGE: python
CODE:
```
from aiogram.utils.callback_data import CallbackData
from typing import Dict

# Example with improved type hinting:
class MyCallbackData(CallbackData, prefix="mydata"):
    __annotations__ = {"item_id": int, "action": str}


def process_callback(callback_data: Dict[str, str]):
    # Type checkers will now better understand callback_data structure
    pass
```

--------------------------------

TITLE: Edit Message Caption as Bot Method (Python)
DESCRIPTION: Demonstrates using the editMessageCaption method directly through the bot object. This is a common way to interact with Telegram Bot API methods.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/edit_message_caption.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: Union[Message, bool] = await bot.edit_message_caption(...)
```

--------------------------------

TITLE: Add ChatType builtin filter
DESCRIPTION: A new builtin filter, `ChatType`, has been added. This filter simplifies the process of routing updates based on the type of chat they originate from (e.g., private, group, channel).

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/HISTORY.rst#_snippet_48

LANGUAGE: python
CODE:
```
# Added ChatType builtin filter (#356)
```

--------------------------------

TITLE: Update type hint for data dictionary
DESCRIPTION: Corrects a type hint for a data dictionary from `Dict[Any, str]` to `Dict[str, Any]`. This improves type accuracy for dictionary keys and values, enhancing code clarity.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_74

LANGUAGE: python
CODE:
```
# Example of corrected type hint:
# from typing import Dict, Any
# data: Dict[str, Any]
```

--------------------------------

TITLE: Unpin Chat Message Reply in Handler (aiogram)
DESCRIPTION: Illustrates how to return an `UnpinChatMessage` object directly from a webhook handler. This allows the aiogram framework to automatically process the unpin request.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/unpin_chat_message.rst#_snippet_2

LANGUAGE: python
CODE:
```
return UnpinChatMessage(...)
```

--------------------------------

TITLE: Limit Concurrent Updates in Polling Mode
DESCRIPTION: Introduces a semaphore-based solution to limit concurrent tasks when handle_as_tasks=True in polling mode. This prevents Out of Memory errors by controlling the number of concurrent updates processed. The 'tasks_concurrency_limit' parameter in 'start_polling()' and 'run_polling()' methods allows configuration.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/CHANGES.rst#_snippet_51

LANGUAGE: python
CODE:
```
You can now control the maximum number of concurrent updates with the new :code:`tasks_concurrency_limit`
parameter in :code:`start_polling()` and :code:`run_polling()` methods.
```

--------------------------------

TITLE: Remove Business Account Profile Photo - Bot Method Usage
DESCRIPTION: Demonstrates how to use the `removeBusinessAccountProfilePhoto` method directly with a bot instance. This is a common way to interact with the Telegram Bot API using aiogram.

SOURCE: https://github.com/aiogram/aiogram/blob/dev-3.x/docs/api/methods/remove_business_account_profile_photo.rst#_snippet_0

LANGUAGE: python
CODE:
```
result: bool = await bot.remove_business_account_profile_photo(...)
```